# HLint configuration file
# https://github.com/ndmitchell/hlint
##########################

# This file contains a template configuration file, which is typically
# placed as .hlint.yaml in the root of your project


# Specify additional command line arguments
#
# - arguments: [--color, --cpp-simple, -XQuasiQuotes]
- arguments: [-XTypeApplications]


# Control which extensions/flags/modules/functions can be used
#
# - extensions:
#   - default: false # all extension are banned by default
#   - name: [PatternGuards, ViewPatterns] # only these listed extensions can be used
#   - {name: CPP, within: CrossPlatform} # CPP can only be used in a given module
#
# - flags:
#   - {name: -w, within: []} # -w is allowed nowhere
#
# - modules:
#   - {name: [Data.Set, Data.HashSet], as: Set} # if you import Data.Set qualified, it must be as 'Set'
#   - {name: Control.Arrow, within: []} # Certain modules are banned entirely
#
# - functions:
#   - {name: unsafePerformIO, within: []} # unsafePerformIO can only appear in no modules

- modules:
  - {name: [Data.Map], within: []}
  - {name: [System.FilePath.Posix], within: []}
  - name:
      - Data.Text.Prettyprint.Doc
      - Data.Text.Prettyprint.Doc.Render.Text
      - Data.Text.Prettyprint.Doc.String
    within:
      - Pretty


# Add custom hints for this project
#
# Will suggest replacing "wibbleMany [myvar]" with "wibbleOne myvar"
# - error: {lhs: "wibbleMany [x]", rhs: wibbleOne x}


# Turn on hints that are off by default
#
# Ban "module X(module X) where", to require a real export list
# - warn: {name: Use explicit module export list}
#
# Replace a $ b $ c with a . b $ c
# - group: {name: dollar, enabled: true}
#
# Generalise map to fmap, ++ to <>
# - group: {name: generalise, enabled: true}


# Ignore some builtin hints
# - ignore: {name: Use let}
# - ignore: {name: Use const, within: SpecialModule} # Only within certain modules

# This warning should apply to Control.Exception.evaluate, but is mistakenly
# applied to Kore.Rewrite.SMT.Evaluator.evaluate.
- ignore: {name: "Redundant evaluate"}

# Corporate style
- ignore: {name: "Use tuple-section"}
- ignore: {name: "Use record patterns"}
- ignore: {name: "Use String"}
- ignore: {name: "Redundant id"}
- ignore: {name: "Use Just"}

# Ignore suggestions that may affect readability
- ignore: {name: "Eta reduce"}
- ignore: {name: "Avoid lambda using `infix`"}
- ignore: {name: "Use infix"}
- ignore: {name: "Use section"}
- ignore: {name: "Use <$>"}
- ignore: {name: "Use <&>"}
- ignore: {name: "Redundant flip"}
- ignore: {name: "Monad law, left identity"}
- ignore: {name: "Monoid law, left identity"}
- ignore: {name: "Replace case with maybe"}
- ignore: {name: "Hoist not"}
- ignore: {name: "Redundant bracket"}

# Ignore suggestions to reduce duplication, because:
#  - High rate of false positives
#  - Suggestions are often not applicable
#  - Difficult to ignore suggestion locally
#  - Only detects exact duplication of text, not anything interesting
- ignore: {name: "Reduce duplication"}

# The placement of lambdas affects inlining.
- ignore: {name: Redundant lambda}

# Testing class laws
- ignore: {name: Functor law, within: [Test.Data.Sup, Test.ListT]}
- ignore: {name: Use /=, within: [Test.Data.Sup]}
- ignore: {name: "Alternative law, left identity", within: [Test.ListT]}
- ignore: {name: "Alternative law, right identity", within: [Test.ListT]}
- ignore: {name: "Monad law, right identity", within: [Test.ListT]}
- ignore: {name: "Use >=>", within: [Test.ListT]}
- ignore: {name: "Redundant id", within: [Test.ListT]}

# LANGUAGE Strict
- ignore: {name: "Redundant irrefutable pattern"}

- ignore:
    name: Use camelCase
    within:
      - Test.Terse
      - Test.Kore.Rewrite.Axiom.Evaluate
      - Test.Kore.Rewrite.Axiom.Matcher
      - Test.Kore.Simplify.Overloading


# Unsuitable suggestions
- ignore:
    name: "Reduce duplication"
    within:
      - Kore.Builtin.Builtin
      - Kore.Builtin.List
      - Kore.Builtin.Symbols
      - Kore.Domain.Builtin
      - Kore.Exec
      - Kore.Internal.Conditional
      - Kore.Rewrite.Axiom.Matcher
      - Kore.Simplify.AndTerms
      - Kore.Parser.Parser
      - Main
- ignore:
    name: "Use fmap"
    within:
      - Kore.Rewrite.Step
      - SQL.SOP
- ignore: {name: "Avoid lambda", within: [Kore.Rewrite.Function.Memo]}
- ignore:
    name: "Redundant bracket"
    within:
      - Kore.Internal.TermLike.TermLike


# Haskell names match K names
- ignore:
    name: "Use camelCase"
    within:
      - Kore.Builtin.Map.Map
      - Kore.Builtin.MapSymbols
      - Kore.Debug

- ignore:
    name: "Use newtype instead of data"
    within:
      - GlobalMain
      - Kore.Log.InfoExecDepth

- ignore: {name: "Redundant compare", within: [Kore.Syntax.Id]}

- ignore:
    name: "Use void"
    within:
      - Test.Kore.Rewrite.Transition


# Define some custom infix operators
# - fixity: infixr 3 ~^#^~


# To generate a suitable file for HLint do:
# $ hlint --default > .hlint.yaml
