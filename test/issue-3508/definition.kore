[topCellInitializer{}(LblinitGeneratedTopCell{}()), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)")]

module BASIC-K
    sort SortK{} []
    sort SortKItem{} []
endmodule
[]
module KSEQ
    import BASIC-K []
    symbol kseq{}(SortKItem{}, SortK{}) : SortK{} [constructor{}(), functional{}(), injective{}()]
    symbol dotk{}() : SortK{} [constructor{}(), functional{}(), injective{}()]
    symbol append{}(SortK{}, SortK{}) : SortK{} [function{}(), functional{}()]
    axiom {R} \implies{R}(
        \and{R}(
            \top{R}(),
            \and{R}(
                \in{SortK{}, R}(X0:SortK{}, dotk{}()),
            \and{R}(
                \in{SortK{}, R}(X1:SortK{}, TAIL:SortK{}),
                \top{R}()
            ))
        ),
        \equals{SortK{}, R}(
            append{}(X0:SortK{}, X1:SortK{}),
            \and{SortK{}}(
                TAIL:SortK{},
                \top{SortK{}}()
            )
        )
    ) []
    axiom {R} \implies{R}(
        \and{R}(
            \top{R}(),
            \and{R}(
                \in{SortK{}, R}(X0:SortK{}, kseq{}(K:SortKItem{}, KS:SortK{})),
            \and{R}(
                \in{SortK{}, R}(X1:SortK{}, TAIL:SortK{}),
                \top{R}()
            ))
        ),
        \equals{SortK{}, R}(
            append{}(X0:SortK{}, X1:SortK{}),
            \and{SortK{}}(
                kseq{}(K:SortKItem{}, append{}(KS:SortK{}, TAIL:SortK{})),
                \top{SortK{}}()
            )
        )
    ) []
endmodule
[]
module INJ
    symbol inj{From, To}(From) : To [sortInjection{}()]
    axiom {S1, S2, S3, R} \equals{S3, R}(inj{S2, S3}(inj{S1, S2}(T:S1)), inj{S1, S3}(T:S1)) [simplification{}()]
endmodule
[]
module K
    import KSEQ []
    import INJ []
    alias weakExistsFinally{A}(A) : A where weakExistsFinally{A}(@X:A) := @X:A []
    alias weakAlwaysFinally{A}(A) : A where weakAlwaysFinally{A}(@X:A) := @X:A []
    alias allPathGlobally{A}(A) : A where allPathGlobally{A}(@X:A) := @X:A []
endmodule
[]

module IMP

// imports
  import K []

// sorts
  sort SortStoreCellOpt{} []
  sort SortIds{} []
  sort SortTCellFragment{} []
  sort SortIdCell{} []
  sort SortBottom{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(35,3,35,16)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)")]
  hooked-sort SortThreadCellMap{} [element{}(LblThreadCellMapItem{}()), cellCollection{}(), concat{}(Lbl'Unds'ThreadCellMap'Unds'{}()), unit{}(Lbl'Stop'ThreadCellMap{}()), hook{}("MAP.Map")]
  sort SortStoreCell{} []
  sort SortKCellOpt{} []
  sort SortPrintable{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(33,3,33,19)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)")]
  sort SortEnvCell{} []
  sort SortThreadsCell{} []
  sort SortThreadCell{} []
  sort SortIOInt{} []
  sort SortThreadsCellOpt{} []
  sort SortGeneratedTopCellFragment{} []
  sort SortIOFile{} []
  hooked-sort SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), element{}(LblListItem{}()), concat{}(Lbl'Unds'List'Unds'{}()), unit{}(Lbl'Stop'List{}()), hook{}("LIST.List"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(723,3,723,32)")]
  sort SortKCell{} []
  sort SortInputCell{} []
  sort SortEnvCellOpt{} []
  sort SortGeneratedTopCell{} []
  sort SortGeneratedCounterCell{} []
  sort SortOutputCellOpt{} []
  hooked-sort SortFloat{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1291,3,1291,35)"), hook{}("FLOAT.Float"), hasDomainValues{}()]
  sort SortStmts{} []
  sort SortOutputCell{} []
  sort SortTCellOpt{} []
  sort SortAExp{} []
  hooked-sort SortMap{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), element{}(Lbl'UndsPipe'-'-GT-Unds'{}()), concat{}(Lbl'Unds'Map'Unds'{}()), unit{}(Lbl'Stop'Map{}()), hook{}("MAP.Map"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(218,3,218,29)")]
  hooked-sort SortString{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1504,3,1504,38)"), hook{}("STRING.String"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), hasDomainValues{}()]
  sort SortIOString{} []
  sort SortId{} [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2135,3,2135,20)"), token{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), hasDomainValues{}()]
  sort SortBlock{} []
  sort SortGeneratedCounterCellOpt{} []
  sort SortPrintables{} []
  sort SortThreadsCellFragment{} []
  sort SortIdCellOpt{} []
  sort SortKConfigVar{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/kast.md)"), token{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(40,3,40,28)"), hasDomainValues{}()]
  sort SortBottoms{} []
  sort SortBExp{} []
  hooked-sort SortInt{} [hook{}("INT.Int"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(999,3,999,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), hasDomainValues{}()]
  sort SortIOError{} []
  sort SortInputCellOpt{} []
  hooked-sort SortSet{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), element{}(LblSetItem{}()), concat{}(Lbl'Unds'Set'Unds'{}()), unit{}(Lbl'Stop'Set{}()), hook{}("SET.Set"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(510,3,510,29)")]
  sort SortAExps{} []
  sort SortThreadCellFragment{} []
  sort SortKResult{} []
  sort SortStream{} []
  sort SortTCell{} []
  sort SortStmt{} []
  hooked-sort SortBool{} [hook{}("BOOL.Bool"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(878,3,878,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), hasDomainValues{}()]

// symbols
  symbol Lbl'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp{}(SortBExp{}) : SortBExp{} [functional{}(), constructor{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(Lbl'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp{}()), right{}(), terminals{}("10"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(14,20,14,55)"), left{}(), format{}("%c!%r %1"), injective{}()]
  symbol Lbl'Hash'E2BIG{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#E2BIG"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2317,22,2317,55)"), left{}(), format{}("%c#E2BIG%r"), injective{}()]
  symbol Lbl'Hash'EACCES{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EACCES"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2318,22,2318,57)"), left{}(), format{}("%c#EACCES%r"), injective{}()]
  symbol Lbl'Hash'EADDRINUSE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EADDRINUSE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2367,22,2367,65)"), left{}(), format{}("%c#EADDRINUSE%r"), injective{}()]
  symbol Lbl'Hash'EADDRNOTAVAIL{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EADDRNOTAVAIL"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2368,22,2368,71)"), left{}(), format{}("%c#EADDRNOTAVAIL%r"), injective{}()]
  symbol Lbl'Hash'EAFNOSUPPORT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EAFNOSUPPORT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2366,22,2366,69)"), left{}(), format{}("%c#EAFNOSUPPORT%r"), injective{}()]
  symbol Lbl'Hash'EAGAIN{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EAGAIN"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2319,22,2319,57)"), left{}(), format{}("%c#EAGAIN%r"), injective{}()]
  symbol Lbl'Hash'EALREADY{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EALREADY"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2356,22,2356,61)"), left{}(), format{}("%c#EALREADY%r"), injective{}()]
  symbol Lbl'Hash'EBADF{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EBADF"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2320,22,2320,55)"), left{}(), format{}("%c#EBADF%r"), injective{}()]
  symbol Lbl'Hash'EBUSY{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EBUSY"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2321,22,2321,55)"), left{}(), format{}("%c#EBUSY%r"), injective{}()]
  symbol Lbl'Hash'ECHILD{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ECHILD"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2322,22,2322,57)"), left{}(), format{}("%c#ECHILD%r"), injective{}()]
  symbol Lbl'Hash'ECONNABORTED{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ECONNABORTED"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2372,22,2372,69)"), left{}(), format{}("%c#ECONNABORTED%r"), injective{}()]
  symbol Lbl'Hash'ECONNREFUSED{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ECONNREFUSED"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2380,22,2380,69)"), left{}(), format{}("%c#ECONNREFUSED%r"), injective{}()]
  symbol Lbl'Hash'ECONNRESET{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ECONNRESET"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2373,22,2373,65)"), left{}(), format{}("%c#ECONNRESET%r"), injective{}()]
  symbol Lbl'Hash'EDEADLK{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EDEADLK"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2323,22,2323,59)"), left{}(), format{}("%c#EDEADLK%r"), injective{}()]
  symbol Lbl'Hash'EDESTADDRREQ{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EDESTADDRREQ"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2358,22,2358,69)"), left{}(), format{}("%c#EDESTADDRREQ%r"), injective{}()]
  symbol Lbl'Hash'EDOM{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EDOM"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2324,22,2324,53)"), left{}(), format{}("%c#EDOM%r"), injective{}()]
  symbol Lbl'Hash'EEXIST{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EEXIST"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2325,22,2325,57)"), left{}(), format{}("%c#EEXIST%r"), injective{}()]
  symbol Lbl'Hash'EFAULT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EFAULT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2326,22,2326,57)"), left{}(), format{}("%c#EFAULT%r"), injective{}()]
  symbol Lbl'Hash'EFBIG{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EFBIG"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2327,22,2327,55)"), left{}(), format{}("%c#EFBIG%r"), injective{}()]
  symbol Lbl'Hash'EHOSTDOWN{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EHOSTDOWN"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2381,22,2381,63)"), left{}(), format{}("%c#EHOSTDOWN%r"), injective{}()]
  symbol Lbl'Hash'EHOSTUNREACH{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EHOSTUNREACH"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2382,22,2382,69)"), left{}(), format{}("%c#EHOSTUNREACH%r"), injective{}()]
  symbol Lbl'Hash'EINPROGRESS{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EINPROGRESS"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2355,22,2355,67)"), left{}(), format{}("%c#EINPROGRESS%r"), injective{}()]
  symbol Lbl'Hash'EINTR{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EINTR"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2328,22,2328,55)"), left{}(), format{}("%c#EINTR%r"), injective{}()]
  symbol Lbl'Hash'EINVAL{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EINVAL"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2329,22,2329,57)"), left{}(), format{}("%c#EINVAL%r"), injective{}()]
  symbol Lbl'Hash'EIO{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EIO"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2330,22,2330,51)"), left{}(), format{}("%c#EIO%r"), injective{}()]
  symbol Lbl'Hash'EISCONN{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EISCONN"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2375,22,2375,59)"), left{}(), format{}("%c#EISCONN%r"), injective{}()]
  symbol Lbl'Hash'EISDIR{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EISDIR"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2331,22,2331,57)"), left{}(), format{}("%c#EISDIR%r"), injective{}()]
  symbol Lbl'Hash'ELOOP{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ELOOP"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2383,22,2383,55)"), left{}(), format{}("%c#ELOOP%r"), injective{}()]
  symbol Lbl'Hash'EMFILE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EMFILE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2332,22,2332,57)"), left{}(), format{}("%c#EMFILE%r"), injective{}()]
  symbol Lbl'Hash'EMLINK{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EMLINK"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2333,22,2333,57)"), left{}(), format{}("%c#EMLINK%r"), injective{}()]
  symbol Lbl'Hash'EMSGSIZE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EMSGSIZE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2359,22,2359,61)"), left{}(), format{}("%c#EMSGSIZE%r"), injective{}()]
  symbol Lbl'Hash'ENAMETOOLONG{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENAMETOOLONG"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2334,22,2334,69)"), left{}(), format{}("%c#ENAMETOOLONG%r"), injective{}()]
  symbol Lbl'Hash'ENETDOWN{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENETDOWN"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2369,22,2369,61)"), left{}(), format{}("%c#ENETDOWN%r"), injective{}()]
  symbol Lbl'Hash'ENETRESET{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENETRESET"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2371,22,2371,63)"), left{}(), format{}("%c#ENETRESET%r"), injective{}()]
  symbol Lbl'Hash'ENETUNREACH{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENETUNREACH"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2370,22,2370,67)"), left{}(), format{}("%c#ENETUNREACH%r"), injective{}()]
  symbol Lbl'Hash'ENFILE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENFILE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2335,22,2335,57)"), left{}(), format{}("%c#ENFILE%r"), injective{}()]
  symbol Lbl'Hash'ENOBUFS{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOBUFS"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2374,22,2374,59)"), left{}(), format{}("%c#ENOBUFS%r"), injective{}()]
  symbol Lbl'Hash'ENODEV{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENODEV"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2336,22,2336,57)"), left{}(), format{}("%c#ENODEV%r"), injective{}()]
  symbol Lbl'Hash'ENOENT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOENT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2337,22,2337,57)"), left{}(), format{}("%c#ENOENT%r"), injective{}()]
  symbol Lbl'Hash'ENOEXEC{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOEXEC"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2338,22,2338,59)"), left{}(), format{}("%c#ENOEXEC%r"), injective{}()]
  symbol Lbl'Hash'ENOLCK{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOLCK"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2339,22,2339,57)"), left{}(), format{}("%c#ENOLCK%r"), injective{}()]
  symbol Lbl'Hash'ENOMEM{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOMEM"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2340,22,2340,57)"), left{}(), format{}("%c#ENOMEM%r"), injective{}()]
  symbol Lbl'Hash'ENOPROTOOPT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOPROTOOPT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2361,22,2361,67)"), left{}(), format{}("%c#ENOPROTOOPT%r"), injective{}()]
  symbol Lbl'Hash'ENOSPC{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOSPC"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2341,22,2341,57)"), left{}(), format{}("%c#ENOSPC%r"), injective{}()]
  symbol Lbl'Hash'ENOSYS{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOSYS"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2342,22,2342,57)"), left{}(), format{}("%c#ENOSYS%r"), injective{}()]
  symbol Lbl'Hash'ENOTCONN{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOTCONN"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2376,22,2376,61)"), left{}(), format{}("%c#ENOTCONN%r"), injective{}()]
  symbol Lbl'Hash'ENOTDIR{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOTDIR"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2343,22,2343,59)"), left{}(), format{}("%c#ENOTDIR%r"), injective{}()]
  symbol Lbl'Hash'ENOTEMPTY{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOTEMPTY"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2344,22,2344,63)"), left{}(), format{}("%c#ENOTEMPTY%r"), injective{}()]
  symbol Lbl'Hash'ENOTSOCK{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOTSOCK"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2357,22,2357,61)"), left{}(), format{}("%c#ENOTSOCK%r"), injective{}()]
  symbol Lbl'Hash'ENOTTY{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENOTTY"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2345,22,2345,57)"), left{}(), format{}("%c#ENOTTY%r"), injective{}()]
  symbol Lbl'Hash'ENXIO{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ENXIO"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2346,22,2346,55)"), left{}(), format{}("%c#ENXIO%r"), injective{}()]
  symbol Lbl'Hash'EOF{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EOF"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2316,22,2316,51)"), left{}(), format{}("%c#EOF%r"), injective{}()]
  symbol Lbl'Hash'EOPNOTSUPP{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EOPNOTSUPP"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2364,22,2364,65)"), left{}(), format{}("%c#EOPNOTSUPP%r"), injective{}()]
  symbol Lbl'Hash'EOVERFLOW{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EOVERFLOW"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2384,22,2384,63)"), left{}(), format{}("%c#EOVERFLOW%r"), injective{}()]
  symbol Lbl'Hash'EPERM{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EPERM"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2347,22,2347,55)"), left{}(), format{}("%c#EPERM%r"), injective{}()]
  symbol Lbl'Hash'EPFNOSUPPORT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EPFNOSUPPORT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2365,22,2365,69)"), left{}(), format{}("%c#EPFNOSUPPORT%r"), injective{}()]
  symbol Lbl'Hash'EPIPE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EPIPE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2348,22,2348,55)"), left{}(), format{}("%c#EPIPE%r"), injective{}()]
  symbol Lbl'Hash'EPROTONOSUPPORT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EPROTONOSUPPORT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2362,22,2362,75)"), left{}(), format{}("%c#EPROTONOSUPPORT%r"), injective{}()]
  symbol Lbl'Hash'EPROTOTYPE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EPROTOTYPE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2360,22,2360,65)"), left{}(), format{}("%c#EPROTOTYPE%r"), injective{}()]
  symbol Lbl'Hash'ERANGE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ERANGE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2349,22,2349,57)"), left{}(), format{}("%c#ERANGE%r"), injective{}()]
  symbol Lbl'Hash'EROFS{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EROFS"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2350,22,2350,55)"), left{}(), format{}("%c#EROFS%r"), injective{}()]
  symbol Lbl'Hash'ESHUTDOWN{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ESHUTDOWN"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2377,22,2377,63)"), left{}(), format{}("%c#ESHUTDOWN%r"), injective{}()]
  symbol Lbl'Hash'ESOCKTNOSUPPORT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ESOCKTNOSUPPORT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2363,22,2363,75)"), left{}(), format{}("%c#ESOCKTNOSUPPORT%r"), injective{}()]
  symbol Lbl'Hash'ESPIPE{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ESPIPE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2351,22,2351,57)"), left{}(), format{}("%c#ESPIPE%r"), injective{}()]
  symbol Lbl'Hash'ESRCH{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ESRCH"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2352,22,2352,55)"), left{}(), format{}("%c#ESRCH%r"), injective{}()]
  symbol Lbl'Hash'ETIMEDOUT{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ETIMEDOUT"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2379,22,2379,63)"), left{}(), format{}("%c#ETIMEDOUT%r"), injective{}()]
  symbol Lbl'Hash'ETOOMANYREFS{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#ETOOMANYREFS"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2378,22,2378,69)"), left{}(), format{}("%c#ETOOMANYREFS%r"), injective{}()]
  symbol Lbl'Hash'EWOULDBLOCK{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EWOULDBLOCK"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2354,22,2354,67)"), left{}(), format{}("%c#EWOULDBLOCK%r"), injective{}()]
  symbol Lbl'Hash'EXDEV{}() : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}("#EXDEV"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2353,22,2353,55)"), left{}(), format{}("%c#EXDEV%r"), injective{}()]
  hooked-symbol Lbl'Hash'accept'LParUndsRParUnds'K-IO'Unds'IOInt'Unds'Int{}(SortInt{}) : SortIOInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), hook{}("IO.accept"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2482,20,2482,81)"), left{}(), format{}("%c#accept%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'argv'LParRParUnds'K-REFLECTION'Unds'List{}() : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("111"), klabel{}("#argv"), hook{}("KREFLECTION.argv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2262,19,2262,61)"), left{}(), format{}("%c#argv%r %c(%r %c)%r"), function{}()]
  symbol Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(SortK{}) : SortStream{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("#buffer"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2586,21,2586,31)"), left{}(), format{}("%c#buffer%r %c(%r %1 %c)%r"), injective{}()]
  hooked-symbol Lbl'Hash'close'LParUndsRParUnds'K-IO'Unds'K'Unds'Int{}(SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), hook{}("IO.close"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2456,16,2456,75)"), left{}(), format{}("%c#close%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'configuration'Unds'K-REFLECTION'Unds'K{}() : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1"), impure{}(), hook{}("KREFLECTION.configuration"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2251,16,2251,84)"), left{}(), format{}("%c#configuration%r"), function{}()]
  symbol Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}() : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("111"), left{}(), format{}("%c#freezer!__IMP-SYNTAX_BExp_BExp0_%r %c(%r %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_&&__IMP-SYNTAX_BExp_BExp_BExp0_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_+__IMP-SYNTAX_AExp_AExp_AExp0_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_+__IMP-SYNTAX_AExp_AExp_AExp1_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_,__IMP-SYNTAX_AExps_AExp_AExps0_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_,__IMP-SYNTAX_AExps_AExp_AExps1_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_,__IMP-SYNTAX_Ids_Id_Ids0_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_,__IMP-SYNTAX_Ids_Id_Ids1_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_/__IMP-SYNTAX_AExp_AExp_AExp0_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_/__IMP-SYNTAX_AExp_AExp_AExp1_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}() : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("111"), left{}(), format{}("%c#freezer_;_IMP-SYNTAX_Stmt_AExp0_%r %c(%r %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_<=__IMP-SYNTAX_BExp_AExp_AExp0_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_<=__IMP-SYNTAX_BExp_AExp_AExp1_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%c#freezer_=__IMP-SYNTAX_AExp_Id_AExp1_%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(SortK{}, SortK{}) : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("110101"), left{}(), format{}("%c#freezerif(_)_else__IMP-SYNTAX_Stmt_BExp_Block_Block0_%r %c(%r %1 %c,%r %2 %c)%r"), injective{}()]
  symbol Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}() : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("111"), left{}(), format{}("%c#freezerjoin_;_IMP-SYNTAX_Stmt_AExp0_%r %c(%r %c)%r"), injective{}()]
  symbol Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}() : SortKItem{} [functional{}(), constructor{}(), priorities{}(), right{}(), terminals{}("111"), left{}(), format{}("%c#freezerprint(_);_IMP-SYNTAX_Stmt_AExps0_%r %c(%r %c)%r"), injective{}()]
  hooked-symbol Lbl'Hash'fresh'LParUndsRParUnds'K-REFLECTION'Unds'KItem'Unds'String{}(SortString{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), klabel{}("#fresh"), hook{}("KREFLECTION.fresh"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2253,20,2253,80)"), left{}(), format{}("%c#fresh%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'getc'LParUndsRParUnds'K-IO'Unds'IOInt'Unds'Int{}(SortInt{}) : SortIOInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), hook{}("IO.getc"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2437,20,2437,89)"), left{}(), format{}("%c#getc%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'getenv'LParUndsRParUnds'K-REFLECTION'Unds'K'Unds'String{}(SortString{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), klabel{}("#getenv"), hook{}("KREFLECTION.getenv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2256,16,2256,76)"), left{}(), format{}("%c#getenv%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL-SYNTAX'Unds'Sort'Unds'Bool'Unds'Sort'Unds'Sort{SortSort}(SortBool{}, SortSort, SortSort) : SortSort [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), smt-hook{}("ite"), right{}(), terminals{}("1010101"), hook{}("KEQUAL.ite"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2186,26,2186,121)"), left{}(), format{}("%c#if%r %1 %c#then%r %2 %c#else%r %3 %c#fi%r"), function{}()]
  symbol Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(SortInt{}) : SortStream{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("#istream"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2587,21,2587,34)"), left{}(), format{}("%c#istream%r %c(%r %1 %c)%r"), injective{}()]
  hooked-symbol Lbl'Hash'kompiledDirectory'LParRParUnds'K-REFLECTION'Unds'String{}() : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("111"), klabel{}("#kompiledDirectory"), hook{}("KREFLECTION.kompiledDir"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2258,21,2258,83)"), left{}(), format{}("%c#kompiledDirectory%r %c(%r %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'lock'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), impure{}(), hook{}("IO.lock"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2468,16,2468,91)"), left{}(), format{}("%c#lock%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'log{}(SortString{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), returnsUnit{}(), symbol'Kywd'{}(), priorities{}(), funtional{}(), right{}(), terminals{}("1101"), impure{}(), klabel{}("#log"), hook{}("IO.logString"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2562,16,2562,106)"), left{}(), format{}("%c#log%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'logToFile{}(SortString{}, SortString{}) : SortK{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), returnsUnit{}(), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("110101"), impure{}(), klabel{}("#logToFile"), hook{}("IO.log"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2553,16,2553,116)"), left{}(), format{}("%c#logToFile%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'mkstemp'LParUndsRParUnds'K-IO'Unds'IOFile'Unds'String{}(SortString{}) : SortIOFile{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), klabel{}("#mkstemp"), hook{}("IO.mkstemp"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2530,21,2530,84)"), left{}(), format{}("%c#mkstemp%r %c(%r %1 %c)%r"), function{}()]
  symbol Lbl'Hash'noParse{}(SortString{}) : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1101"), klabel{}("#noParse"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2267,22,2267,74)"), left{}(), format{}("%c#noParse%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'open'LParUndsRParUnds'K-IO'Unds'IOInt'Unds'String{}(SortString{}) : SortIOInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2407,20,2407,59)"), left{}(), format{}("%c#open%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'open'LParUndsCommUndsRParUnds'K-IO'Unds'IOInt'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortIOInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), impure{}(), hook{}("IO.open"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2408,18,2408,97)"), left{}(), format{}("%c#open%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  symbol Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(SortInt{}) : SortStream{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("#ostream"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2589,21,2589,34)"), left{}(), format{}("%c#ostream%r %c(%r %1 %c)%r"), injective{}()]
  symbol Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortStream{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), klabel{}("#parseInput"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2588,21,2588,48)"), left{}(), format{}("%c#parseInput%r %c(%r %1 %c,%r %2 %c)%r"), injective{}()]
  symbol Lbl'Hash'parseKORE'LParUndsRParUnds'K-REFLECTION'Unds'Sort'Unds'String{SortSort}(SortString{}) : SortSort [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("#parseKORE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2265,26,2265,84)"), left{}(), format{}("%c#parseKORE%r %c(%r %1 %c)%r"), function{}(), no-evaluators{}()]
  hooked-symbol Lbl'Hash'putc'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), impure{}(), hook{}("IO.putc"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2447,16,2447,93)"), left{}(), format{}("%c#putc%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'read'LParUndsCommUndsRParUnds'K-IO'Unds'IOString'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortIOString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), impure{}(), hook{}("IO.read"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2438,23,2438,99)"), left{}(), format{}("%c#read%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'remove'LParUndsRParUnds'K-IO'Unds'K'Unds'String{}(SortString{}) : SortK{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("1101"), impure{}(), klabel{}("#remove"), hook{}("IO.remove"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2541,16,2541,80)"), left{}(), format{}("%c#remove%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'seek'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), impure{}(), hook{}("IO.seek"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2423,16,2423,88)"), left{}(), format{}("%c#seek%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'seekEnd'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), impure{}(), hook{}("IO.seekEnd"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2424,16,2424,96)"), left{}(), format{}("%c#seekEnd%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'shutdownWrite'LParUndsRParUnds'K-IO'Unds'K'Unds'Int{}(SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), hook{}("IO.shutdownWrite"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2483,16,2483,91)"), left{}(), format{}("%c#shutdownWrite%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'sort'LParUndsRParUnds'K-REFLECTION'Unds'String'Unds'K{}(SortK{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("#sort"), hook{}("KREFLECTION.sort"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2252,21,2252,64)"), left{}(), format{}("%c#sort%r %c(%r %1 %c)%r"), function{}()]
  symbol Lbl'Hash'stderr'Unds'K-IO'Unds'Int{}() : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("1"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2503,19,2503,46)"), left{}(), format{}("%c#stderr%r"), function{}()]
  symbol Lbl'Hash'stdin'Unds'K-IO'Unds'Int{}() : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("1"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2501,18,2501,46)"), left{}(), format{}("%c#stdin%r"), function{}()]
  symbol Lbl'Hash'stdout'Unds'K-IO'Unds'Int{}() : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("1"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2502,19,2502,46)"), left{}(), format{}("%c#stdout%r"), function{}()]
  hooked-symbol Lbl'Hash'system'LParUndsRParUnds'K-IO'Unds'KItem'Unds'String{}(SortString{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), klabel{}("#system"), hook{}("IO.system"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2519,20,2519,74)"), left{}(), format{}("%c#system%r %c(%r %1 %c)%r"), function{}()]
  symbol Lbl'Hash'systemResult{}(SortInt{}, SortString{}, SortString{}) : SortKItem{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("#systemResult"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2520,20,2520,143)"), left{}(), format{}("%c#systemResult%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), injective{}()]
  hooked-symbol Lbl'Hash'tell'LParUndsRParUnds'K-IO'Unds'IOInt'Unds'Int{}(SortInt{}) : SortIOInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), hook{}("IO.tell"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2422,20,2422,77)"), left{}(), format{}("%c#tell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lbl'Hash'tempFile{}(SortString{}, SortInt{}) : SortIOFile{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("110101"), klabel{}("#tempFile"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2532,21,2532,93)"), left{}(), format{}("%c#tempFile%r %c(%r %1 %c,%r %2 %c)%r"), injective{}()]
  hooked-symbol Lbl'Hash'time'LParRParUnds'K-IO'Unds'Int{}() : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("111"), impure{}(), hook{}("IO.time"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2492,18,2492,67)"), left{}(), format{}("%c#time%r %c(%r %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'trace{}(SortKItem{}) : SortK{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), returnsUnit{}(), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1101"), impure{}(), klabel{}("#trace"), hook{}("IO.traceTerm"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2573,16,2573,103)"), left{}(), format{}("%c#trace%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'traceK{}(SortK{}) : SortK{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), returnsUnit{}(), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1101"), impure{}(), klabel{}("#traceK"), hook{}("IO.traceTerm"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2574,16,2574,103)"), left{}(), format{}("%c#traceK%r %c(%r %1 %c)%r"), function{}()]
  symbol Lbl'Hash'unknownIOError{}(SortInt{}) : SortIOError{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1101"), klabel{}("#unknownIOError"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2316,54,2316,90)"), left{}(), format{}("%c#unknownIOError%r %c(%r %1 %c)%r"), injective{}()]
  hooked-symbol Lbl'Hash'unlock'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), impure{}(), hook{}("IO.unlock"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2469,16,2469,95)"), left{}(), format{}("%c#unlock%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'unparseKORE'LParUndsRParUnds'K-REFLECTION'Unds'String'Unds'Sort{SortSort}(SortSort) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("#unparseKORE"), hook{}("KREFLECTION.printKORE"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2266,28,2266,86)"), left{}(), format{}("%c#unparseKORE%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'Hash'write'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'String{}(SortInt{}, SortString{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), impure{}(), hook{}("IO.write"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2448,16,2448,93)"), left{}(), format{}("%c#write%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  symbol Lbl'PlusPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id{}(SortId{}) : SortAExp{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(),Lblspawn'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Block{}(),Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(),Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}()), right{}(), terminals{}("10"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(4,20,4,27)"), left{}(), format{}("%c++%r %1"), injective{}()]
  symbol Lbl-'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Int{}(SortInt{}) : SortAExp{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(),Lblspawn'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Block{}(),Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(),Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}()), right{}(), terminals{}("10"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(6,20,6,27)"), left{}(), format{}("%c-%r %1"), injective{}()]
  hooked-symbol Lbl'Stop'List{}() : SortList{} [latex{}("\\dotCt{List}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(), right{}(), smtlib{}("smt_seq_nil"), terminals{}("1"), klabel{}(".List"), hook{}("LIST.unit"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(747,19,747,142)"), left{}(), format{}("%c.List%r"), function{}()]
  symbol Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps'QuotRBraUnds'AExps{}() : SortAExps{} [functional{}(), userList{}("*"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), anywhere{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}(".List{\"exps\"}"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(31,20,31,69)"), left{}(), format{}("%c.AExps%r"), injective{}()]
  symbol Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Bottoms'Unds'Bottom'Unds'Bottoms'QuotRBraUnds'Bottoms{}() : SortBottoms{} [functional{}(), constructor{}(), userList{}("*"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(), right{}(), terminals{}("1"), klabel{}(".List{\"exps\"}"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(36,22,36,61)"), left{}(), format{}("%c.Bottoms%r"), injective{}()]
  symbol Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids'QuotRBraUnds'Ids{}() : SortIds{} [functional{}(), userList{}("*"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), anywhere{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}(".List{\"exps\"}"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(30,20,30,69)"), left{}(), format{}("%c.Ids%r"), injective{}()]
  symbol Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Printables'Unds'Printable'Unds'Printables'QuotRBraUnds'Printables{}() : SortPrintables{} [functional{}(), userList{}("*"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), anywhere{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}(".List{\"exps\"}"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(34,25,34,61)"), left{}(), format{}("%c.Printables%r"), injective{}()]
  symbol Lbl'Stop'List'LBraQuotUndsUndsUnds'IMP-SYNTAX'Unds'Stmts'Unds'Stmt'Unds'Stmts'QuotRBraUnds'Stmts{}() : SortStmts{} [functional{}(), constructor{}(), userList{}("*"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(), right{}(), terminals{}("1"), klabel{}(".List{\"___IMP-SYNTAX\"}"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,20,38,33)"), left{}(), format{}("%c.Stmts%r"), injective{}()]
  hooked-symbol Lbl'Stop'Map{}() : SortMap{} [latex{}("\\dotCt{Map}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}(".Map"), hook{}("MAP.unit"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(248,18,248,124)"), left{}(), format{}("%c.Map%r"), function{}()]
  hooked-symbol Lbl'Stop'Set{}() : SortSet{} [latex{}("\\dotCt{Set}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1"), klabel{}(".Set"), hook{}("SET.unit"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(539,18,539,118)"), left{}(), format{}("%c.Set%r"), function{}()]
  hooked-symbol Lbl'Stop'ThreadCellMap{}() : SortThreadCellMap{} [priorities{}(), right{}(), terminals{}("1"), hook{}("MAP.unit"), left{}(), format{}("%c.ThreadCellMap%r"), function{}()]
  symbol Lbl'-LT-'T'-GT-'{}(SortThreadsCell{}, SortStoreCell{}, SortInputCell{}, SortOutputCell{}) : SortTCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), color{}("yellow"), cellName{}("T"), priorities{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), right{}(), terminals{}("100001"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(47,17,58,21)"), left{}(), format{}("%c<T>%r%i%n%1%n%2%n%3%n%4%d%n%c</T>%r"), colors{}("yellow,yellow"), injective{}(), cell{}(), topcell{}()]
  symbol Lbl'-LT-'T'-GT-'-fragment{}(SortThreadsCellOpt{}, SortStoreCellOpt{}, SortInputCellOpt{}, SortOutputCellOpt{}) : SortTCellFragment{} [functional{}(), constructor{}(), cellFragment{}("TCell"), priorities{}(), right{}(), terminals{}("100001"), left{}(), format{}("%c<T>-fragment%r %1 %2 %3 %4 %c</T>-fragment%r"), injective{}()]
  symbol Lbl'-LT-'env'-GT-'{}(SortMap{}) : SortEnvCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), color{}("LightSkyBlue"), cellName{}("env"), priorities{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), right{}(), terminals{}("101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(47,17,58,21)"), left{}(), format{}("%c<env>%r%i%n%1%d%n%c</env>%r"), colors{}("LightSkyBlue,LightSkyBlue"), injective{}(), cell{}()]
  symbol Lbl'-LT-'generatedCounter'-GT-'{}(SortInt{}) : SortGeneratedCounterCell{} [functional{}(), constructor{}(), cellName{}("generatedCounter"), priorities{}(), right{}(), terminals{}("101"), left{}(), format{}("%c<generatedCounter>%r%i%n%1%d%n%c</generatedCounter>%r"), injective{}(), cell{}()]
  symbol Lbl'-LT-'generatedTop'-GT-'{}(SortTCell{}, SortGeneratedCounterCell{}) : SortGeneratedTopCell{} [functional{}(), constructor{}(), cellName{}("generatedTop"), priorities{}(), right{}(), terminals{}("1001"), left{}(), format{}("%1"), injective{}(), cell{}(), topcell{}()]
  symbol Lbl'-LT-'generatedTop'-GT-'-fragment{}(SortTCellOpt{}, SortGeneratedCounterCellOpt{}) : SortGeneratedTopCellFragment{} [functional{}(), constructor{}(), cellFragment{}("GeneratedTopCell"), priorities{}(), right{}(), terminals{}("1001"), left{}(), format{}("%c<generatedTop>-fragment%r %1 %2 %c</generatedTop>-fragment%r"), injective{}()]
  symbol Lbl'-LT-'id'-GT-'{}(SortInt{}) : SortIdCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), color{}("black"), cellName{}("id"), priorities{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), right{}(), terminals{}("101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(47,17,58,21)"), left{}(), format{}("%c<id>%r%i%n%1%d%n%c</id>%r"), colors{}("black,black"), injective{}(), cell{}()]
  symbol Lbl'-LT-'input'-GT-'{}(SortList{}) : SortInputCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), color{}("magenta"), cellName{}("input"), priorities{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), right{}(), terminals{}("101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(47,17,58,21)"), left{}(), stream{}("stdin"), format{}("%c<input>%r%i%n%1%d%n%c</input>%r"), colors{}("magenta,magenta"), injective{}(), cell{}()]
  symbol Lbl'-LT-'k'-GT-'{}(SortK{}) : SortKCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), color{}("green"), cellName{}("k"), maincell{}(), priorities{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), right{}(), terminals{}("101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(47,17,58,21)"), left{}(), format{}("%c<k>%r%i%n%1%d%n%c</k>%r"), colors{}("green,green"), injective{}(), cell{}()]
  symbol Lbl'-LT-'output'-GT-'{}(SortList{}) : SortOutputCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), color{}("Orchid"), cellName{}("output"), priorities{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), right{}(), terminals{}("101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(47,17,58,21)"), left{}(), stream{}("stdout"), format{}("%c<output>%r%i%n%1%d%n%c</output>%r"), colors{}("Orchid,Orchid"), injective{}(), cell{}()]
  symbol Lbl'-LT-'store'-GT-'{}(SortMap{}) : SortStoreCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), color{}("red"), cellName{}("store"), priorities{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), right{}(), terminals{}("101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(47,17,58,21)"), left{}(), format{}("%c<store>%r%i%n%1%d%n%c</store>%r"), colors{}("red,red"), injective{}(), cell{}()]
  symbol Lbl'-LT-'thread'-GT-'{}(SortIdCell{}, SortKCell{}, SortEnvCell{}) : SortThreadCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), color{}("blue"), cellName{}("thread"), priorities{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), right{}(), terminals{}("10001"), type{}("Map"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(47,17,58,21)"), left{}(), format{}("%c<thread>%r%i%n%1%n%2%n%3%d%n%c</thread>%r"), colors{}("blue,blue"), multiplicity{}("*"), injective{}(), cell{}()]
  symbol Lbl'-LT-'thread'-GT-'-fragment{}(SortIdCellOpt{}, SortKCellOpt{}, SortEnvCellOpt{}) : SortThreadCellFragment{} [functional{}(), constructor{}(), cellFragment{}("ThreadCell"), priorities{}(), right{}(), terminals{}("10001"), left{}(), format{}("%c<thread>-fragment%r %1 %2 %3 %c</thread>-fragment%r"), injective{}()]
  symbol Lbl'-LT-'threads'-GT-'{}(SortThreadCellMap{}) : SortThreadsCell{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), color{}("orange"), cellName{}("threads"), priorities{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), right{}(), terminals{}("101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(47,17,58,21)"), left{}(), format{}("%c<threads>%r%i%n%1%d%n%c</threads>%r"), colors{}("orange,orange"), injective{}(), cell{}()]
  symbol Lbl'-LT-'threads'-GT-'-fragment{}(SortThreadCellMap{}) : SortThreadsCellFragment{} [functional{}(), constructor{}(), cellFragment{}("ThreadsCell"), priorities{}(), right{}(), terminals{}("101"), left{}(), format{}("%c<threads>-fragment%r %1 %c</threads>-fragment%r"), injective{}()]
  hooked-symbol LblBase2String'LParUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), klabel{}("Base2String"), hook{}("STRING.base2string"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1633,21,1633,99)"), left{}(), format{}("%cBase2String%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  symbol LblBool2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Bool{}(SortBool{}) : SortString{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("1101"), klabel{}("Bool2String"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1583,21,1583,56)"), left{}(), format{}("%cBool2String%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblFloat2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Float{}(SortFloat{}) : SortString{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("1101"), klabel{}("Float2String"), hook{}("STRING.float2string"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1610,21,1610,101)"), left{}(), format{}("%cFloat2String%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblFloat2String'LParUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'Float'Unds'String{}(SortFloat{}, SortString{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), klabel{}("FloatFormat"), hook{}("STRING.floatFormat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1611,21,1611,122)"), left{}(), format{}("%cFloat2String%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol LblId2String'LParUndsRParUnds'ID-COMMON'Unds'String'Unds'Id{}(SortId{}) : SortString{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("1101"), klabel{}("Id2String"), hook{}("STRING.token2string"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2142,21,2142,85)"), left{}(), format{}("%cId2String%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblInt2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Int{}(SortInt{}) : SortString{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("1101"), klabel{}("Int2String"), hook{}("STRING.int2string"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1632,21,1632,99)"), left{}(), format{}("%cInt2String%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblList'Coln'get{}(SortList{}, SortInt{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("0101"), klabel{}("List:get"), hook{}("LIST.get"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(766,20,766,99)"), left{}(), format{}("%1 %c[%r %2 %c]%r"), function{}()]
  hooked-symbol LblList'Coln'range{}(SortList{}, SortInt{}, SortInt{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("List:range"), hook{}("LIST.range"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(813,19,813,120)"), left{}(), format{}("%crange%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  hooked-symbol LblListItem{}(SortKItem{}) : SortList{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(), right{}(), smtlib{}("smt_seq_elem"), terminals{}("1101"), klabel{}("ListItem"), hook{}("LIST.element"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(755,19,755,132)"), left{}(), format{}("%cListItem%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblMap'Coln'lookup{}(SortMap{}, SortKItem{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("0101"), klabel{}("Map:lookup"), hook{}("MAP.lookup"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(271,20,271,113)"), left{}(), format{}("%1 %c[%r %2 %c]%r"), function{}()]
  hooked-symbol LblMap'Coln'update{}(SortMap{}, SortKItem{}, SortKItem{}) : SortMap{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(), prefer{}(), right{}(), terminals{}("010101"), klabel{}("Map:update"), hook{}("MAP.update"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(290,18,290,140)"), left{}(), format{}("%1 %c[%r %2 %c<-%r %3 %c]%r"), function{}()]
  hooked-symbol LblSet'Coln'difference{}(SortSet{}, SortSet{}) : SortSet{} [latex{}("{#1}-_{\\it Set}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("010"), klabel{}("Set:difference"), hook{}("SET.difference"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(579,18,579,142)"), left{}(), format{}("%1 %c-Set%r %2"), function{}()]
  hooked-symbol LblSet'Coln'in{}(SortKItem{}, SortSet{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("010"), klabel{}("Set:in"), hook{}("SET.in"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(587,19,587,102)"), left{}(), format{}("%1 %cin%r %2"), function{}()]
  hooked-symbol LblSetItem{}(SortKItem{}) : SortSet{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("1101"), klabel{}("SetItem"), hook{}("SET.element"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(547,18,547,119)"), left{}(), format{}("%cSetItem%r %c(%r %1 %c)%r"), injective{}(), function{}()]
  hooked-symbol LblString2Base'LParUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'Int{}(SortString{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), klabel{}("String2Base"), hook{}("STRING.string2base"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1634,21,1634,99)"), left{}(), format{}("%cString2Base%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  symbol LblString2Bool'LParUndsRParUnds'STRING-COMMON'Unds'Bool'Unds'String{}(SortString{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("String2Bool"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1589,19,1589,49)"), left{}(), format{}("%cString2Bool%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblString2Float'LParUndsRParUnds'STRING-COMMON'Unds'Float'Unds'String{}(SortString{}) : SortFloat{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("String2Float"), hook{}("STRING.string2float"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1612,21,1612,94)"), left{}(), format{}("%cString2Float%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblString2Id'LParUndsRParUnds'ID-COMMON'Unds'Id'Unds'String{}(SortString{}) : SortId{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("1101"), klabel{}("String2Id"), hook{}("STRING.string2token"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2143,17,2143,80)"), left{}(), format{}("%cString2Id%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblString2Int'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(SortString{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("String2Int"), hook{}("STRING.string2int"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1631,21,1631,92)"), left{}(), format{}("%cString2Int%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblThreadCellMap'Coln'in'Unds'keys{}(SortIdCell{}, SortThreadCellMap{}) : SortBool{} [functional{}(), total{}(), priorities{}(), right{}(), terminals{}("01101"), hook{}("MAP.in_keys"), left{}(), format{}("%1 %cin_keys%r %c(%r %2 %c)%r"), function{}()]
  hooked-symbol LblThreadCellMapItem{}(SortIdCell{}, SortThreadCell{}) : SortThreadCellMap{} [priorities{}(), right{}(), terminals{}("110101"), hook{}("MAP.element"), left{}(), format{}("%2"), function{}()]
  symbol LblThreadCellMapKey{}(SortThreadCell{}) : SortIdCell{} [functional{}(), total{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cThreadCellMapKey%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbl'UndsPerc'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\%_{\\scriptstyle\\it Int}}{#2}"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}(),Lbl'Unds'-Int'Unds'{}()), smt-hook{}("mod"), right{}(), terminals{}("010"), klabel{}("_%Int_"), hook{}("INT.tmod"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1047,18,1047,171)"), left{}(Lbl'UndsStar'Int'Unds'{}(),Lbl'Unds'divInt'Unds'{}(),Lbl'UndsPerc'Int'Unds'{}(),Lbl'UndsSlsh'Int'Unds'{}(),Lbl'Unds'modInt'Unds'{}()), format{}("%1 %c%%Int%r %2"), function{}()]
  symbol Lbl'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp{}(SortBExp{}, SortBExp{}) : SortBExp{} [functional{}(), constructor{}(), strict{}("1"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(), right{}(), terminals{}("010"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(16,20,16,64)"), left{}(Lbl'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp{}()), format{}("%1 %c&&%r %2"), injective{}()]
  hooked-symbol Lbl'UndsAnd-'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\&_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), comm{}(), priorities{}(Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}()), right{}(), smtlib{}("andInt"), terminals{}("010"), klabel{}("_&Int_"), hook{}("INT.and"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1058,18,1058,184)"), left{}(Lbl'UndsAnd-'Int'Unds'{}()), format{}("%1 %c&Int%r %2"), function{}()]
  hooked-symbol Lbl'UndsStar'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\ast_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), comm{}(), priorities{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}(),Lbl'Unds'-Int'Unds'{}()), smt-hook{}("*"), right{}(), terminals{}("010"), klabel{}("_*Int_"), hook{}("INT.mul"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1043,18,1043,183)"), left{}(Lbl'Unds'modInt'Unds'{}(),Lbl'UndsPerc'Int'Unds'{}(),Lbl'UndsSlsh'Int'Unds'{}(),Lbl'Unds'divInt'Unds'{}(),Lbl'UndsStar'Int'Unds'{}()), format{}("%1 %c*Int%r %2"), function{}()]
  hooked-symbol Lbl'UndsPlus'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{+_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), comm{}(), priorities{}(Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}()), smt-hook{}("+"), right{}(), terminals{}("010"), klabel{}("_+Int_"), hook{}("INT.add"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1052,18,1052,180)"), left{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds'-Int'Unds'{}()), format{}("%1 %c+Int%r %2"), function{}()]
  hooked-symbol Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortString{} [latex{}("{#1}+_{\\scriptstyle\\it String}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("010"), hook{}("STRING.concat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1522,21,1522,135)"), left{}(Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}()), format{}("%1 %c+String%r %2"), function{}()]
  symbol Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(SortAExp{}, SortAExp{}) : SortAExp{} [functional{}(), constructor{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(Lblspawn'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Block{}(),Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}()), right{}(), terminals{}("010"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(9,20,9,61)"), left{}(Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}()), format{}("%1 %c+%r %2"), injective{}()]
  symbol Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(SortAExp{}, SortAExps{}) : SortAExps{} [functional{}(), userList{}("*"), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), anywhere{}(), priorities{}(), right{}(), terminals{}("010"), klabel{}("exps"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(31,20,31,69)"), left{}(), format{}("%1 %c,%r %2"), injective{}()]
  symbol Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Bottoms'Unds'Bottom'Unds'Bottoms{}(SortBottom{}, SortBottoms{}) : SortBottoms{} [functional{}(), constructor{}(), userList{}("*"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(), right{}(), terminals{}("010"), klabel{}("exps"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(36,22,36,61)"), left{}(), format{}("%1 %c,%r %2"), injective{}()]
  symbol Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(SortId{}, SortIds{}) : SortIds{} [functional{}(), constructor{}(), userList{}("*"), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(), right{}(), terminals{}("010"), klabel{}("exps"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(30,20,30,69)"), left{}(), format{}("%1 %c,%r %2"), injective{}()]
  symbol Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Printables'Unds'Printable'Unds'Printables{}(SortPrintable{}, SortPrintables{}) : SortPrintables{} [functional{}(), constructor{}(), userList{}("*"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(), right{}(), terminals{}("010"), klabel{}("exps"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(34,25,34,61)"), left{}(), format{}("%1 %c,%r %2"), injective{}()]
  hooked-symbol Lbl'Unds'-Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{-_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}()), smt-hook{}("-"), right{}(), terminals{}("010"), klabel{}("_-Int_"), hook{}("INT.sub"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1053,18,1053,174)"), left{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds'-Int'Unds'{}()), format{}("%1 %c-Int%r %2"), function{}()]
  hooked-symbol Lbl'Unds'-Map'UndsUnds'MAP'Unds'Map'Unds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortMap{} [latex{}("{#1}-_{\\it Map}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("010"), hook{}("MAP.difference"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(311,18,311,116)"), left{}(), format{}("%1 %c-Map%r %2"), function{}()]
  hooked-symbol Lbl'UndsSlsh'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\div_{\\scriptstyle\\it Int}}{#2}"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}(),Lbl'Unds'-Int'Unds'{}()), smt-hook{}("div"), right{}(), terminals{}("010"), klabel{}("_/Int_"), hook{}("INT.tdiv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1046,18,1046,173)"), left{}(Lbl'UndsSlsh'Int'Unds'{}(),Lbl'Unds'modInt'Unds'{}(),Lbl'Unds'divInt'Unds'{}(),Lbl'UndsPerc'Int'Unds'{}(),Lbl'UndsStar'Int'Unds'{}()), format{}("%1 %c/Int%r %2"), function{}()]
  symbol Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(SortAExp{}, SortAExp{}) : SortAExp{} [functional{}(), constructor{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(Lblspawn'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Block{}(),Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(),Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}()), right{}(), terminals{}("010"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(8,20,8,61)"), left{}(Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}()), format{}("%1 %c/%r %2"), injective{}()]
  symbol Lbl'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(SortAExp{}) : SortStmt{} [functional{}(), constructor{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}()), right{}(), terminals{}("01"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(19,20,19,55)"), left{}(), format{}("%1 %c;%r"), injective{}()]
  hooked-symbol Lbl'Unds-LT--LT-'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\ll_{\\scriptstyle\\it Int}}{#2}"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}()), right{}(), smtlib{}("shlInt"), terminals{}("010"), klabel{}("_<<Int_"), hook{}("INT.shl"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1056,18,1056,173)"), left{}(Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}()), format{}("%1 %c<<Int%r %2"), function{}()]
  hooked-symbol Lbl'Unds-LT-Eqls'Int'Unds'{}(SortInt{}, SortInt{}) : SortBool{} [latex{}("{#1}\\mathrel{\\leq_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(), smt-hook{}("<="), right{}(), terminals{}("010"), klabel{}("_<=Int_"), hook{}("INT.le"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1114,19,1114,172)"), left{}(Lbl'Unds-LT-Eqls'Int'Unds'{}()), format{}("%1 %c<=Int%r %2"), function{}()]
  hooked-symbol Lbl'Unds-LT-Eqls'Map'UndsUnds'MAP'Unds'Bool'Unds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("010"), hook{}("MAP.inclusion"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(383,19,383,87)"), left{}(), format{}("%1 %c<=Map%r %2"), function{}()]
  hooked-symbol Lbl'Unds-LT-Eqls'Set'UndsUnds'SET'Unds'Bool'Unds'Set'Unds'Set{}(SortSet{}, SortSet{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("010"), hook{}("SET.inclusion"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(596,19,596,81)"), left{}(), format{}("%1 %c<=Set%r %2"), function{}()]
  hooked-symbol Lbl'Unds-LT-Eqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("010"), hook{}("STRING.le"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1667,19,1667,78)"), left{}(), format{}("%1 %c<=String%r %2"), function{}()]
  symbol Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(SortAExp{}, SortAExp{}) : SortBExp{} [latex{}("{#1}\\leq{#2}"), functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(Lbl'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp{}()), right{}(), terminals{}("010"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(13,20,13,79)"), left{}(), format{}("%1 %c<=%r %2"), injective{}(), seqstrict{}()]
  hooked-symbol Lbl'Unds-LT-'Int'Unds'{}(SortInt{}, SortInt{}) : SortBool{} [latex{}("{#1}\\mathrel{<_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(), smt-hook{}("<"), right{}(), terminals{}("010"), klabel{}("_<Int_"), hook{}("INT.lt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1115,19,1115,167)"), left{}(Lbl'Unds-LT-'Int'Unds'{}()), format{}("%1 %c<Int%r %2"), function{}()]
  hooked-symbol Lbl'Unds-LT-'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("010"), hook{}("STRING.lt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1666,19,1666,78)"), left{}(), format{}("%1 %c<String%r %2"), function{}()]
  hooked-symbol Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(), smt-hook{}("distinct"), right{}(), terminals{}("010"), klabel{}("_=/=Bool_"), hook{}("BOOL.ne"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(919,19,919,128)"), left{}(Lbl'UndsEqlsEqls'Bool'Unds'{}(),Lbl'UndsEqlsSlshEqls'Bool'Unds'{}()), format{}("%1 %c=/=Bool%r %2"), function{}()]
  hooked-symbol Lbl'UndsEqlsSlshEqls'Int'Unds'{}(SortInt{}, SortInt{}) : SortBool{} [latex{}("{#1}\\mathrel{{=}{/}{=}_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(), smt-hook{}("distinct"), right{}(), terminals{}("010"), klabel{}("_=/=Int_"), hook{}("INT.ne"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1119,19,1119,184)"), left{}(Lbl'UndsEqlsSlshEqls'Int'Unds'{}()), format{}("%1 %c=/=Int%r %2"), function{}()]
  hooked-symbol Lbl'UndsEqlsSlshEqls'K'Unds'{}(SortK{}, SortK{}) : SortBool{} [latex{}("{#1}\\mathrel{\\neq_K}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), notEqualEqualK{}(), priorities{}(Lbl'Unds'orElseBool'Unds'{}(),Lbl'Unds'orBool'Unds'{}(),Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(),Lbl'Unds'andThenBool'Unds'{}(),Lbl'Unds'impliesBool'Unds'{}(),Lbl'UndsEqlsEqls'Bool'Unds'{}(),Lbl'Unds'andBool'Unds'{}(),LblnotBool'Unds'{}(),Lbl'Unds'xorBool'Unds'{}()), smt-hook{}("distinct"), right{}(), terminals{}("010"), klabel{}("_=/=K_"), hook{}("KEQUAL.ne"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2182,19,2182,166)"), left{}(Lbl'UndsEqlsEqls'K'Unds'{}(),Lbl'UndsEqlsSlshEqls'K'Unds'{}()), format{}("%1 %c=/=K%r %2"), function{}()]
  hooked-symbol Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("010"), hook{}("STRING.ne"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1663,19,1663,90)"), left{}(Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}()), format{}("%1 %c=/=String%r %2"), function{}()]
  hooked-symbol Lbl'UndsEqlsEqls'Bool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(), smt-hook{}("="), right{}(), terminals{}("010"), klabel{}("_==Bool_"), hook{}("BOOL.eq"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(918,19,918,120)"), left{}(Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(),Lbl'UndsEqlsEqls'Bool'Unds'{}()), format{}("%1 %c==Bool%r %2"), function{}()]
  hooked-symbol Lbl'UndsEqlsEqls'Int'Unds'{}(SortInt{}, SortInt{}) : SortBool{} [latex{}("{#1}\\mathrel{{=}{=}_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(), smt-hook{}("="), right{}(), terminals{}("010"), klabel{}("_==Int_"), hook{}("INT.eq"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1118,19,1118,173)"), left{}(Lbl'UndsEqlsEqls'Int'Unds'{}()), format{}("%1 %c==Int%r %2"), function{}()]
  hooked-symbol Lbl'UndsEqlsEqls'K'Unds'{}(SortK{}, SortK{}) : SortBool{} [latex{}("{#1}\\mathrel{=_K}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(Lbl'Unds'orElseBool'Unds'{}(),Lbl'Unds'orBool'Unds'{}(),Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(),Lbl'Unds'andThenBool'Unds'{}(),Lbl'Unds'impliesBool'Unds'{}(),Lbl'UndsEqlsEqls'Bool'Unds'{}(),Lbl'Unds'andBool'Unds'{}(),LblnotBool'Unds'{}(),Lbl'Unds'xorBool'Unds'{}()), smt-hook{}("="), right{}(), terminals{}("010"), equalEqualK{}(), klabel{}("_==K_"), hook{}("KEQUAL.eq"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2181,19,2181,152)"), left{}(Lbl'UndsEqlsSlshEqls'K'Unds'{}(),Lbl'UndsEqlsEqls'K'Unds'{}()), format{}("%1 %c==K%r %2"), function{}()]
  hooked-symbol Lbl'UndsEqlsEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("010"), hook{}("STRING.eq"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1662,19,1662,84)"), left{}(Lbl'UndsEqlsEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}()), format{}("%1 %c==String%r %2"), function{}()]
  symbol Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}(SortId{}, SortAExp{}) : SortAExp{} [functional{}(), constructor{}(), strict{}("2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(), right{}(), terminals{}("010"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(11,20,11,58)"), left{}(), format{}("%1 %c=%r %2"), injective{}()]
  hooked-symbol Lbl'Unds-GT-Eqls'Int'Unds'{}(SortInt{}, SortInt{}) : SortBool{} [latex{}("{#1}\\mathrel{\\geq_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(), smt-hook{}(">="), right{}(), terminals{}("010"), klabel{}("_>=Int_"), hook{}("INT.ge"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1116,19,1116,172)"), left{}(Lbl'Unds-GT-Eqls'Int'Unds'{}()), format{}("%1 %c>=Int%r %2"), function{}()]
  hooked-symbol Lbl'Unds-GT-Eqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("010"), hook{}("STRING.ge"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1669,19,1669,78)"), left{}(), format{}("%1 %c>=String%r %2"), function{}()]
  hooked-symbol Lbl'Unds-GT--GT-'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\gg_{\\scriptstyle\\it Int}}{#2}"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}()), right{}(), smtlib{}("shrInt"), terminals{}("010"), klabel{}("_>>Int_"), hook{}("INT.shr"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1055,18,1055,173)"), left{}(Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'Unds-GT--GT-'Int'Unds'{}()), format{}("%1 %c>>Int%r %2"), function{}()]
  hooked-symbol Lbl'Unds-GT-'Int'Unds'{}(SortInt{}, SortInt{}) : SortBool{} [latex{}("{#1}\\mathrel{>_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(), smt-hook{}(">"), right{}(), terminals{}("010"), klabel{}("_>Int_"), hook{}("INT.gt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1117,19,1117,167)"), left{}(Lbl'Unds-GT-'Int'Unds'{}()), format{}("%1 %c>Int%r %2"), function{}()]
  hooked-symbol Lbl'Unds-GT-'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("010"), hook{}("STRING.gt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1668,19,1668,78)"), left{}(), format{}("%1 %c>String%r %2"), function{}()]
  hooked-symbol Lbl'Unds'List'Unds'{}(SortList{}, SortList{}) : SortList{} [unit{}(Lbl'Stop'List{}()), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), element{}(LblListItem{}()), symbol'Kywd'{}(), priorities{}(), right{}(), assoc{}(), smtlib{}("smt_seq_concat"), terminals{}("00"), klabel{}("_List_"), hook{}("LIST.concat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(739,19,739,188)"), left{}(Lbl'Unds'List'Unds'{}()), format{}("%1%n%2"), function{}()]
  hooked-symbol Lbl'Unds'Map'Unds'{}(SortMap{}, SortMap{}) : SortMap{} [unit{}(Lbl'Stop'Map{}()), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), element{}(Lbl'UndsPipe'-'-GT-Unds'{}()), symbol'Kywd'{}(), comm{}(), priorities{}(), right{}(), assoc{}(), terminals{}("00"), index{}("0"), klabel{}("_Map_"), hook{}("MAP.concat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(240,18,240,173)"), left{}(Lbl'Unds'Map'Unds'{}()), format{}("%1%n%2"), function{}()]
  hooked-symbol Lbl'Unds'Set'Unds'{}(SortSet{}, SortSet{}) : SortSet{} [unit{}(Lbl'Stop'Set{}()), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), element{}(LblSetItem{}()), symbol'Kywd'{}(), idem{}(), comm{}(), priorities{}(), right{}(), assoc{}(), terminals{}("00"), klabel{}("_Set_"), hook{}("SET.concat"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(531,18,531,165)"), left{}(Lbl'Unds'Set'Unds'{}()), format{}("%1%n%2"), function{}()]
  hooked-symbol Lbl'Unds'ThreadCellMap'Unds'{}(SortThreadCellMap{}, SortThreadCellMap{}) : SortThreadCellMap{} [unit{}(Lbl'Stop'ThreadCellMap{}()), element{}(LblThreadCellMapItem{}()), comm{}(), priorities{}(), cellCollection{}(), right{}(), assoc{}(), terminals{}("00"), hook{}("MAP.concat"), left{}(), format{}("%1 %2"), avoid{}(), function{}(), wrapElement{}("<thread>")]
  hooked-symbol Lbl'UndsLSqBUnds-LT-'-'UndsRSqBUnds'LIST'Unds'List'Unds'List'Unds'Int'Unds'KItem{}(SortList{}, SortInt{}, SortKItem{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("010101"), klabel{}("List:set"), hook{}("LIST.update"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(775,19,775,108)"), left{}(), format{}("%1 %c[%r %2 %c<-%r %3 %c]%r"), function{}()]
  hooked-symbol Lbl'UndsLSqBUnds-LT-'-undef'RSqB'{}(SortMap{}, SortKItem{}) : SortMap{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(), right{}(), terminals{}("010111"), klabel{}("_[_<-undef]"), hook{}("MAP.remove"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(299,18,299,117)"), left{}(), format{}("%1 %c[%r %2 %c<-%r %cundef%r %c]%r"), function{}()]
  hooked-symbol Lbl'UndsLSqBUndsRSqB'orDefault'UndsUnds'MAP'Unds'KItem'Unds'Map'Unds'KItem'Unds'KItem{}(SortMap{}, SortKItem{}, SortKItem{}) : SortKItem{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("010110"), klabel{}("Map:lookupOrDefault"), hook{}("MAP.lookupOrDefault"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(281,20,281,134)"), left{}(), format{}("%1 %c[%r %2 %c]%r %corDefault%r %3"), function{}()]
  hooked-symbol Lbl'UndsXor-Perc'Int'UndsUnds'{}(SortInt{}, SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds'divInt'Unds'{}(),Lbl'UndsPerc'Int'Unds'{}(),Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsSlsh'Int'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsStar'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}(),Lbl'Unds'modInt'Unds'{}(),Lbl'Unds'-Int'Unds'{}()), smt-hook{}("(mod (^ #1 #2) #3)"), right{}(), terminals{}("0100"), klabel{}("_^%Int__"), hook{}("INT.powmod"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1041,18,1041,139)"), left{}(Lbl'UndsXor-Perc'Int'UndsUnds'{}(),Lbl'UndsXor-'Int'Unds'{}()), format{}("%1 %c^%%Int%r %2 %3"), function{}()]
  hooked-symbol Lbl'UndsXor-'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{{\\char`\\^}_{\\!\\scriptstyle\\it Int}}{#2}"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds'divInt'Unds'{}(),Lbl'UndsPerc'Int'Unds'{}(),Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsSlsh'Int'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsStar'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}(),Lbl'Unds'modInt'Unds'{}(),Lbl'Unds'-Int'Unds'{}()), smt-hook{}("^"), right{}(), terminals{}("010"), klabel{}("_^Int_"), hook{}("INT.pow"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1040,18,1040,178)"), left{}(Lbl'UndsXor-'Int'Unds'{}(),Lbl'UndsXor-Perc'Int'UndsUnds'{}()), format{}("%1 %c^Int%r %2"), function{}()]
  symbol Lbl'UndsUndsUnds'IMP-SYNTAX'Unds'Stmts'Unds'Stmt'Unds'Stmts{}(SortStmt{}, SortStmts{}) : SortStmts{} [functional{}(), constructor{}(), userList{}("*"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(), right{}(), terminals{}("010"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(38,20,38,33)"), left{}(), format{}("%1 %c%r %2"), injective{}()]
  hooked-symbol Lbl'Unds'andBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [latex{}("{#1}\\wedge_{\\scriptstyle\\it Bool}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(),Lbl'UndsEqlsEqls'Bool'Unds'{}()), smt-hook{}("and"), boolOperation{}(), right{}(), terminals{}("010"), klabel{}("_andBool_"), hook{}("BOOL.and"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(911,19,911,185)"), left{}(Lbl'Unds'andBool'Unds'{}()), format{}("%1 %candBool%r %2"), function{}()]
  hooked-symbol Lbl'Unds'andThenBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(),Lbl'UndsEqlsEqls'Bool'Unds'{}()), smt-hook{}("and"), boolOperation{}(), right{}(), terminals{}("010"), klabel{}("_andThenBool_"), hook{}("BOOL.andThen"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(912,19,912,147)"), left{}(Lbl'Unds'andThenBool'Unds'{}()), format{}("%1 %candThenBool%r %2"), function{}()]
  hooked-symbol Lbl'Unds'divInt'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}(),Lbl'Unds'-Int'Unds'{}()), smt-hook{}("div"), right{}(), terminals{}("010"), klabel{}("_divInt_"), hook{}("INT.ediv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1049,18,1049,122)"), left{}(Lbl'UndsSlsh'Int'Unds'{}(),Lbl'Unds'modInt'Unds'{}(),Lbl'UndsStar'Int'Unds'{}(),Lbl'UndsPerc'Int'Unds'{}(),Lbl'Unds'divInt'Unds'{}()), format{}("%1 %cdivInt%r %2"), function{}()]
  symbol Lbl'Unds'dividesInt'UndsUnds'INT-COMMON'Unds'Bool'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortBool{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("010"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1128,19,1128,53)"), left{}(), format{}("%1 %cdividesInt%r %2"), function{}()]
  hooked-symbol Lbl'Unds'impliesBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(),Lbl'UndsEqlsEqls'Bool'Unds'{}()), smt-hook{}("=>"), boolOperation{}(), right{}(), terminals{}("010"), klabel{}("_impliesBool_"), hook{}("BOOL.implies"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(916,19,916,146)"), left{}(Lbl'Unds'impliesBool'Unds'{}()), format{}("%1 %cimpliesBool%r %2"), function{}()]
  hooked-symbol Lbl'Unds'in'UndsUnds'LIST'Unds'Bool'Unds'KItem'Unds'List{}(SortKItem{}, SortList{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("010"), klabel{}("_inList_"), hook{}("LIST.in"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(822,19,822,97)"), left{}(), format{}("%1 %cin%r %2"), function{}()]
  hooked-symbol Lbl'Unds'in'Unds'keys'LParUndsRParUnds'MAP'Unds'Bool'Unds'KItem'Unds'Map{}(SortKItem{}, SortMap{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("01101"), hook{}("MAP.in_keys"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(357,19,357,89)"), left{}(), format{}("%1 %cin_keys%r %c(%r %2 %c)%r"), function{}()]
  hooked-symbol Lbl'Unds'modInt'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), symbol'Kywd'{}(), priorities{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}(),Lbl'Unds'-Int'Unds'{}()), smt-hook{}("mod"), right{}(), terminals{}("010"), klabel{}("_modInt_"), hook{}("INT.emod"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1050,18,1050,122)"), left{}(Lbl'UndsStar'Int'Unds'{}(),Lbl'UndsPerc'Int'Unds'{}(),Lbl'Unds'divInt'Unds'{}(),Lbl'UndsSlsh'Int'Unds'{}(),Lbl'Unds'modInt'Unds'{}()), format{}("%1 %cmodInt%r %2"), function{}()]
  hooked-symbol Lbl'Unds'orBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [latex{}("{#1}\\vee_{\\scriptstyle\\it Bool}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(),Lbl'UndsEqlsEqls'Bool'Unds'{}()), smt-hook{}("or"), boolOperation{}(), right{}(), terminals{}("010"), klabel{}("_orBool_"), hook{}("BOOL.or"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(914,19,914,180)"), left{}(Lbl'Unds'orBool'Unds'{}()), format{}("%1 %corBool%r %2"), function{}()]
  hooked-symbol Lbl'Unds'orElseBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(),Lbl'UndsEqlsEqls'Bool'Unds'{}()), smt-hook{}("or"), boolOperation{}(), right{}(), terminals{}("010"), klabel{}("_orElseBool_"), hook{}("BOOL.orElse"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(915,19,915,144)"), left{}(Lbl'Unds'orElseBool'Unds'{}()), format{}("%1 %corElseBool%r %2"), function{}()]
  hooked-symbol Lbl'Unds'xorBool'Unds'{}(SortBool{}, SortBool{}) : SortBool{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(),Lbl'UndsEqlsEqls'Bool'Unds'{}()), smt-hook{}("xor"), boolOperation{}(), right{}(), terminals{}("010"), klabel{}("_xorBool_"), hook{}("BOOL.xor"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(913,19,913,139)"), left{}(Lbl'Unds'xorBool'Unds'{}()), format{}("%1 %cxorBool%r %2"), function{}()]
  hooked-symbol Lbl'Unds'xorInt'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{\\oplus_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), comm{}(), priorities{}(Lbl'UndsPipe'Int'Unds'{}()), right{}(), smtlib{}("xorInt"), terminals{}("010"), klabel{}("_xorInt_"), hook{}("INT.xor"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1060,18,1060,190)"), left{}(Lbl'Unds'xorInt'Unds'{}()), format{}("%1 %cxorInt%r %2"), function{}()]
  hooked-symbol Lbl'UndsPipe'-'-GT-Unds'{}(SortKItem{}, SortKItem{}) : SortMap{} [latex{}("{#1}\\mapsto{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(Lbl'Stop'Map{}(),Lbl'Unds'Map'Unds'{}()), right{}(Lbl'UndsPipe'-'-GT-Unds'{}()), terminals{}("010"), klabel{}("_|->_"), hook{}("MAP.element"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(257,18,257,151)"), left{}(Lbl'UndsPipe'-'-GT-Unds'{}()), format{}("%1 %c|->%r %2"), injective{}(), function{}()]
  hooked-symbol Lbl'UndsPipe'Int'Unds'{}(SortInt{}, SortInt{}) : SortInt{} [latex{}("{#1}\\mathrel{|_{\\scriptstyle\\it Int}}{#2}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), comm{}(), priorities{}(), right{}(), smtlib{}("orInt"), terminals{}("010"), klabel{}("_|Int_"), hook{}("INT.or"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1062,18,1062,181)"), left{}(Lbl'UndsPipe'Int'Unds'{}()), format{}("%1 %c|Int%r %2"), function{}()]
  hooked-symbol Lbl'UndsPipe'Set'UndsUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(SortSet{}, SortSet{}) : SortSet{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), comm{}(), priorities{}(), right{}(), terminals{}("010"), hook{}("SET.union"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(558,18,558,92)"), left{}(Lbl'UndsPipe'Set'UndsUnds'SET'Unds'Set'Unds'Set'Unds'Set{}()), format{}("%1 %c|Set%r %2"), function{}()]
  symbol Lblabort'SClnUnds'IMP-SYNTAX'Unds'Stmt{}() : SortStmt{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}()), right{}(), terminals{}("11"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(27,20,27,31)"), left{}(), format{}("%cabort%r %c;%r"), injective{}()]
  hooked-symbol LblabsInt'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(SortInt{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), smt-hook{}("(ite (< #1 0) (- 0 #1) #1)"), right{}(), terminals{}("1101"), klabel{}("absInt"), hook{}("INT.abs"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1079,18,1079,119)"), left{}(), format{}("%cabsInt%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblbitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("bitRangeInt"), hook{}("INT.bitRange"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1104,18,1104,103)"), left{}(), format{}("%cbitRangeInt%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  hooked-symbol LblcategoryChar'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'String{}(SortString{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("categoryChar"), hook{}("STRING.category"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1679,21,1679,81)"), left{}(), format{}("%ccategoryChar%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lblchoice'LParUndsRParUnds'MAP'Unds'KItem'Unds'Map{}(SortMap{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("Map:choice"), hook{}("MAP.choice"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(393,20,393,101)"), left{}(), format{}("%cchoice%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lblchoice'LParUndsRParUnds'SET'Unds'KItem'Unds'Set{}(SortSet{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("Set:choice"), hook{}("SET.choice"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(614,20,614,95)"), left{}(), format{}("%cchoice%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblchrChar'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Int{}(SortInt{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("chrChar"), hook{}("STRING.chr"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1539,21,1539,70)"), left{}(), format{}("%cchrChar%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String{}(SortString{}, SortString{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("110101"), hook{}("STRING.countAllOccurrences"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1652,18,1652,146)"), left{}(), format{}("%ccountAllOccurrences%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol LbldirectionalityChar'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'String{}(SortString{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("directionalityChar"), hook{}("STRING.directionality"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1680,21,1680,87)"), left{}(), format{}("%cdirectionalityChar%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblfillList'LParUndsCommUndsCommUndsCommUndsRParUnds'LIST'Unds'List'Unds'List'Unds'Int'Unds'Int'Unds'KItem{}(SortList{}, SortInt{}, SortInt{}, SortKItem{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101010101"), klabel{}("fillList"), hook{}("LIST.fill"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(803,19,803,100)"), left{}(), format{}("%cfillList%r %c(%r %1 %c,%r %2 %c,%r %3 %c,%r %4 %c)%r"), function{}()]
  hooked-symbol LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("findChar"), hook{}("STRING.findChar"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1576,18,1576,116)"), left{}(), format{}("%cfindChar%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  hooked-symbol LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("findString"), hook{}("STRING.find"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1565,18,1565,111)"), left{}(), format{}("%cfindString%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  symbol LblfreshId'LParUndsRParUnds'ID-COMMON'Unds'Id'Unds'Int{}(SortInt{}) : SortId{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("1101"), freshGenerator{}(), klabel{}("freshId"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2144,17,2144,75)"), left{}(), format{}("%cfreshId%r %c(%r %1 %c)%r"), private{}(), function{}()]
  symbol LblfreshInt'LParUndsRParUnds'INT'Unds'Int'Unds'Int{}(SortInt{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("1101"), freshGenerator{}(), klabel{}("freshInt"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1253,18,1253,77)"), left{}(), format{}("%cfreshInt%r %c(%r %1 %c)%r"), private{}(), function{}()]
  symbol LblgetGeneratedCounterCell{}(SortGeneratedTopCell{}) : SortGeneratedCounterCell{} [priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cgetGeneratedCounterCell%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblgetKLabel'LParUndsRParUnds'K-REFLECTION'Unds'KItem'Unds'K{}(SortK{}) : SortKItem{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("getKLabel"), hook{}("KREFLECTION.getKLabel"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2254,20,2254,73)"), left{}(), format{}("%cgetKLabel%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblhalt'SClnUnds'IMP-SYNTAX'Unds'Stmt{}() : SortStmt{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}()), right{}(), terminals{}("11"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(25,20,25,30)"), left{}(), format{}("%chalt%r %c;%r"), injective{}()]
  symbol Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block{}(SortBExp{}, SortBlock{}, SortBlock{}) : SortStmt{} [functional{}(), constructor{}(), strict{}("1"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}()), right{}(), terminals{}("1101010"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(20,20,21,58)"), left{}(), format{}("%cif%r %c(%r %1 %c)%r %2 %celse%r %3"), injective{}()]
  symbol LblinitEnvCell{}() : SortEnvCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1"), left{}(), initializer{}(), format{}("%cinitEnvCell%r"), function{}()]
  symbol LblinitGeneratedCounterCell{}() : SortGeneratedCounterCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1"), left{}(), initializer{}(), format{}("%cinitGeneratedCounterCell%r"), function{}()]
  symbol LblinitGeneratedTopCell{}(SortMap{}) : SortGeneratedTopCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), initializer{}(), format{}("%cinitGeneratedTopCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblinitIdCell{}() : SortIdCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1"), left{}(), initializer{}(), format{}("%cinitIdCell%r"), function{}()]
  symbol LblinitInputCell{}(SortMap{}) : SortInputCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), initializer{}(), format{}("%cinitInputCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblinitKCell{}(SortMap{}) : SortKCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), initializer{}(), format{}("%cinitKCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblinitOutputCell{}(SortMap{}) : SortOutputCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), initializer{}(), format{}("%cinitOutputCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblinitStoreCell{}() : SortStoreCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1"), left{}(), initializer{}(), format{}("%cinitStoreCell%r"), function{}()]
  symbol LblinitTCell{}(SortMap{}) : SortTCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), initializer{}(), format{}("%cinitTCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblinitThreadCell{}(SortMap{}) : SortThreadCellMap{} [noThread{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), initializer{}(), format{}("%cinitThreadCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblinitThreadsCell{}(SortMap{}) : SortThreadsCell{} [noThread{}(), priorities{}(), right{}(), terminals{}("1101"), left{}(), initializer{}(), format{}("%cinitThreadsCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblint'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'Ids{}(SortIds{}) : SortStmt{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}()), right{}(), terminals{}("101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(23,20,23,33)"), left{}(), format{}("%cint%r %1 %c;%r"), injective{}()]
  hooked-symbol LblintersectSet'LParUndsCommUndsRParUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(SortSet{}, SortSet{}) : SortSet{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), comm{}(), priorities{}(), right{}(), terminals{}("110101"), klabel{}("intersectSet"), hook{}("SET.intersection"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(569,18,569,90)"), left{}(), format{}("%cintersectSet%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  symbol LblisAExp{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("AExp"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisAExp%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisAExps{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("AExps"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisAExps%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisBExp{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("BExp"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisBExp%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisBlock{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("Block"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisBlock%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisBool{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("Bool"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisBool%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisBottom{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("Bottom"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisBottom%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisBottoms{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("Bottoms"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisBottoms%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisEnvCell{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("EnvCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisEnvCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisEnvCellOpt{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("EnvCellOpt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisEnvCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisFloat{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("Float"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisFloat%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisGeneratedCounterCell{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("GeneratedCounterCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisGeneratedCounterCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisGeneratedCounterCellOpt{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("GeneratedCounterCellOpt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisGeneratedCounterCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisGeneratedTopCell{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("GeneratedTopCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisGeneratedTopCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisGeneratedTopCellFragment{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("GeneratedTopCellFragment"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisGeneratedTopCellFragment%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisIOError{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("IOError"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisIOError%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisIOFile{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("IOFile"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisIOFile%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisIOInt{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("IOInt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisIOInt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisIOString{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("IOString"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisIOString%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisId{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("Id"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisId%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisIdCell{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("IdCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisIdCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisIdCellOpt{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("IdCellOpt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisIdCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisIds{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("Ids"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisIds%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisInputCell{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("InputCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisInputCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisInputCellOpt{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("InputCellOpt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisInputCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisInt{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("Int"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisInt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisK{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("K"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisK%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisKCell{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("KCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisKCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisKCellOpt{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("KCellOpt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisKCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisKConfigVar{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("KConfigVar"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisKConfigVar%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisKItem{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("KItem"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisKItem%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisKResult{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("KResult"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisKResult%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisList{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("List"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisList%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisMap{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("Map"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisMap%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisOutputCell{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("OutputCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisOutputCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisOutputCellOpt{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("OutputCellOpt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisOutputCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisPrintable{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("Printable"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisPrintable%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisPrintables{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("Printables"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisPrintables%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisSet{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("Set"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisSet%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisStmt{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("Stmt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisStmt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisStmts{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("Stmts"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisStmts%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisStoreCell{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("StoreCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisStoreCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisStoreCellOpt{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("StoreCellOpt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisStoreCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisStream{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("Stream"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisStream%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisString{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("String"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisString%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisTCell{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("TCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisTCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisTCellFragment{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("TCellFragment"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisTCellFragment%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisTCellOpt{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("TCellOpt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisTCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisThreadCell{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("ThreadCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisThreadCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisThreadCellFragment{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("ThreadCellFragment"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisThreadCellFragment%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisThreadCellMap{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("ThreadCellMap"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisThreadCellMap%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisThreadsCell{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("ThreadsCell"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisThreadsCell%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisThreadsCellFragment{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("ThreadsCellFragment"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisThreadsCellFragment%r %c(%r %1 %c)%r"), function{}()]
  symbol LblisThreadsCellOpt{}(SortK{}) : SortBool{} [functional{}(), total{}(), predicate{}("ThreadsCellOpt"), priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cisThreadsCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(SortAExp{}) : SortStmt{} [functional{}(), constructor{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(), right{}(), terminals{}("101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(28,20,28,55)"), left{}(), format{}("%cjoin%r %1 %c;%r"), injective{}()]
  hooked-symbol Lblkeys'LParUndsRParUnds'MAP'Unds'Set'Unds'Map{}(SortMap{}) : SortSet{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("1101"), klabel{}("keys"), hook{}("MAP.keys"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(341,18,341,82)"), left{}(), format{}("%ckeys%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lblkeys'Unds'list'LParUndsRParUnds'MAP'Unds'List'Unds'Map{}(SortMap{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), hook{}("MAP.keys_list"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(349,19,349,80)"), left{}(), format{}("%ckeys_list%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(SortString{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("1101"), klabel{}("lengthString"), hook{}("STRING.length"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1530,18,1530,80)"), left{}(), format{}("%clengthString%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lbllog2Int'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("log2Int"), hook{}("INT.log2"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1090,18,1090,75)"), left{}(), format{}("%clog2Int%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblmakeList'LParUndsCommUndsRParUnds'LIST'Unds'List'Unds'Int'Unds'KItem{}(SortInt{}, SortKItem{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("110101"), klabel{}("makeList"), hook{}("LIST.make"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(784,19,784,82)"), left{}(), format{}("%cmakeList%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol LblmaxInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), smt-hook{}("(ite (< #1 #2) #2 #1)"), right{}(), terminals{}("110101"), hook{}("INT.max"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1071,18,1071,114)"), left{}(), format{}("%cmaxInt%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol LblminInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), smt-hook{}("(ite (< #1 #2) #1 #2)"), right{}(), terminals{}("110101"), hook{}("INT.min"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1070,18,1070,114)"), left{}(), format{}("%cminInt%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol LblnewUUID'Unds'STRING-COMMON'Unds'String{}() : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1"), impure{}(), hook{}("STRING.uuid"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1682,21,1682,68)"), left{}(), format{}("%cnewUUID%r"), function{}()]
  symbol LblnoEnvCell{}() : SortEnvCellOpt{} [functional{}(), constructor{}(), cellOptAbsent{}("EnvCell"), priorities{}(), right{}(), terminals{}("1"), left{}(), format{}("%cnoEnvCell%r"), injective{}()]
  symbol LblnoGeneratedCounterCell{}() : SortGeneratedCounterCellOpt{} [functional{}(), constructor{}(), cellOptAbsent{}("GeneratedCounterCell"), priorities{}(), right{}(), terminals{}("1"), left{}(), format{}("%cnoGeneratedCounterCell%r"), injective{}()]
  symbol LblnoIdCell{}() : SortIdCellOpt{} [functional{}(), constructor{}(), cellOptAbsent{}("IdCell"), priorities{}(), right{}(), terminals{}("1"), left{}(), format{}("%cnoIdCell%r"), injective{}()]
  symbol LblnoInputCell{}() : SortInputCellOpt{} [functional{}(), constructor{}(), cellOptAbsent{}("InputCell"), priorities{}(), right{}(), terminals{}("1"), left{}(), format{}("%cnoInputCell%r"), injective{}()]
  symbol LblnoKCell{}() : SortKCellOpt{} [functional{}(), constructor{}(), cellOptAbsent{}("KCell"), priorities{}(), right{}(), terminals{}("1"), left{}(), format{}("%cnoKCell%r"), injective{}()]
  symbol LblnoOutputCell{}() : SortOutputCellOpt{} [functional{}(), constructor{}(), cellOptAbsent{}("OutputCell"), priorities{}(), right{}(), terminals{}("1"), left{}(), format{}("%cnoOutputCell%r"), injective{}()]
  symbol LblnoStoreCell{}() : SortStoreCellOpt{} [functional{}(), constructor{}(), cellOptAbsent{}("StoreCell"), priorities{}(), right{}(), terminals{}("1"), left{}(), format{}("%cnoStoreCell%r"), injective{}()]
  symbol LblnoTCell{}() : SortTCellOpt{} [functional{}(), constructor{}(), cellOptAbsent{}("TCell"), priorities{}(), right{}(), terminals{}("1"), left{}(), format{}("%cnoTCell%r"), injective{}()]
  symbol LblnoThreadsCell{}() : SortThreadsCellOpt{} [functional{}(), constructor{}(), cellOptAbsent{}("ThreadsCell"), priorities{}(), right{}(), terminals{}("1"), left{}(), format{}("%cnoThreadsCell%r"), injective{}()]
  hooked-symbol LblnotBool'Unds'{}(SortBool{}) : SortBool{} [latex{}("\\neg_{\\scriptstyle\\it Bool}{#1}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(Lbl'Unds'orElseBool'Unds'{}(),Lbl'Unds'orBool'Unds'{}(),Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(),Lbl'Unds'andThenBool'Unds'{}(),Lbl'Unds'impliesBool'Unds'{}(),Lbl'UndsEqlsEqls'Bool'Unds'{}(),Lbl'Unds'andBool'Unds'{}(),Lbl'Unds'xorBool'Unds'{}()), smt-hook{}("not"), boolOperation{}(), right{}(), terminals{}("10"), klabel{}("notBool_"), hook{}("BOOL.not"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(910,19,910,172)"), left{}(), format{}("%cnotBool%r %1"), function{}()]
  hooked-symbol LblordChar'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(SortString{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("ordChar"), hook{}("STRING.ord"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1540,18,1540,70)"), left{}(), format{}("%cordChar%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps{}(SortAExps{}) : SortStmt{} [functional{}(), constructor{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}()), right{}(), terminals{}("11011"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(24,20,24,55)"), left{}(), format{}("%cprint%r %c(%r %1 %c)%r %c;%r"), injective{}()]
  symbol Lblproject'ColnHash'tempFile'Coln'fd{}(SortIOFile{}) : SortInt{} [priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cfd%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'ColnHash'tempFile'Coln'path{}(SortIOFile{}) : SortString{} [priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cpath%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'ColnHash'unknownIOError'Coln'errno{}(SortIOError{}) : SortInt{} [priorities{}(), right{}(), terminals{}("1101"), left{}(), format{}("%cerrno%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'AExp{}(SortK{}) : SortAExp{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:AExp%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'AExps{}(SortK{}) : SortAExps{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:AExps%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'BExp{}(SortK{}) : SortBExp{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:BExp%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Block{}(SortK{}) : SortBlock{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Block%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Bool{}(SortK{}) : SortBool{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Bool%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Bottom{}(SortK{}) : SortBottom{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Bottom%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Bottoms{}(SortK{}) : SortBottoms{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Bottoms%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'EnvCell{}(SortK{}) : SortEnvCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:EnvCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'EnvCellOpt{}(SortK{}) : SortEnvCellOpt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:EnvCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Float{}(SortK{}) : SortFloat{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Float%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'GeneratedCounterCell{}(SortK{}) : SortGeneratedCounterCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:GeneratedCounterCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'GeneratedCounterCellOpt{}(SortK{}) : SortGeneratedCounterCellOpt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:GeneratedCounterCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'GeneratedTopCell{}(SortK{}) : SortGeneratedTopCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:GeneratedTopCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'GeneratedTopCellFragment{}(SortK{}) : SortGeneratedTopCellFragment{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:GeneratedTopCellFragment%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'IOError{}(SortK{}) : SortIOError{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:IOError%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'IOFile{}(SortK{}) : SortIOFile{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:IOFile%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'IOInt{}(SortK{}) : SortIOInt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:IOInt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'IOString{}(SortK{}) : SortIOString{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:IOString%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Id{}(SortK{}) : SortId{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Id%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'IdCell{}(SortK{}) : SortIdCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:IdCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'IdCellOpt{}(SortK{}) : SortIdCellOpt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:IdCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Ids{}(SortK{}) : SortIds{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Ids%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'InputCell{}(SortK{}) : SortInputCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:InputCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'InputCellOpt{}(SortK{}) : SortInputCellOpt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:InputCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Int{}(SortK{}) : SortInt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Int%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'K{}(SortK{}) : SortK{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:K%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'KCell{}(SortK{}) : SortKCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:KCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'KCellOpt{}(SortK{}) : SortKCellOpt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:KCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'KItem{}(SortK{}) : SortKItem{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:KItem%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'KResult{}(SortK{}) : SortKResult{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:KResult%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'List{}(SortK{}) : SortList{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:List%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Map{}(SortK{}) : SortMap{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Map%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'OutputCell{}(SortK{}) : SortOutputCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:OutputCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'OutputCellOpt{}(SortK{}) : SortOutputCellOpt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:OutputCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Printable{}(SortK{}) : SortPrintable{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Printable%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Printables{}(SortK{}) : SortPrintables{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Printables%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Set{}(SortK{}) : SortSet{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Set%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Stmt{}(SortK{}) : SortStmt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Stmt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Stmts{}(SortK{}) : SortStmts{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Stmts%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'StoreCell{}(SortK{}) : SortStoreCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:StoreCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'StoreCellOpt{}(SortK{}) : SortStoreCellOpt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:StoreCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'Stream{}(SortK{}) : SortStream{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:Stream%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'String{}(SortK{}) : SortString{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:String%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'TCell{}(SortK{}) : SortTCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:TCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'TCellFragment{}(SortK{}) : SortTCellFragment{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:TCellFragment%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'TCellOpt{}(SortK{}) : SortTCellOpt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:TCellOpt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'ThreadCell{}(SortK{}) : SortThreadCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:ThreadCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'ThreadCellFragment{}(SortK{}) : SortThreadCellFragment{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:ThreadCellFragment%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'ThreadCellMap{}(SortK{}) : SortThreadCellMap{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:ThreadCellMap%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'ThreadsCell{}(SortK{}) : SortThreadsCell{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:ThreadsCell%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'ThreadsCellFragment{}(SortK{}) : SortThreadsCellFragment{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:ThreadsCellFragment%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblproject'Coln'ThreadsCellOpt{}(SortK{}) : SortThreadsCellOpt{} [priorities{}(), right{}(), terminals{}("1101"), projection{}(), left{}(), format{}("%cproject:ThreadsCellOpt%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblrandInt'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), klabel{}("randInt"), hook{}("INT.rand"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1138,18,1138,65)"), left{}(), format{}("%crandInt%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblread'LParRParUnds'IMP-SYNTAX'Unds'AExp{}() : SortAExp{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(),Lblspawn'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Block{}(),Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(),Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}()), right{}(), terminals{}("111"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(5,20,5,34)"), left{}(), format{}("%cread%r %c(%r %c)%r"), injective{}()]
  hooked-symbol LblremoveAll'LParUndsCommUndsRParUnds'MAP'Unds'Map'Unds'Map'Unds'Set{}(SortMap{}, SortSet{}) : SortMap{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("110101"), klabel{}("removeAll"), hook{}("MAP.removeAll"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(333,18,333,87)"), left{}(), format{}("%cremoveAll%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortString{}, SortInt{}) : SortString{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101010101"), hook{}("STRING.replace"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1650,21,1650,146)"), left{}(), format{}("%creplace%r %c(%r %1 %c,%r %2 %c,%r %3 %c,%r %4 %c)%r"), function{}()]
  hooked-symbol LblreplaceAll'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String{}(SortString{}, SortString{}, SortString{}) : SortString{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("11010101"), hook{}("STRING.replaceAll"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1649,21,1649,149)"), left{}(), format{}("%creplaceAll%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  hooked-symbol LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String{}(SortString{}, SortString{}, SortString{}) : SortString{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("11010101"), hook{}("STRING.replaceFirst"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1651,21,1651,151)"), left{}(), format{}("%creplaceFirst%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  hooked-symbol LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("rfindChar"), hook{}("STRING.rfindChar"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1577,18,1577,117)"), left{}(), format{}("%crfindChar%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  hooked-symbol LblrfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(SortString{}, SortString{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("rfindString"), hook{}("STRING.rfind"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1566,18,1566,112)"), left{}(), format{}("%crfindString%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  symbol LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(SortMap{}) : SortKItem{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("setEnv"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(80,20,80,31)"), left{}(), format{}("%csetEnv%r %c(%r %1 %c)%r"), injective{}()]
  hooked-symbol LblsignExtendBitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(SortInt{}, SortInt{}, SortInt{}) : SortInt{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("signExtendBitRangeInt"), hook{}("INT.signExtendBitRange"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1105,18,1105,113)"), left{}(), format{}("%csignExtendBitRangeInt%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  hooked-symbol Lblsize'LParUndsRParUnds'LIST'Unds'Int'Unds'List{}(SortList{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), smtlib{}("smt_seq_len"), terminals{}("1101"), klabel{}("sizeList"), hook{}("LIST.size"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(830,18,830,117)"), left{}(), format{}("%csize%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lblsize'LParUndsRParUnds'MAP'Unds'Int'Unds'Map{}(SortMap{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("1101"), klabel{}("sizeMap"), hook{}("MAP.size"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(373,18,373,99)"), left{}(), format{}("%csize%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol Lblsize'LParUndsRParUnds'SET'Unds'Int'Unds'Set{}(SortSet{}) : SortInt{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("1101"), klabel{}("size"), hook{}("SET.size"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(604,18,604,76)"), left{}(), format{}("%csize%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblspawn'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Block{}(SortBlock{}) : SortAExp{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}()), right{}(), terminals{}("10"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(10,20,10,33)"), left{}(), format{}("%cspawn%r %1"), injective{}()]
  hooked-symbol LblsrandInt'LParUndsRParUnds'INT-COMMON'Unds'K'Unds'Int{}(SortInt{}) : SortK{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), impure{}(), klabel{}("srandInt"), hook{}("INT.srand"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1139,16,1139,65)"), left{}(), format{}("%csrandInt%r %c(%r %1 %c)%r"), function{}()]
  hooked-symbol LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(SortString{}, SortInt{}, SortInt{}) : SortString{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("substrString"), hook{}("STRING.substr"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1555,21,1555,117)"), left{}(), format{}("%csubstrString%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  hooked-symbol LblupdateList'LParUndsCommUndsCommUndsRParUnds'LIST'Unds'List'Unds'List'Unds'Int'Unds'List{}(SortList{}, SortInt{}, SortList{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("11010101"), klabel{}("updateList"), hook{}("LIST.updateAll"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(794,19,794,97)"), left{}(), format{}("%cupdateList%r %c(%r %1 %c,%r %2 %c,%r %3 %c)%r"), function{}()]
  hooked-symbol LblupdateMap'LParUndsCommUndsRParUnds'MAP'Unds'Map'Unds'Map'Unds'Map{}(SortMap{}, SortMap{}) : SortMap{} [functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), priorities{}(), right{}(), terminals{}("110101"), klabel{}("updateMap"), hook{}("MAP.updateAll"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(324,18,324,87)"), left{}(), format{}("%cupdateMap%r %c(%r %1 %c,%r %2 %c)%r"), function{}()]
  hooked-symbol Lblvalues'LParUndsRParUnds'MAP'Unds'List'Unds'Map{}(SortMap{}) : SortList{} [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), priorities{}(), right{}(), terminals{}("1101"), klabel{}("values"), hook{}("MAP.values"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(365,19,365,77)"), left{}(), format{}("%cvalues%r %c(%r %1 %c)%r"), function{}()]
  symbol Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block{}(SortBExp{}, SortBlock{}) : SortStmt{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}()), right{}(), terminals{}("11010"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(22,20,22,46)"), left{}(), format{}("%cwhile%r %c(%r %1 %c)%r %2"), injective{}()]
  symbol Lbl'LBraUndsRBraUnds'IMP-SYNTAX'Unds'Block'Unds'Stmts{}(SortStmts{}) : SortBlock{} [functional{}(), constructor{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), priorities{}(), right{}(), terminals{}("101"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(17,20,17,33)"), left{}(), format{}("%c{%r %1 %c}%r"), injective{}()]
  hooked-symbol Lbl'Tild'Int'Unds'{}(SortInt{}) : SortInt{} [latex{}("\\mathop{\\sim_{\\scriptstyle\\it Int}}{#1}"), functional{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), total{}(), symbol'Kywd'{}(), priorities{}(Lbl'UndsPlus'Int'Unds'{}(),Lbl'Unds'divInt'Unds'{}(),Lbl'UndsPerc'Int'Unds'{}(),Lbl'Unds-GT--GT-'Int'Unds'{}(),Lbl'Unds'xorInt'Unds'{}(),Lbl'UndsSlsh'Int'Unds'{}(),Lbl'UndsAnd-'Int'Unds'{}(),Lbl'UndsXor-'Int'Unds'{}(),Lbl'Unds-LT--LT-'Int'Unds'{}(),Lbl'UndsStar'Int'Unds'{}(),Lbl'UndsPipe'Int'Unds'{}(),Lbl'Unds'modInt'Unds'{}(),Lbl'UndsXor-Perc'Int'UndsUnds'{}(),Lbl'Unds'-Int'Unds'{}()), right{}(), smtlib{}("notInt"), terminals{}("10"), klabel{}("~Int_"), hook{}("INT.not"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1038,18,1038,168)"), left{}(), format{}("%c~Int%r %1"), function{}()]

// generated axioms
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortStoreCellOpt{}, SortKItem{}} (From:SortStoreCellOpt{}))) [subsort{SortStoreCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortAExps{}, \equals{SortAExps{}, R} (Val:SortAExps{}, inj{SortPrintables{}, SortAExps{}} (From:SortPrintables{}))) [subsort{SortPrintables{}, SortAExps{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIOString{}, SortKItem{}} (From:SortIOString{}))) [subsort{SortIOString{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortString{}, SortKItem{}} (From:SortString{}))) [subsort{SortString{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKResult{}, \equals{SortKResult{}, R} (Val:SortKResult{}, inj{SortInt{}, SortKResult{}} (From:SortInt{}))) [subsort{SortInt{}, SortKResult{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortAExp{}, SortKItem{}} (From:SortAExp{}))) [subsort{SortAExp{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTCell{}, SortKItem{}} (From:SortTCell{}))) [subsort{SortTCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortPrintable{}, SortKItem{}} (From:SortPrintable{}))) [subsort{SortPrintable{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortKCellOpt{}, SortKItem{}} (From:SortKCellOpt{}))) [subsort{SortKCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIds{}, SortKItem{}} (From:SortIds{}))) [subsort{SortIds{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortGeneratedCounterCellOpt{}, SortKItem{}} (From:SortGeneratedCounterCellOpt{}))) [subsort{SortGeneratedCounterCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortKResult{}, SortKItem{}} (From:SortKResult{}))) [subsort{SortKResult{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortAExps{}, \equals{SortAExps{}, R} (Val:SortAExps{}, inj{SortIds{}, SortAExps{}} (From:SortIds{}))) [subsort{SortIds{}, SortAExps{}}()] // subsort
  axiom{R} \exists{R} (Val:SortGeneratedCounterCellOpt{}, \equals{SortGeneratedCounterCellOpt{}, R} (Val:SortGeneratedCounterCellOpt{}, inj{SortGeneratedCounterCell{}, SortGeneratedCounterCellOpt{}} (From:SortGeneratedCounterCell{}))) [subsort{SortGeneratedCounterCell{}, SortGeneratedCounterCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortBExp{}, \equals{SortBExp{}, R} (Val:SortBExp{}, inj{SortBool{}, SortBExp{}} (From:SortBool{}))) [subsort{SortBool{}, SortBExp{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortEnvCellOpt{}, SortKItem{}} (From:SortEnvCellOpt{}))) [subsort{SortEnvCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortKCell{}, SortKItem{}} (From:SortKCell{}))) [subsort{SortKCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTCellOpt{}, SortKItem{}} (From:SortTCellOpt{}))) [subsort{SortTCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, inj{SortPrintable{}, SortAExp{}} (From:SortPrintable{}))) [subsort{SortPrintable{}, SortAExp{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortStmts{}, SortKItem{}} (From:SortStmts{}))) [subsort{SortStmts{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortThreadsCellFragment{}, SortKItem{}} (From:SortThreadsCellFragment{}))) [subsort{SortThreadsCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortOutputCellOpt{}, \equals{SortOutputCellOpt{}, R} (Val:SortOutputCellOpt{}, inj{SortOutputCell{}, SortOutputCellOpt{}} (From:SortOutputCell{}))) [subsort{SortOutputCell{}, SortOutputCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortBottoms{}, SortKItem{}} (From:SortBottoms{}))) [subsort{SortBottoms{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOInt{}, \equals{SortIOInt{}, R} (Val:SortIOInt{}, inj{SortIOError{}, SortIOInt{}} (From:SortIOError{}))) [subsort{SortIOError{}, SortIOInt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKCellOpt{}, \equals{SortKCellOpt{}, R} (Val:SortKCellOpt{}, inj{SortKCell{}, SortKCellOpt{}} (From:SortKCell{}))) [subsort{SortKCell{}, SortKCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortSet{}, SortKItem{}} (From:SortSet{}))) [subsort{SortSet{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortStoreCell{}, SortKItem{}} (From:SortStoreCell{}))) [subsort{SortStoreCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIOError{}, SortKItem{}} (From:SortIOError{}))) [subsort{SortIOError{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortBlock{}, SortKItem{}} (From:SortBlock{}))) [subsort{SortBlock{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortGeneratedCounterCell{}, SortKItem{}} (From:SortGeneratedCounterCell{}))) [subsort{SortGeneratedCounterCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortThreadsCell{}, SortKItem{}} (From:SortThreadsCell{}))) [subsort{SortThreadsCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortBottom{}, SortKItem{}} (From:SortBottom{}))) [subsort{SortBottom{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOInt{}, \equals{SortIOInt{}, R} (Val:SortIOInt{}, inj{SortInt{}, SortIOInt{}} (From:SortInt{}))) [subsort{SortInt{}, SortIOInt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortOutputCellOpt{}, SortKItem{}} (From:SortOutputCellOpt{}))) [subsort{SortOutputCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortTCellOpt{}, \equals{SortTCellOpt{}, R} (Val:SortTCellOpt{}, inj{SortTCell{}, SortTCellOpt{}} (From:SortTCell{}))) [subsort{SortTCell{}, SortTCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKResult{}, \equals{SortKResult{}, R} (Val:SortKResult{}, inj{SortPrintables{}, SortKResult{}} (From:SortPrintables{}))) [subsort{SortPrintables{}, SortKResult{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortInputCellOpt{}, SortKItem{}} (From:SortInputCellOpt{}))) [subsort{SortInputCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortTCellFragment{}, SortKItem{}} (From:SortTCellFragment{}))) [subsort{SortTCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIds{}, \equals{SortIds{}, R} (Val:SortIds{}, inj{SortBottoms{}, SortIds{}} (From:SortBottoms{}))) [subsort{SortBottoms{}, SortIds{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIdCellOpt{}, \equals{SortIdCellOpt{}, R} (Val:SortIdCellOpt{}, inj{SortIdCell{}, SortIdCellOpt{}} (From:SortIdCell{}))) [subsort{SortIdCell{}, SortIdCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortThreadsCellOpt{}, \equals{SortThreadsCellOpt{}, R} (Val:SortThreadsCellOpt{}, inj{SortThreadsCell{}, SortThreadsCellOpt{}} (From:SortThreadsCell{}))) [subsort{SortThreadsCell{}, SortThreadsCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIdCellOpt{}, SortKItem{}} (From:SortIdCellOpt{}))) [subsort{SortIdCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortStream{}, SortKItem{}} (From:SortStream{}))) [subsort{SortStream{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIOFile{}, SortKItem{}} (From:SortIOFile{}))) [subsort{SortIOFile{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortGeneratedTopCell{}, SortKItem{}} (From:SortGeneratedTopCell{}))) [subsort{SortGeneratedTopCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortThreadCellMap{}, SortKItem{}} (From:SortThreadCellMap{}))) [subsort{SortThreadCellMap{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, inj{SortInt{}, SortAExp{}} (From:SortInt{}))) [subsort{SortInt{}, SortAExp{}}()] // subsort
  axiom{R} \exists{R} (Val:SortEnvCellOpt{}, \equals{SortEnvCellOpt{}, R} (Val:SortEnvCellOpt{}, inj{SortEnvCell{}, SortEnvCellOpt{}} (From:SortEnvCell{}))) [subsort{SortEnvCell{}, SortEnvCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIOInt{}, SortKItem{}} (From:SortIOInt{}))) [subsort{SortIOInt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortStoreCellOpt{}, \equals{SortStoreCellOpt{}, R} (Val:SortStoreCellOpt{}, inj{SortStoreCell{}, SortStoreCellOpt{}} (From:SortStoreCell{}))) [subsort{SortStoreCell{}, SortStoreCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortInputCell{}, SortKItem{}} (From:SortInputCell{}))) [subsort{SortInputCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortPrintables{}, SortKItem{}} (From:SortPrintables{}))) [subsort{SortPrintables{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortList{}, SortKItem{}} (From:SortList{}))) [subsort{SortList{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortKConfigVar{}, SortKItem{}} (From:SortKConfigVar{}))) [subsort{SortKConfigVar{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOString{}, \equals{SortIOString{}, R} (Val:SortIOString{}, inj{SortString{}, SortIOString{}} (From:SortString{}))) [subsort{SortString{}, SortIOString{}}()] // subsort
  axiom{R} \exists{R} (Val:SortStmt{}, \equals{SortStmt{}, R} (Val:SortStmt{}, inj{SortBlock{}, SortStmt{}} (From:SortBlock{}))) [subsort{SortBlock{}, SortStmt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortId{}, SortKItem{}} (From:SortId{}))) [subsort{SortId{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortFloat{}, SortKItem{}} (From:SortFloat{}))) [subsort{SortFloat{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortBool{}, SortKItem{}} (From:SortBool{}))) [subsort{SortBool{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortPrintable{}, \equals{SortPrintable{}, R} (Val:SortPrintable{}, inj{SortInt{}, SortPrintable{}} (From:SortInt{}))) [subsort{SortInt{}, SortPrintable{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortOutputCell{}, SortKItem{}} (From:SortOutputCell{}))) [subsort{SortOutputCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortThreadsCellOpt{}, SortKItem{}} (From:SortThreadsCellOpt{}))) [subsort{SortThreadsCellOpt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortAExps{}, SortKItem{}} (From:SortAExps{}))) [subsort{SortAExps{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, inj{SortId{}, SortAExp{}} (From:SortId{}))) [subsort{SortId{}, SortAExp{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortInt{}, SortKItem{}} (From:SortInt{}))) [subsort{SortInt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortGeneratedTopCellFragment{}, SortKItem{}} (From:SortGeneratedTopCellFragment{}))) [subsort{SortGeneratedTopCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortThreadCell{}, SortKItem{}} (From:SortThreadCell{}))) [subsort{SortThreadCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortBExp{}, SortKItem{}} (From:SortBExp{}))) [subsort{SortBExp{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortEnvCell{}, SortKItem{}} (From:SortEnvCell{}))) [subsort{SortEnvCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortIdCell{}, SortKItem{}} (From:SortIdCell{}))) [subsort{SortIdCell{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortPrintables{}, \equals{SortPrintables{}, R} (Val:SortPrintables{}, inj{SortBottoms{}, SortPrintables{}} (From:SortBottoms{}))) [subsort{SortBottoms{}, SortPrintables{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortStmt{}, SortKItem{}} (From:SortStmt{}))) [subsort{SortStmt{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortMap{}, SortKItem{}} (From:SortMap{}))) [subsort{SortMap{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, inj{SortString{}, SortAExp{}} (From:SortString{}))) [subsort{SortString{}, SortAExp{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKResult{}, \equals{SortKResult{}, R} (Val:SortKResult{}, inj{SortBool{}, SortKResult{}} (From:SortBool{}))) [subsort{SortBool{}, SortKResult{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOString{}, \equals{SortIOString{}, R} (Val:SortIOString{}, inj{SortIOError{}, SortIOString{}} (From:SortIOError{}))) [subsort{SortIOError{}, SortIOString{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, inj{SortThreadCellFragment{}, SortKItem{}} (From:SortThreadCellFragment{}))) [subsort{SortThreadCellFragment{}, SortKItem{}}()] // subsort
  axiom{R} \exists{R} (Val:SortIOFile{}, \equals{SortIOFile{}, R} (Val:SortIOFile{}, inj{SortIOError{}, SortIOFile{}} (From:SortIOError{}))) [subsort{SortIOError{}, SortIOFile{}}()] // subsort
  axiom{R} \exists{R} (Val:SortKResult{}, \equals{SortKResult{}, R} (Val:SortKResult{}, inj{SortString{}, SortKResult{}} (From:SortString{}))) [subsort{SortString{}, SortKResult{}}()] // subsort
  axiom{R} \exists{R} (Val:SortPrintable{}, \equals{SortPrintable{}, R} (Val:SortPrintable{}, inj{SortString{}, SortPrintable{}} (From:SortString{}))) [subsort{SortString{}, SortPrintable{}}()] // subsort
  axiom{R} \exists{R} (Val:SortThreadCellMap{}, \equals{SortThreadCellMap{}, R} (Val:SortThreadCellMap{}, inj{SortThreadCell{}, SortThreadCellMap{}} (From:SortThreadCell{}))) [subsort{SortThreadCell{}, SortThreadCellMap{}}()] // subsort
  axiom{R} \exists{R} (Val:SortInputCellOpt{}, \equals{SortInputCellOpt{}, R} (Val:SortInputCellOpt{}, inj{SortInputCell{}, SortInputCellOpt{}} (From:SortInputCell{}))) [subsort{SortInputCell{}, SortInputCellOpt{}}()] // subsort
  axiom{R} \exists{R} (Val:SortBExp{}, \equals{SortBExp{}, R} (Val:SortBExp{}, Lbl'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp{}(K0:SortBExp{}))) [functional{}()] // functional
  axiom{}\implies{SortBExp{}} (\and{SortBExp{}} (Lbl'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp{}(X0:SortBExp{}), Lbl'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp{}(Y0:SortBExp{})), Lbl'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp{}(\and{SortBExp{}} (X0:SortBExp{}, Y0:SortBExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortBExp{}} (\and{SortBExp{}} (Lbl'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp{}(X0:SortBExp{}), Lbl'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp{}(Y0:SortBExp{}, Y1:SortBExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortBExp{}} (\and{SortBExp{}} (Lbl'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp{}(X0:SortBExp{}), Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'E2BIG{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EACCES{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EADDRINUSE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EADDRNOTAVAIL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EAFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EAGAIN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EALREADY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'E2BIG{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EACCES{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EADDRINUSE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EADDRNOTAVAIL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EAFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EAGAIN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EALREADY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EACCES{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EADDRINUSE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EADDRNOTAVAIL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EAFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EAGAIN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EALREADY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EADDRNOTAVAIL{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EAFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EAGAIN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EALREADY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EAFNOSUPPORT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EAGAIN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EALREADY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EAGAIN{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EALREADY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EAGAIN{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EALREADY{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EBADF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EALREADY{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EBADF{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EBUSY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBADF{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EBUSY{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ECHILD{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EBUSY{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECHILD{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ECONNABORTED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECHILD{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECONNABORTED{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ECONNREFUSED{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECONNREFUSED{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ECONNRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ECONNRESET{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EDEADLK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EDEADLK{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EDESTADDRREQ{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDEADLK{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EDESTADDRREQ{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EDOM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EDOM{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EEXIST{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EDOM{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EEXIST{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EFAULT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EEXIST{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EFAULT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EFBIG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFAULT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EFBIG{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EHOSTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EFBIG{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EHOSTDOWN{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EHOSTUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EHOSTUNREACH{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EINPROGRESS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EINPROGRESS{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EINTR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EINTR{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EINVAL{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINTR{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EINVAL{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EINVAL{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EIO{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EISCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EIO{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EISCONN{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EISDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISCONN{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EISDIR{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ELOOP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EISDIR{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ELOOP{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EMFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ELOOP{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EMFILE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EMLINK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMFILE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EMLINK{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EMSGSIZE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMLINK{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EMSGSIZE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENAMETOOLONG{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENAMETOOLONG{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENETDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENETDOWN{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENETRESET{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENETRESET{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENETUNREACH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETRESET{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENETUNREACH{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENFILE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENFILE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOBUFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENFILE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOBUFS{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENODEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENODEV{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOENT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENODEV{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOENT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOEXEC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOENT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOEXEC{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOLCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOLCK{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOMEM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOLCK{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOMEM{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOPROTOOPT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOMEM{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOPROTOOPT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOSPC{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOSPC{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENOSYS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSPC{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOSYS{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ENOTCONN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOSYS{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTCONN{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ENOTDIR{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTDIR{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ENOTEMPTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTEMPTY{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ENOTSOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTSOCK{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ENOTTY{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENOTTY{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ENXIO{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENOTTY{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ENXIO{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EOF{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ENXIO{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EOF{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EOPNOTSUPP{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOF{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EOPNOTSUPP{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EOVERFLOW{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EOVERFLOW{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EPERM{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPERM{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EPFNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPERM{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPFNOSUPPORT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'EPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPIPE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'EPROTONOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPIPE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPROTONOSUPPORT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'EPROTOTYPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EPROTOTYPE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ERANGE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ERANGE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'EROFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ERANGE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EROFS{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'ESHUTDOWN{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EROFS{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESHUTDOWN{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'ESOCKTNOSUPPORT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESOCKTNOSUPPORT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'ESPIPE{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESPIPE{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'ESRCH{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESPIPE{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ESRCH{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH{}(), Lbl'Hash'ETIMEDOUT{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ESRCH{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ETIMEDOUT{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT{}(), Lbl'Hash'ETOOMANYREFS{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETIMEDOUT{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'ETOOMANYREFS{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS{}(), Lbl'Hash'EWOULDBLOCK{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'ETOOMANYREFS{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EWOULDBLOCK{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK{}(), Lbl'Hash'EXDEV{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EWOULDBLOCK{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'EXDEV{}())) [functional{}()] // functional
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV{}(), Lbl'Hash'noParse{}(Y0:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'EXDEV{}(), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortStream{}, \equals{SortStream{}, R} (Val:SortStream{}, Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortStream{}} (\and{SortStream{}} (Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(X0:SortK{}), Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(Y0:SortK{})), Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStream{}} (\and{SortStream{}} (Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(X0:SortK{}), Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStream{}} (\and{SortStream{}} (Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(X0:SortK{}), Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStream{}} (\and{SortStream{}} (Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(X0:SortK{}), Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(Y0:SortString{}, Y1:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(), Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(), Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(), Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(), Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(), Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(Y0:SortMap{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(X0:SortK{}), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(Y0:SortMap{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(Y0:SortMap{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(Y0:SortMap{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(X0:SortK{}), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(Y0:SortMap{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(X0:SortK{}), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(Y0:SortMap{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(X0:SortK{}), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(Y0:SortMap{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(X0:SortK{}), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(Y0:SortMap{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(Y0:SortMap{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(Y0:SortMap{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}(), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}(), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}(), Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}(), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}(), Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}(), Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}(), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}(), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(Y0:SortMap{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{}), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(Y0:SortMap{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(Y0:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{}), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(Y0:SortMap{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(Y0:SortK{})), Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(Y0:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(X0:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(X0:SortK{}), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(Y0:SortMap{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(Y0:SortK{}, Y1:SortK{})), Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}), \and{SortK{}} (X1:SortK{}, Y1:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(X0:SortK{}, X1:SortK{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(X0:SortK{}, X1:SortK{}), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(Y0:SortMap{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}(), Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}(), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}(), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(Y0:SortMap{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}())) [functional{}()] // functional
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}(), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}(), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(Y0:SortMap{}))) [constructor{}()] // no confusion different constructors
  axiom{R, SortSort} \exists{R} (Val:SortSort, \equals{SortSort, R} (Val:SortSort, Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL-SYNTAX'Unds'Sort'Unds'Bool'Unds'Sort'Unds'Sort{SortSort}(K0:SortBool{}, K1:SortSort, K2:SortSort))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStream{}, \equals{SortStream{}, R} (Val:SortStream{}, Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortStream{}} (\and{SortStream{}} (Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(X0:SortInt{}), Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Y0:SortInt{})), Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStream{}} (\and{SortStream{}} (Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(X0:SortInt{}), Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStream{}} (\and{SortStream{}} (Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(X0:SortInt{}), Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(Y0:SortString{}, Y1:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortK{}, \equals{SortK{}, R} (Val:SortK{}, Lbl'Hash'logToFile{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'noParse{}(K0:SortString{}))) [functional{}()] // functional
  axiom{}\implies{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noParse{}(X0:SortString{}), Lbl'Hash'noParse{}(Y0:SortString{})), Lbl'Hash'noParse{}(\and{SortString{}} (X0:SortString{}, Y0:SortString{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'noParse{}(X0:SortString{}), Lbl'Hash'unknownIOError{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortStream{}, \equals{SortStream{}, R} (Val:SortStream{}, Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortStream{}} (\and{SortStream{}} (Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(X0:SortInt{}), Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Y0:SortInt{})), Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStream{}} (\and{SortStream{}} (Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(X0:SortInt{}), Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(Y0:SortString{}, Y1:SortString{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortStream{}, \equals{SortStream{}, R} (Val:SortStream{}, Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{}\implies{SortStream{}} (\and{SortStream{}} (Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(X0:SortString{}, X1:SortString{}), Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(Y0:SortString{}, Y1:SortString{})), Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(\and{SortString{}} (X0:SortString{}, Y0:SortString{}), \and{SortString{}} (X1:SortString{}, Y1:SortString{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortK{}, \equals{SortK{}, R} (Val:SortK{}, Lbl'Hash'remove'LParUndsRParUnds'K-IO'Unds'K'Unds'String{}(K0:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Hash'stderr'Unds'K-IO'Unds'Int{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Hash'stdin'Unds'K-IO'Unds'Int{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Hash'stdout'Unds'K-IO'Unds'Int{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'Hash'systemResult{}(K0:SortInt{}, K1:SortString{}, K2:SortString{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'systemResult{}(X0:SortInt{}, X1:SortString{}, X2:SortString{}), Lbl'Hash'systemResult{}(Y0:SortInt{}, Y1:SortString{}, Y2:SortString{})), Lbl'Hash'systemResult{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}), \and{SortString{}} (X1:SortString{}, Y1:SortString{}), \and{SortString{}} (X2:SortString{}, Y2:SortString{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortKItem{}} (\and{SortKItem{}} (Lbl'Hash'systemResult{}(X0:SortInt{}, X1:SortString{}, X2:SortString{}), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(Y0:SortMap{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIOFile{}, \equals{SortIOFile{}, R} (Val:SortIOFile{}, Lbl'Hash'tempFile{}(K0:SortString{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortIOFile{}} (\and{SortIOFile{}} (Lbl'Hash'tempFile{}(X0:SortString{}, X1:SortInt{}), Lbl'Hash'tempFile{}(Y0:SortString{}, Y1:SortInt{})), Lbl'Hash'tempFile{}(\and{SortString{}} (X0:SortString{}, Y0:SortString{}), \and{SortInt{}} (X1:SortInt{}, Y1:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortK{}, \equals{SortK{}, R} (Val:SortK{}, Lbl'Hash'trace{}(K0:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortK{}, \equals{SortK{}, R} (Val:SortK{}, Lbl'Hash'traceK{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIOError{}, \equals{SortIOError{}, R} (Val:SortIOError{}, Lbl'Hash'unknownIOError{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortIOError{}} (\and{SortIOError{}} (Lbl'Hash'unknownIOError{}(X0:SortInt{}), Lbl'Hash'unknownIOError{}(Y0:SortInt{})), Lbl'Hash'unknownIOError{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, Lbl'PlusPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id{}(K0:SortId{}))) [functional{}()] // functional
  axiom{}\implies{SortAExp{}} (\and{SortAExp{}} (Lbl'PlusPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id{}(X0:SortId{}), Lbl'PlusPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id{}(Y0:SortId{})), Lbl'PlusPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'PlusPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id{}(X0:SortId{}), Lbl-'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Int{}(Y0:SortInt{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'PlusPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id{}(X0:SortId{}), Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'PlusPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id{}(X0:SortId{}), Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'PlusPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id{}(X0:SortId{}), Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}(Y0:SortId{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'PlusPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id{}(X0:SortId{}), Lblread'LParRParUnds'IMP-SYNTAX'Unds'AExp{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'PlusPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id{}(X0:SortId{}), Lblspawn'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Block{}(Y0:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, Lbl-'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortAExp{}} (\and{SortAExp{}} (Lbl-'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Int{}(X0:SortInt{}), Lbl-'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Int{}(Y0:SortInt{})), Lbl-'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Int{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl-'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Int{}(X0:SortInt{}), Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl-'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Int{}(X0:SortInt{}), Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl-'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Int{}(X0:SortInt{}), Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}(Y0:SortId{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl-'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Int{}(X0:SortInt{}), Lblread'LParRParUnds'IMP-SYNTAX'Unds'AExp{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl-'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Int{}(X0:SortInt{}), Lblspawn'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Block{}(Y0:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, Lbl'Stop'List{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortAExps{}, \equals{SortAExps{}, R} (Val:SortAExps{}, Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps'QuotRBraUnds'AExps{}())) [functional{}()] // functional
  axiom{}\not{SortAExps{}} (\and{SortAExps{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps'QuotRBraUnds'AExps{}(), Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(Y0:SortAExp{}, Y1:SortAExps{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBottoms{}, \equals{SortBottoms{}, R} (Val:SortBottoms{}, Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Bottoms'Unds'Bottom'Unds'Bottoms'QuotRBraUnds'Bottoms{}())) [functional{}()] // functional
  axiom{}\not{SortBottoms{}} (\and{SortBottoms{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Bottoms'Unds'Bottom'Unds'Bottoms'QuotRBraUnds'Bottoms{}(), Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Bottoms'Unds'Bottom'Unds'Bottoms{}(Y0:SortBottom{}, Y1:SortBottoms{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortIds{}, \equals{SortIds{}, R} (Val:SortIds{}, Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids'QuotRBraUnds'Ids{}())) [functional{}()] // functional
  axiom{}\not{SortIds{}} (\and{SortIds{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids'QuotRBraUnds'Ids{}(), Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(Y0:SortId{}, Y1:SortIds{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortPrintables{}, \equals{SortPrintables{}, R} (Val:SortPrintables{}, Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Printables'Unds'Printable'Unds'Printables'QuotRBraUnds'Printables{}())) [functional{}()] // functional
  axiom{}\not{SortPrintables{}} (\and{SortPrintables{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Printables'Unds'Printable'Unds'Printables'QuotRBraUnds'Printables{}(), Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Printables'Unds'Printable'Unds'Printables{}(Y0:SortPrintable{}, Y1:SortPrintables{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortStmts{}, \equals{SortStmts{}, R} (Val:SortStmts{}, Lbl'Stop'List'LBraQuotUndsUndsUnds'IMP-SYNTAX'Unds'Stmts'Unds'Stmt'Unds'Stmts'QuotRBraUnds'Stmts{}())) [functional{}()] // functional
  axiom{}\not{SortStmts{}} (\and{SortStmts{}} (Lbl'Stop'List'LBraQuotUndsUndsUnds'IMP-SYNTAX'Unds'Stmts'Unds'Stmt'Unds'Stmts'QuotRBraUnds'Stmts{}(), Lbl'UndsUndsUnds'IMP-SYNTAX'Unds'Stmts'Unds'Stmt'Unds'Stmts{}(Y0:SortStmt{}, Y1:SortStmts{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'Stop'Map{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lbl'Stop'Set{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortTCell{}, \equals{SortTCell{}, R} (Val:SortTCell{}, Lbl'-LT-'T'-GT-'{}(K0:SortThreadsCell{}, K1:SortStoreCell{}, K2:SortInputCell{}, K3:SortOutputCell{}))) [functional{}()] // functional
  axiom{}\implies{SortTCell{}} (\and{SortTCell{}} (Lbl'-LT-'T'-GT-'{}(X0:SortThreadsCell{}, X1:SortStoreCell{}, X2:SortInputCell{}, X3:SortOutputCell{}), Lbl'-LT-'T'-GT-'{}(Y0:SortThreadsCell{}, Y1:SortStoreCell{}, Y2:SortInputCell{}, Y3:SortOutputCell{})), Lbl'-LT-'T'-GT-'{}(\and{SortThreadsCell{}} (X0:SortThreadsCell{}, Y0:SortThreadsCell{}), \and{SortStoreCell{}} (X1:SortStoreCell{}, Y1:SortStoreCell{}), \and{SortInputCell{}} (X2:SortInputCell{}, Y2:SortInputCell{}), \and{SortOutputCell{}} (X3:SortOutputCell{}, Y3:SortOutputCell{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortTCellFragment{}, \equals{SortTCellFragment{}, R} (Val:SortTCellFragment{}, Lbl'-LT-'T'-GT-'-fragment{}(K0:SortThreadsCellOpt{}, K1:SortStoreCellOpt{}, K2:SortInputCellOpt{}, K3:SortOutputCellOpt{}))) [functional{}()] // functional
  axiom{}\implies{SortTCellFragment{}} (\and{SortTCellFragment{}} (Lbl'-LT-'T'-GT-'-fragment{}(X0:SortThreadsCellOpt{}, X1:SortStoreCellOpt{}, X2:SortInputCellOpt{}, X3:SortOutputCellOpt{}), Lbl'-LT-'T'-GT-'-fragment{}(Y0:SortThreadsCellOpt{}, Y1:SortStoreCellOpt{}, Y2:SortInputCellOpt{}, Y3:SortOutputCellOpt{})), Lbl'-LT-'T'-GT-'-fragment{}(\and{SortThreadsCellOpt{}} (X0:SortThreadsCellOpt{}, Y0:SortThreadsCellOpt{}), \and{SortStoreCellOpt{}} (X1:SortStoreCellOpt{}, Y1:SortStoreCellOpt{}), \and{SortInputCellOpt{}} (X2:SortInputCellOpt{}, Y2:SortInputCellOpt{}), \and{SortOutputCellOpt{}} (X3:SortOutputCellOpt{}, Y3:SortOutputCellOpt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortEnvCell{}, \equals{SortEnvCell{}, R} (Val:SortEnvCell{}, Lbl'-LT-'env'-GT-'{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{}\implies{SortEnvCell{}} (\and{SortEnvCell{}} (Lbl'-LT-'env'-GT-'{}(X0:SortMap{}), Lbl'-LT-'env'-GT-'{}(Y0:SortMap{})), Lbl'-LT-'env'-GT-'{}(\and{SortMap{}} (X0:SortMap{}, Y0:SortMap{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortGeneratedCounterCell{}, \equals{SortGeneratedCounterCell{}, R} (Val:SortGeneratedCounterCell{}, Lbl'-LT-'generatedCounter'-GT-'{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortGeneratedCounterCell{}} (\and{SortGeneratedCounterCell{}} (Lbl'-LT-'generatedCounter'-GT-'{}(X0:SortInt{}), Lbl'-LT-'generatedCounter'-GT-'{}(Y0:SortInt{})), Lbl'-LT-'generatedCounter'-GT-'{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortGeneratedTopCell{}, \equals{SortGeneratedTopCell{}, R} (Val:SortGeneratedTopCell{}, Lbl'-LT-'generatedTop'-GT-'{}(K0:SortTCell{}, K1:SortGeneratedCounterCell{}))) [functional{}()] // functional
  axiom{}\implies{SortGeneratedTopCell{}} (\and{SortGeneratedTopCell{}} (Lbl'-LT-'generatedTop'-GT-'{}(X0:SortTCell{}, X1:SortGeneratedCounterCell{}), Lbl'-LT-'generatedTop'-GT-'{}(Y0:SortTCell{}, Y1:SortGeneratedCounterCell{})), Lbl'-LT-'generatedTop'-GT-'{}(\and{SortTCell{}} (X0:SortTCell{}, Y0:SortTCell{}), \and{SortGeneratedCounterCell{}} (X1:SortGeneratedCounterCell{}, Y1:SortGeneratedCounterCell{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortGeneratedTopCellFragment{}, \equals{SortGeneratedTopCellFragment{}, R} (Val:SortGeneratedTopCellFragment{}, Lbl'-LT-'generatedTop'-GT-'-fragment{}(K0:SortTCellOpt{}, K1:SortGeneratedCounterCellOpt{}))) [functional{}()] // functional
  axiom{}\implies{SortGeneratedTopCellFragment{}} (\and{SortGeneratedTopCellFragment{}} (Lbl'-LT-'generatedTop'-GT-'-fragment{}(X0:SortTCellOpt{}, X1:SortGeneratedCounterCellOpt{}), Lbl'-LT-'generatedTop'-GT-'-fragment{}(Y0:SortTCellOpt{}, Y1:SortGeneratedCounterCellOpt{})), Lbl'-LT-'generatedTop'-GT-'-fragment{}(\and{SortTCellOpt{}} (X0:SortTCellOpt{}, Y0:SortTCellOpt{}), \and{SortGeneratedCounterCellOpt{}} (X1:SortGeneratedCounterCellOpt{}, Y1:SortGeneratedCounterCellOpt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIdCell{}, \equals{SortIdCell{}, R} (Val:SortIdCell{}, Lbl'-LT-'id'-GT-'{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{}\implies{SortIdCell{}} (\and{SortIdCell{}} (Lbl'-LT-'id'-GT-'{}(X0:SortInt{}), Lbl'-LT-'id'-GT-'{}(Y0:SortInt{})), Lbl'-LT-'id'-GT-'{}(\and{SortInt{}} (X0:SortInt{}, Y0:SortInt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortInputCell{}, \equals{SortInputCell{}, R} (Val:SortInputCell{}, Lbl'-LT-'input'-GT-'{}(K0:SortList{}))) [functional{}()] // functional
  axiom{}\implies{SortInputCell{}} (\and{SortInputCell{}} (Lbl'-LT-'input'-GT-'{}(X0:SortList{}), Lbl'-LT-'input'-GT-'{}(Y0:SortList{})), Lbl'-LT-'input'-GT-'{}(\and{SortList{}} (X0:SortList{}, Y0:SortList{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortKCell{}, \equals{SortKCell{}, R} (Val:SortKCell{}, Lbl'-LT-'k'-GT-'{}(K0:SortK{}))) [functional{}()] // functional
  axiom{}\implies{SortKCell{}} (\and{SortKCell{}} (Lbl'-LT-'k'-GT-'{}(X0:SortK{}), Lbl'-LT-'k'-GT-'{}(Y0:SortK{})), Lbl'-LT-'k'-GT-'{}(\and{SortK{}} (X0:SortK{}, Y0:SortK{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortOutputCell{}, \equals{SortOutputCell{}, R} (Val:SortOutputCell{}, Lbl'-LT-'output'-GT-'{}(K0:SortList{}))) [functional{}()] // functional
  axiom{}\implies{SortOutputCell{}} (\and{SortOutputCell{}} (Lbl'-LT-'output'-GT-'{}(X0:SortList{}), Lbl'-LT-'output'-GT-'{}(Y0:SortList{})), Lbl'-LT-'output'-GT-'{}(\and{SortList{}} (X0:SortList{}, Y0:SortList{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortStoreCell{}, \equals{SortStoreCell{}, R} (Val:SortStoreCell{}, Lbl'-LT-'store'-GT-'{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{}\implies{SortStoreCell{}} (\and{SortStoreCell{}} (Lbl'-LT-'store'-GT-'{}(X0:SortMap{}), Lbl'-LT-'store'-GT-'{}(Y0:SortMap{})), Lbl'-LT-'store'-GT-'{}(\and{SortMap{}} (X0:SortMap{}, Y0:SortMap{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortThreadCell{}, \equals{SortThreadCell{}, R} (Val:SortThreadCell{}, Lbl'-LT-'thread'-GT-'{}(K0:SortIdCell{}, K1:SortKCell{}, K2:SortEnvCell{}))) [functional{}()] // functional
  axiom{}\implies{SortThreadCell{}} (\and{SortThreadCell{}} (Lbl'-LT-'thread'-GT-'{}(X0:SortIdCell{}, X1:SortKCell{}, X2:SortEnvCell{}), Lbl'-LT-'thread'-GT-'{}(Y0:SortIdCell{}, Y1:SortKCell{}, Y2:SortEnvCell{})), Lbl'-LT-'thread'-GT-'{}(\and{SortIdCell{}} (X0:SortIdCell{}, Y0:SortIdCell{}), \and{SortKCell{}} (X1:SortKCell{}, Y1:SortKCell{}), \and{SortEnvCell{}} (X2:SortEnvCell{}, Y2:SortEnvCell{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortThreadCellFragment{}, \equals{SortThreadCellFragment{}, R} (Val:SortThreadCellFragment{}, Lbl'-LT-'thread'-GT-'-fragment{}(K0:SortIdCellOpt{}, K1:SortKCellOpt{}, K2:SortEnvCellOpt{}))) [functional{}()] // functional
  axiom{}\implies{SortThreadCellFragment{}} (\and{SortThreadCellFragment{}} (Lbl'-LT-'thread'-GT-'-fragment{}(X0:SortIdCellOpt{}, X1:SortKCellOpt{}, X2:SortEnvCellOpt{}), Lbl'-LT-'thread'-GT-'-fragment{}(Y0:SortIdCellOpt{}, Y1:SortKCellOpt{}, Y2:SortEnvCellOpt{})), Lbl'-LT-'thread'-GT-'-fragment{}(\and{SortIdCellOpt{}} (X0:SortIdCellOpt{}, Y0:SortIdCellOpt{}), \and{SortKCellOpt{}} (X1:SortKCellOpt{}, Y1:SortKCellOpt{}), \and{SortEnvCellOpt{}} (X2:SortEnvCellOpt{}, Y2:SortEnvCellOpt{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortThreadsCell{}, \equals{SortThreadsCell{}, R} (Val:SortThreadsCell{}, Lbl'-LT-'threads'-GT-'{}(K0:SortThreadCellMap{}))) [functional{}()] // functional
  axiom{}\implies{SortThreadsCell{}} (\and{SortThreadsCell{}} (Lbl'-LT-'threads'-GT-'{}(X0:SortThreadCellMap{}), Lbl'-LT-'threads'-GT-'{}(Y0:SortThreadCellMap{})), Lbl'-LT-'threads'-GT-'{}(\and{SortThreadCellMap{}} (X0:SortThreadCellMap{}, Y0:SortThreadCellMap{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortThreadsCellFragment{}, \equals{SortThreadsCellFragment{}, R} (Val:SortThreadsCellFragment{}, Lbl'-LT-'threads'-GT-'-fragment{}(K0:SortThreadCellMap{}))) [functional{}()] // functional
  axiom{}\implies{SortThreadsCellFragment{}} (\and{SortThreadsCellFragment{}} (Lbl'-LT-'threads'-GT-'-fragment{}(X0:SortThreadCellMap{}), Lbl'-LT-'threads'-GT-'-fragment{}(Y0:SortThreadCellMap{})), Lbl'-LT-'threads'-GT-'-fragment{}(\and{SortThreadCellMap{}} (X0:SortThreadCellMap{}, Y0:SortThreadCellMap{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblBool2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Bool{}(K0:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblFloat2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Float{}(K0:SortFloat{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblId2String'LParUndsRParUnds'ID-COMMON'Unds'String'Unds'Id{}(K0:SortId{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblInt2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, LblListItem{}(K0:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, LblMap'Coln'update{}(K0:SortMap{}, K1:SortKItem{}, K2:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblSet'Coln'difference{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblSet'Coln'in{}(K0:SortKItem{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblSetItem{}(K0:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortId{}, \equals{SortId{}, R} (Val:SortId{}, LblString2Id'LParUndsRParUnds'ID-COMMON'Unds'Id'Unds'String{}(K0:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblThreadCellMap'Coln'in'Unds'keys{}(K0:SortIdCell{}, K1:SortThreadCellMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIdCell{}, \equals{SortIdCell{}, R} (Val:SortIdCell{}, LblThreadCellMapKey{}(K0:SortThreadCell{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBExp{}, \equals{SortBExp{}, R} (Val:SortBExp{}, Lbl'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp{}(K0:SortBExp{}, K1:SortBExp{}))) [functional{}()] // functional
  axiom{}\implies{SortBExp{}} (\and{SortBExp{}} (Lbl'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp{}(X0:SortBExp{}, X1:SortBExp{}), Lbl'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp{}(Y0:SortBExp{}, Y1:SortBExp{})), Lbl'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp{}(\and{SortBExp{}} (X0:SortBExp{}, Y0:SortBExp{}), \and{SortBExp{}} (X1:SortBExp{}, Y1:SortBExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortBExp{}} (\and{SortBExp{}} (Lbl'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp{}(X0:SortBExp{}, X1:SortBExp{}), Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \equals{SortInt{}, R} (Lbl'UndsAnd-'Int'Unds'{}(K1:SortInt{},K2:SortInt{}),Lbl'UndsAnd-'Int'Unds'{}(K2:SortInt{},K1:SortInt{})) [comm{}()] // commutativity
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsAnd-'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \equals{SortInt{}, R} (Lbl'UndsStar'Int'Unds'{}(K1:SortInt{},K2:SortInt{}),Lbl'UndsStar'Int'Unds'{}(K2:SortInt{},K1:SortInt{})) [comm{}()] // commutativity
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsStar'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \equals{SortInt{}, R} (Lbl'UndsPlus'Int'Unds'{}(K1:SortInt{},K2:SortInt{}),Lbl'UndsPlus'Int'Unds'{}(K2:SortInt{},K1:SortInt{})) [comm{}()] // commutativity
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsPlus'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(K0:SortAExp{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{})), Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}(Y0:SortId{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lblread'LParRParUnds'IMP-SYNTAX'Unds'AExp{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lblspawn'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Block{}(Y0:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortAExps{}, \equals{SortAExps{}, R} (Val:SortAExps{}, Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(K0:SortAExp{}, K1:SortAExps{}))) [functional{}()] // functional
  axiom{}\implies{SortAExps{}} (\and{SortAExps{}} (Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(X0:SortAExp{}, X1:SortAExps{}), Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(Y0:SortAExp{}, Y1:SortAExps{})), Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExps{}} (X1:SortAExps{}, Y1:SortAExps{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBottoms{}, \equals{SortBottoms{}, R} (Val:SortBottoms{}, Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Bottoms'Unds'Bottom'Unds'Bottoms{}(K0:SortBottom{}, K1:SortBottoms{}))) [functional{}()] // functional
  axiom{}\implies{SortBottoms{}} (\and{SortBottoms{}} (Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Bottoms'Unds'Bottom'Unds'Bottoms{}(X0:SortBottom{}, X1:SortBottoms{}), Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Bottoms'Unds'Bottom'Unds'Bottoms{}(Y0:SortBottom{}, Y1:SortBottoms{})), Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Bottoms'Unds'Bottom'Unds'Bottoms{}(\and{SortBottom{}} (X0:SortBottom{}, Y0:SortBottom{}), \and{SortBottoms{}} (X1:SortBottoms{}, Y1:SortBottoms{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortIds{}, \equals{SortIds{}, R} (Val:SortIds{}, Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(K0:SortId{}, K1:SortIds{}))) [functional{}()] // functional
  axiom{}\implies{SortIds{}} (\and{SortIds{}} (Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(X0:SortId{}, X1:SortIds{}), Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(Y0:SortId{}, Y1:SortIds{})), Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}), \and{SortIds{}} (X1:SortIds{}, Y1:SortIds{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortPrintables{}, \equals{SortPrintables{}, R} (Val:SortPrintables{}, Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Printables'Unds'Printable'Unds'Printables{}(K0:SortPrintable{}, K1:SortPrintables{}))) [functional{}()] // functional
  axiom{}\implies{SortPrintables{}} (\and{SortPrintables{}} (Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Printables'Unds'Printable'Unds'Printables{}(X0:SortPrintable{}, X1:SortPrintables{}), Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Printables'Unds'Printable'Unds'Printables{}(Y0:SortPrintable{}, Y1:SortPrintables{})), Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Printables'Unds'Printable'Unds'Printables{}(\and{SortPrintable{}} (X0:SortPrintable{}, Y0:SortPrintable{}), \and{SortPrintables{}} (X1:SortPrintables{}, Y1:SortPrintables{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Unds'-Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'Unds'-Map'UndsUnds'MAP'Unds'Map'Unds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(K0:SortAExp{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{})), Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}(Y0:SortId{}, Y1:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lblread'LParRParUnds'IMP-SYNTAX'Unds'AExp{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lblspawn'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Block{}(Y0:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortStmt{}, \equals{SortStmt{}, R} (Val:SortStmt{}, Lbl'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(K0:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(X0:SortAExp{}), Lbl'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(Y0:SortAExp{})), Lbl'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(X0:SortAExp{}), Lblabort'SClnUnds'IMP-SYNTAX'Unds'Stmt{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(X0:SortAExp{}), Lblhalt'SClnUnds'IMP-SYNTAX'Unds'Stmt{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(X0:SortAExp{}), Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(X0:SortAExp{}), Lblint'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'Ids{}(Y0:SortIds{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(X0:SortAExp{}), Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(X0:SortAExp{}), Lblprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps{}(Y0:SortAExps{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lbl'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(X0:SortAExp{}), Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Map'UndsUnds'MAP'Unds'Bool'Unds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'Set'UndsUnds'SET'Unds'Bool'Unds'Set'Unds'Set{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-Eqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBExp{}, \equals{SortBExp{}, R} (Val:SortBExp{}, Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(K0:SortAExp{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortBExp{}} (\and{SortBExp{}} (Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}), Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(Y0:SortAExp{}, Y1:SortAExp{})), Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-LT-'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'K'Unds'{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'Bool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'K'Unds'{}(K0:SortK{}, K1:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'UndsEqlsEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}(K0:SortId{}, K1:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}(X0:SortId{}, X1:SortAExp{}), Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}(Y0:SortId{}, Y1:SortAExp{})), Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}(\and{SortId{}} (X0:SortId{}, Y0:SortId{}), \and{SortAExp{}} (X1:SortAExp{}, Y1:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}(X0:SortId{}, X1:SortAExp{}), Lblread'LParRParUnds'IMP-SYNTAX'Unds'AExp{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}(X0:SortId{}, X1:SortAExp{}), Lblspawn'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Block{}(Y0:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-Eqls'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-Eqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds-GT-'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \equals{SortList{}, R} (Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(K1:SortList{},K2:SortList{}),K3:SortList{}),Lbl'Unds'List'Unds'{}(K1:SortList{},Lbl'Unds'List'Unds'{}(K2:SortList{},K3:SortList{}))) [assoc{}()] // associativity
  axiom{R}\equals{SortList{}, R} (Lbl'Unds'List'Unds'{}(K:SortList{},Lbl'Stop'List{}()),K:SortList{}) [unit{}()] // right unit
  axiom{R}\equals{SortList{}, R} (Lbl'Unds'List'Unds'{}(Lbl'Stop'List{}(),K:SortList{}),K:SortList{}) [unit{}()] // left unit
  axiom{R} \exists{R} (Val:SortList{}, \equals{SortList{}, R} (Val:SortList{}, Lbl'Unds'List'Unds'{}(K0:SortList{}, K1:SortList{}))) [functional{}()] // functional
  axiom{R} \equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(Lbl'Unds'Map'Unds'{}(K1:SortMap{},K2:SortMap{}),K3:SortMap{}),Lbl'Unds'Map'Unds'{}(K1:SortMap{},Lbl'Unds'Map'Unds'{}(K2:SortMap{},K3:SortMap{}))) [assoc{}()] // associativity
  axiom{R} \equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(K1:SortMap{},K2:SortMap{}),Lbl'Unds'Map'Unds'{}(K2:SortMap{},K1:SortMap{})) [comm{}()] // commutativity
  axiom{R}\equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(K:SortMap{},Lbl'Stop'Map{}()),K:SortMap{}) [unit{}()] // right unit
  axiom{R}\equals{SortMap{}, R} (Lbl'Unds'Map'Unds'{}(Lbl'Stop'Map{}(),K:SortMap{}),K:SortMap{}) [unit{}()] // left unit
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(Lbl'Unds'Set'Unds'{}(K1:SortSet{},K2:SortSet{}),K3:SortSet{}),Lbl'Unds'Set'Unds'{}(K1:SortSet{},Lbl'Unds'Set'Unds'{}(K2:SortSet{},K3:SortSet{}))) [assoc{}()] // associativity
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(K1:SortSet{},K2:SortSet{}),Lbl'Unds'Set'Unds'{}(K2:SortSet{},K1:SortSet{})) [comm{}()] // commutativity
  axiom{R} \equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(K:SortSet{},K:SortSet{}),K:SortSet{}) [idem{}()] // idempotency
  axiom{R}\equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(K:SortSet{},Lbl'Stop'Set{}()),K:SortSet{}) [unit{}()] // right unit
  axiom{R}\equals{SortSet{}, R} (Lbl'Unds'Set'Unds'{}(Lbl'Stop'Set{}(),K:SortSet{}),K:SortSet{}) [unit{}()] // left unit
  axiom{R} \equals{SortThreadCellMap{}, R} (Lbl'Unds'ThreadCellMap'Unds'{}(Lbl'Unds'ThreadCellMap'Unds'{}(K1:SortThreadCellMap{},K2:SortThreadCellMap{}),K3:SortThreadCellMap{}),Lbl'Unds'ThreadCellMap'Unds'{}(K1:SortThreadCellMap{},Lbl'Unds'ThreadCellMap'Unds'{}(K2:SortThreadCellMap{},K3:SortThreadCellMap{}))) [assoc{}()] // associativity
  axiom{R} \equals{SortThreadCellMap{}, R} (Lbl'Unds'ThreadCellMap'Unds'{}(K1:SortThreadCellMap{},K2:SortThreadCellMap{}),Lbl'Unds'ThreadCellMap'Unds'{}(K2:SortThreadCellMap{},K1:SortThreadCellMap{})) [comm{}()] // commutativity
  axiom{R}\equals{SortThreadCellMap{}, R} (Lbl'Unds'ThreadCellMap'Unds'{}(K:SortThreadCellMap{},Lbl'Stop'ThreadCellMap{}()),K:SortThreadCellMap{}) [unit{}()] // right unit
  axiom{R}\equals{SortThreadCellMap{}, R} (Lbl'Unds'ThreadCellMap'Unds'{}(Lbl'Stop'ThreadCellMap{}(),K:SortThreadCellMap{}),K:SortThreadCellMap{}) [unit{}()] // left unit
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'UndsLSqBUnds-LT-'-undef'RSqB'{}(K0:SortMap{}, K1:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, Lbl'UndsLSqBUndsRSqB'orDefault'UndsUnds'MAP'Unds'KItem'Unds'Map'Unds'KItem'Unds'KItem{}(K0:SortMap{}, K1:SortKItem{}, K2:SortKItem{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStmts{}, \equals{SortStmts{}, R} (Val:SortStmts{}, Lbl'UndsUndsUnds'IMP-SYNTAX'Unds'Stmts'Unds'Stmt'Unds'Stmts{}(K0:SortStmt{}, K1:SortStmts{}))) [functional{}()] // functional
  axiom{}\implies{SortStmts{}} (\and{SortStmts{}} (Lbl'UndsUndsUnds'IMP-SYNTAX'Unds'Stmts'Unds'Stmt'Unds'Stmts{}(X0:SortStmt{}, X1:SortStmts{}), Lbl'UndsUndsUnds'IMP-SYNTAX'Unds'Stmts'Unds'Stmt'Unds'Stmts{}(Y0:SortStmt{}, Y1:SortStmts{})), Lbl'UndsUndsUnds'IMP-SYNTAX'Unds'Stmts'Unds'Stmt'Unds'Stmts{}(\and{SortStmt{}} (X0:SortStmt{}, Y0:SortStmt{}), \and{SortStmts{}} (X1:SortStmts{}, Y1:SortStmts{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'andBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'andThenBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'impliesBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'in'UndsUnds'LIST'Unds'Bool'Unds'KItem'Unds'List{}(K0:SortKItem{}, K1:SortList{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'in'Unds'keys'LParUndsRParUnds'MAP'Unds'Bool'Unds'KItem'Unds'Map{}(K0:SortKItem{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'orBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'orElseBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, Lbl'Unds'xorBool'Unds'{}(K0:SortBool{}, K1:SortBool{}))) [functional{}()] // functional
  axiom{R} \equals{SortInt{}, R} (Lbl'Unds'xorInt'Unds'{}(K1:SortInt{},K2:SortInt{}),Lbl'Unds'xorInt'Unds'{}(K2:SortInt{},K1:SortInt{})) [comm{}()] // commutativity
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Unds'xorInt'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, Lbl'UndsPipe'-'-GT-Unds'{}(K0:SortKItem{}, K1:SortKItem{}))) [functional{}()] // functional
  axiom{R} \equals{SortInt{}, R} (Lbl'UndsPipe'Int'Unds'{}(K1:SortInt{},K2:SortInt{}),Lbl'UndsPipe'Int'Unds'{}(K2:SortInt{},K1:SortInt{})) [comm{}()] // commutativity
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'UndsPipe'Int'Unds'{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \equals{SortSet{}, R} (Lbl'UndsPipe'Set'UndsUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(K1:SortSet{},K2:SortSet{}),Lbl'UndsPipe'Set'UndsUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(K2:SortSet{},K1:SortSet{})) [comm{}()] // commutativity
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lbl'UndsPipe'Set'UndsUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStmt{}, \equals{SortStmt{}, R} (Val:SortStmt{}, Lblabort'SClnUnds'IMP-SYNTAX'Unds'Stmt{}())) [functional{}()] // functional
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblabort'SClnUnds'IMP-SYNTAX'Unds'Stmt{}(), Lblhalt'SClnUnds'IMP-SYNTAX'Unds'Stmt{}())) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblabort'SClnUnds'IMP-SYNTAX'Unds'Stmt{}(), Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblabort'SClnUnds'IMP-SYNTAX'Unds'Stmt{}(), Lblint'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'Ids{}(Y0:SortIds{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblabort'SClnUnds'IMP-SYNTAX'Unds'Stmt{}(), Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblabort'SClnUnds'IMP-SYNTAX'Unds'Stmt{}(), Lblprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps{}(Y0:SortAExps{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblabort'SClnUnds'IMP-SYNTAX'Unds'Stmt{}(), Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblabsInt'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortId{}, \equals{SortId{}, R} (Val:SortId{}, LblfreshId'LParUndsRParUnds'ID-COMMON'Unds'Id'Unds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblfreshInt'LParUndsRParUnds'INT'Unds'Int'Unds'Int{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStmt{}, \equals{SortStmt{}, R} (Val:SortStmt{}, Lblhalt'SClnUnds'IMP-SYNTAX'Unds'Stmt{}())) [functional{}()] // functional
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblhalt'SClnUnds'IMP-SYNTAX'Unds'Stmt{}(), Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblhalt'SClnUnds'IMP-SYNTAX'Unds'Stmt{}(), Lblint'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'Ids{}(Y0:SortIds{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblhalt'SClnUnds'IMP-SYNTAX'Unds'Stmt{}(), Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblhalt'SClnUnds'IMP-SYNTAX'Unds'Stmt{}(), Lblprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps{}(Y0:SortAExps{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblhalt'SClnUnds'IMP-SYNTAX'Unds'Stmt{}(), Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortStmt{}, \equals{SortStmt{}, R} (Val:SortStmt{}, Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block{}(K0:SortBExp{}, K1:SortBlock{}, K2:SortBlock{}))) [functional{}()] // functional
  axiom{}\implies{SortStmt{}} (\and{SortStmt{}} (Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortBlock{}), Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}, Y2:SortBlock{})), Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block{}(\and{SortBExp{}} (X0:SortBExp{}, Y0:SortBExp{}), \and{SortBlock{}} (X1:SortBlock{}, Y1:SortBlock{}), \and{SortBlock{}} (X2:SortBlock{}, Y2:SortBlock{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortBlock{}), Lblint'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'Ids{}(Y0:SortIds{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortBlock{}), Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortBlock{}), Lblprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps{}(Y0:SortAExps{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortBlock{}), Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortStmt{}, \equals{SortStmt{}, R} (Val:SortStmt{}, Lblint'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'Ids{}(K0:SortIds{}))) [functional{}()] // functional
  axiom{}\implies{SortStmt{}} (\and{SortStmt{}} (Lblint'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'Ids{}(X0:SortIds{}), Lblint'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'Ids{}(Y0:SortIds{})), Lblint'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'Ids{}(\and{SortIds{}} (X0:SortIds{}, Y0:SortIds{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblint'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'Ids{}(X0:SortIds{}), Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(Y0:SortAExp{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblint'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'Ids{}(X0:SortIds{}), Lblprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps{}(Y0:SortAExps{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblint'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'Ids{}(X0:SortIds{}), Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \equals{SortSet{}, R} (LblintersectSet'LParUndsCommUndsRParUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(K1:SortSet{},K2:SortSet{}),LblintersectSet'LParUndsCommUndsRParUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(K2:SortSet{},K1:SortSet{})) [comm{}()] // commutativity
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, LblintersectSet'LParUndsCommUndsRParUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(K0:SortSet{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisAExp{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisAExps{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisBExp{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisBlock{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisBool{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisBottom{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisBottoms{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisEnvCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisEnvCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisFloat{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisGeneratedCounterCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisGeneratedCounterCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisGeneratedTopCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisGeneratedTopCellFragment{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisIOError{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisIOFile{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisIOInt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisIOString{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisId{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisIdCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisIdCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisIds{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisInputCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisInputCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisInt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisK{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisKCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisKCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisKConfigVar{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisKItem{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisKResult{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisList{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisMap{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisOutputCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisOutputCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisPrintable{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisPrintables{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisSet{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisStmt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisStmts{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisStoreCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisStoreCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisStream{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisString{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisTCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisTCellFragment{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisTCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisThreadCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisThreadCellFragment{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisThreadCellMap{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisThreadsCell{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisThreadsCellFragment{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblisThreadsCellOpt{}(K0:SortK{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStmt{}, \equals{SortStmt{}, R} (Val:SortStmt{}, Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(K0:SortAExp{}))) [functional{}()] // functional
  axiom{}\implies{SortStmt{}} (\and{SortStmt{}} (Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(X0:SortAExp{}), Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(Y0:SortAExp{})), Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(\and{SortAExp{}} (X0:SortAExp{}, Y0:SortAExp{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(X0:SortAExp{}), Lblprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps{}(Y0:SortAExps{}))) [constructor{}()] // no confusion different constructors
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(X0:SortAExp{}), Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortSet{}, \equals{SortSet{}, R} (Val:SortSet{}, Lblkeys'LParUndsRParUnds'MAP'Unds'Set'Unds'Map{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(K0:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblmaxInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, LblminInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(K0:SortInt{}, K1:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortEnvCellOpt{}, \equals{SortEnvCellOpt{}, R} (Val:SortEnvCellOpt{}, LblnoEnvCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortGeneratedCounterCellOpt{}, \equals{SortGeneratedCounterCellOpt{}, R} (Val:SortGeneratedCounterCellOpt{}, LblnoGeneratedCounterCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortIdCellOpt{}, \equals{SortIdCellOpt{}, R} (Val:SortIdCellOpt{}, LblnoIdCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInputCellOpt{}, \equals{SortInputCellOpt{}, R} (Val:SortInputCellOpt{}, LblnoInputCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKCellOpt{}, \equals{SortKCellOpt{}, R} (Val:SortKCellOpt{}, LblnoKCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortOutputCellOpt{}, \equals{SortOutputCellOpt{}, R} (Val:SortOutputCellOpt{}, LblnoOutputCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStoreCellOpt{}, \equals{SortStoreCellOpt{}, R} (Val:SortStoreCellOpt{}, LblnoStoreCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortTCellOpt{}, \equals{SortTCellOpt{}, R} (Val:SortTCellOpt{}, LblnoTCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortThreadsCellOpt{}, \equals{SortThreadsCellOpt{}, R} (Val:SortThreadsCellOpt{}, LblnoThreadsCell{}())) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortBool{}, \equals{SortBool{}, R} (Val:SortBool{}, LblnotBool'Unds'{}(K0:SortBool{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStmt{}, \equals{SortStmt{}, R} (Val:SortStmt{}, Lblprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps{}(K0:SortAExps{}))) [functional{}()] // functional
  axiom{}\implies{SortStmt{}} (\and{SortStmt{}} (Lblprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps{}(X0:SortAExps{}), Lblprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps{}(Y0:SortAExps{})), Lblprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps{}(\and{SortAExps{}} (X0:SortAExps{}, Y0:SortAExps{}))) [constructor{}()] // no confusion same constructor
  axiom{}\not{SortStmt{}} (\and{SortStmt{}} (Lblprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps{}(X0:SortAExps{}), Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, Lblread'LParRParUnds'IMP-SYNTAX'Unds'AExp{}())) [functional{}()] // functional
  axiom{}\not{SortAExp{}} (\and{SortAExp{}} (Lblread'LParRParUnds'IMP-SYNTAX'Unds'AExp{}(), Lblspawn'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Block{}(Y0:SortBlock{}))) [constructor{}()] // no confusion different constructors
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, LblremoveAll'LParUndsCommUndsRParUnds'MAP'Unds'Map'Unds'Map'Unds'Set{}(K0:SortMap{}, K1:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblreplaceAll'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}, K2:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String{}(K0:SortString{}, K1:SortString{}, K2:SortString{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortKItem{}, \equals{SortKItem{}, R} (Val:SortKItem{}, LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{}\implies{SortKItem{}} (\and{SortKItem{}} (LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(X0:SortMap{}), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(Y0:SortMap{})), LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(\and{SortMap{}} (X0:SortMap{}, Y0:SortMap{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lblsize'LParUndsRParUnds'LIST'Unds'Int'Unds'List{}(K0:SortList{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lblsize'LParUndsRParUnds'MAP'Unds'Int'Unds'Map{}(K0:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lblsize'LParUndsRParUnds'SET'Unds'Int'Unds'Set{}(K0:SortSet{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortAExp{}, \equals{SortAExp{}, R} (Val:SortAExp{}, Lblspawn'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Block{}(K0:SortBlock{}))) [functional{}()] // functional
  axiom{}\implies{SortAExp{}} (\and{SortAExp{}} (Lblspawn'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Block{}(X0:SortBlock{}), Lblspawn'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Block{}(Y0:SortBlock{})), Lblspawn'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Block{}(\and{SortBlock{}} (X0:SortBlock{}, Y0:SortBlock{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortString{}, \equals{SortString{}, R} (Val:SortString{}, LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(K0:SortString{}, K1:SortInt{}, K2:SortInt{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortMap{}, \equals{SortMap{}, R} (Val:SortMap{}, LblupdateMap'LParUndsCommUndsRParUnds'MAP'Unds'Map'Unds'Map'Unds'Map{}(K0:SortMap{}, K1:SortMap{}))) [functional{}()] // functional
  axiom{R} \exists{R} (Val:SortStmt{}, \equals{SortStmt{}, R} (Val:SortStmt{}, Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block{}(K0:SortBExp{}, K1:SortBlock{}))) [functional{}()] // functional
  axiom{}\implies{SortStmt{}} (\and{SortStmt{}} (Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}), Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block{}(Y0:SortBExp{}, Y1:SortBlock{})), Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block{}(\and{SortBExp{}} (X0:SortBExp{}, Y0:SortBExp{}), \and{SortBlock{}} (X1:SortBlock{}, Y1:SortBlock{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortBlock{}, \equals{SortBlock{}, R} (Val:SortBlock{}, Lbl'LBraUndsRBraUnds'IMP-SYNTAX'Unds'Block'Unds'Stmts{}(K0:SortStmts{}))) [functional{}()] // functional
  axiom{}\implies{SortBlock{}} (\and{SortBlock{}} (Lbl'LBraUndsRBraUnds'IMP-SYNTAX'Unds'Block'Unds'Stmts{}(X0:SortStmts{}), Lbl'LBraUndsRBraUnds'IMP-SYNTAX'Unds'Block'Unds'Stmts{}(Y0:SortStmts{})), Lbl'LBraUndsRBraUnds'IMP-SYNTAX'Unds'Block'Unds'Stmts{}(\and{SortStmts{}} (X0:SortStmts{}, Y0:SortStmts{}))) [constructor{}()] // no confusion same constructor
  axiom{R} \exists{R} (Val:SortInt{}, \equals{SortInt{}, R} (Val:SortInt{}, Lbl'Tild'Int'Unds'{}(K0:SortInt{}))) [functional{}()] // functional
  axiom{} \or{SortKItem{}} (Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}(), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(X0:SortK{})), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortK{}, \exists{SortKItem{}} (X1:SortK{}, Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(X0:SortK{}, X1:SortK{}))), \or{SortKItem{}} (Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}(), \or{SortKItem{}} (Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}(), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortInt{}, \exists{SortKItem{}} (X1:SortString{}, \exists{SortKItem{}} (X2:SortString{}, Lbl'Hash'systemResult{}(X0:SortInt{}, X1:SortString{}, X2:SortString{})))), \or{SortKItem{}} (\exists{SortKItem{}} (X0:SortMap{}, LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(X0:SortMap{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortList{}, inj{SortList{}, SortKItem{}} (Val:SortList{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIdCell{}, inj{SortIdCell{}, SortKItem{}} (Val:SortIdCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortInputCellOpt{}, inj{SortInputCellOpt{}, SortKItem{}} (Val:SortInputCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortTCellOpt{}, inj{SortTCellOpt{}, SortKItem{}} (Val:SortTCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortTCellFragment{}, inj{SortTCellFragment{}, SortKItem{}} (Val:SortTCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortThreadCellFragment{}, inj{SortThreadCellFragment{}, SortKItem{}} (Val:SortThreadCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortString{}, inj{SortString{}, SortKItem{}} (Val:SortString{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKConfigVar{}, inj{SortKConfigVar{}, SortKItem{}} (Val:SortKConfigVar{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIOInt{}, inj{SortIOInt{}, SortKItem{}} (Val:SortIOInt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortTCell{}, inj{SortTCell{}, SortKItem{}} (Val:SortTCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIds{}, inj{SortIds{}, SortKItem{}} (Val:SortIds{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortBottoms{}, inj{SortBottoms{}, SortKItem{}} (Val:SortBottoms{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortPrintable{}, inj{SortPrintable{}, SortKItem{}} (Val:SortPrintable{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortPrintables{}, inj{SortPrintables{}, SortKItem{}} (Val:SortPrintables{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortBExp{}, inj{SortBExp{}, SortKItem{}} (Val:SortBExp{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortGeneratedCounterCellOpt{}, inj{SortGeneratedCounterCellOpt{}, SortKItem{}} (Val:SortGeneratedCounterCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIdCellOpt{}, inj{SortIdCellOpt{}, SortKItem{}} (Val:SortIdCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortGeneratedCounterCell{}, inj{SortGeneratedCounterCell{}, SortKItem{}} (Val:SortGeneratedCounterCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortThreadsCellFragment{}, inj{SortThreadsCellFragment{}, SortKItem{}} (Val:SortThreadsCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortInputCell{}, inj{SortInputCell{}, SortKItem{}} (Val:SortInputCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortId{}, inj{SortId{}, SortKItem{}} (Val:SortId{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortBottom{}, inj{SortBottom{}, SortKItem{}} (Val:SortBottom{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStream{}, inj{SortStream{}, SortKItem{}} (Val:SortStream{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortBool{}, inj{SortBool{}, SortKItem{}} (Val:SortBool{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKCell{}, inj{SortKCell{}, SortKItem{}} (Val:SortKCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStoreCell{}, inj{SortStoreCell{}, SortKItem{}} (Val:SortStoreCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIOFile{}, inj{SortIOFile{}, SortKItem{}} (Val:SortIOFile{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortOutputCell{}, inj{SortOutputCell{}, SortKItem{}} (Val:SortOutputCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStoreCellOpt{}, inj{SortStoreCellOpt{}, SortKItem{}} (Val:SortStoreCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortThreadCell{}, inj{SortThreadCell{}, SortKItem{}} (Val:SortThreadCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortThreadsCellOpt{}, inj{SortThreadsCellOpt{}, SortKItem{}} (Val:SortThreadsCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKResult{}, inj{SortKResult{}, SortKItem{}} (Val:SortKResult{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStmts{}, inj{SortStmts{}, SortKItem{}} (Val:SortStmts{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortMap{}, inj{SortMap{}, SortKItem{}} (Val:SortMap{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortOutputCellOpt{}, inj{SortOutputCellOpt{}, SortKItem{}} (Val:SortOutputCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortEnvCell{}, inj{SortEnvCell{}, SortKItem{}} (Val:SortEnvCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortKCellOpt{}, inj{SortKCellOpt{}, SortKItem{}} (Val:SortKCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortStmt{}, inj{SortStmt{}, SortKItem{}} (Val:SortStmt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortThreadCellMap{}, inj{SortThreadCellMap{}, SortKItem{}} (Val:SortThreadCellMap{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortInt{}, inj{SortInt{}, SortKItem{}} (Val:SortInt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortFloat{}, inj{SortFloat{}, SortKItem{}} (Val:SortFloat{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortThreadsCell{}, inj{SortThreadsCell{}, SortKItem{}} (Val:SortThreadsCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortGeneratedTopCell{}, inj{SortGeneratedTopCell{}, SortKItem{}} (Val:SortGeneratedTopCell{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortEnvCellOpt{}, inj{SortEnvCellOpt{}, SortKItem{}} (Val:SortEnvCellOpt{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortBlock{}, inj{SortBlock{}, SortKItem{}} (Val:SortBlock{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortAExps{}, inj{SortAExps{}, SortKItem{}} (Val:SortAExps{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortSet{}, inj{SortSet{}, SortKItem{}} (Val:SortSet{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIOString{}, inj{SortIOString{}, SortKItem{}} (Val:SortIOString{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortGeneratedTopCellFragment{}, inj{SortGeneratedTopCellFragment{}, SortKItem{}} (Val:SortGeneratedTopCellFragment{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortIOError{}, inj{SortIOError{}, SortKItem{}} (Val:SortIOError{})), \or{SortKItem{}} (\exists{SortKItem{}} (Val:SortAExp{}, inj{SortAExp{}, SortKItem{}} (Val:SortAExp{})), \bottom{SortKItem{}}())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) [constructor{}()] // no junk
  axiom{} \bottom{SortList{}}() [constructor{}()] // no junk
  axiom{} \or{SortIdCell{}} (\exists{SortIdCell{}} (X0:SortInt{}, Lbl'-LT-'id'-GT-'{}(X0:SortInt{})), \bottom{SortIdCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortInputCellOpt{}} (LblnoInputCell{}(), \or{SortInputCellOpt{}} (\exists{SortInputCellOpt{}} (Val:SortInputCell{}, inj{SortInputCell{}, SortInputCellOpt{}} (Val:SortInputCell{})), \bottom{SortInputCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortTCellOpt{}} (LblnoTCell{}(), \or{SortTCellOpt{}} (\exists{SortTCellOpt{}} (Val:SortTCell{}, inj{SortTCell{}, SortTCellOpt{}} (Val:SortTCell{})), \bottom{SortTCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortTCellFragment{}} (\exists{SortTCellFragment{}} (X0:SortThreadsCellOpt{}, \exists{SortTCellFragment{}} (X1:SortStoreCellOpt{}, \exists{SortTCellFragment{}} (X2:SortInputCellOpt{}, \exists{SortTCellFragment{}} (X3:SortOutputCellOpt{}, Lbl'-LT-'T'-GT-'-fragment{}(X0:SortThreadsCellOpt{}, X1:SortStoreCellOpt{}, X2:SortInputCellOpt{}, X3:SortOutputCellOpt{}))))), \bottom{SortTCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortThreadCellFragment{}} (\exists{SortThreadCellFragment{}} (X0:SortIdCellOpt{}, \exists{SortThreadCellFragment{}} (X1:SortKCellOpt{}, \exists{SortThreadCellFragment{}} (X2:SortEnvCellOpt{}, Lbl'-LT-'thread'-GT-'-fragment{}(X0:SortIdCellOpt{}, X1:SortKCellOpt{}, X2:SortEnvCellOpt{})))), \bottom{SortThreadCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortString{}} (\top{SortString{}}(), \bottom{SortString{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortKConfigVar{}} (\top{SortKConfigVar{}}(), \bottom{SortKConfigVar{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortIOInt{}} (\exists{SortIOInt{}} (Val:SortInt{}, inj{SortInt{}, SortIOInt{}} (Val:SortInt{})), \or{SortIOInt{}} (\exists{SortIOInt{}} (Val:SortIOError{}, inj{SortIOError{}, SortIOInt{}} (Val:SortIOError{})), \bottom{SortIOInt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortTCell{}} (\exists{SortTCell{}} (X0:SortThreadsCell{}, \exists{SortTCell{}} (X1:SortStoreCell{}, \exists{SortTCell{}} (X2:SortInputCell{}, \exists{SortTCell{}} (X3:SortOutputCell{}, Lbl'-LT-'T'-GT-'{}(X0:SortThreadsCell{}, X1:SortStoreCell{}, X2:SortInputCell{}, X3:SortOutputCell{}))))), \bottom{SortTCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortIds{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids'QuotRBraUnds'Ids{}(), \or{SortIds{}} (\exists{SortIds{}} (X0:SortId{}, \exists{SortIds{}} (X1:SortIds{}, Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(X0:SortId{}, X1:SortIds{}))), \or{SortIds{}} (\exists{SortIds{}} (Val:SortBottoms{}, inj{SortBottoms{}, SortIds{}} (Val:SortBottoms{})), \bottom{SortIds{}}()))) [constructor{}()] // no junk
  axiom{} \or{SortBottoms{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Bottoms'Unds'Bottom'Unds'Bottoms'QuotRBraUnds'Bottoms{}(), \or{SortBottoms{}} (\exists{SortBottoms{}} (X0:SortBottom{}, \exists{SortBottoms{}} (X1:SortBottoms{}, Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Bottoms'Unds'Bottom'Unds'Bottoms{}(X0:SortBottom{}, X1:SortBottoms{}))), \bottom{SortBottoms{}}())) [constructor{}()] // no junk
  axiom{} \or{SortPrintable{}} (\exists{SortPrintable{}} (Val:SortString{}, inj{SortString{}, SortPrintable{}} (Val:SortString{})), \or{SortPrintable{}} (\exists{SortPrintable{}} (Val:SortInt{}, inj{SortInt{}, SortPrintable{}} (Val:SortInt{})), \bottom{SortPrintable{}}())) [constructor{}()] // no junk
  axiom{} \or{SortPrintables{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Printables'Unds'Printable'Unds'Printables'QuotRBraUnds'Printables{}(), \or{SortPrintables{}} (\exists{SortPrintables{}} (X0:SortPrintable{}, \exists{SortPrintables{}} (X1:SortPrintables{}, Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Printables'Unds'Printable'Unds'Printables{}(X0:SortPrintable{}, X1:SortPrintables{}))), \or{SortPrintables{}} (\exists{SortPrintables{}} (Val:SortBottoms{}, inj{SortBottoms{}, SortPrintables{}} (Val:SortBottoms{})), \bottom{SortPrintables{}}()))) [constructor{}()] // no junk
  axiom{} \or{SortBExp{}} (\exists{SortBExp{}} (X0:SortBExp{}, Lbl'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp{}(X0:SortBExp{})), \or{SortBExp{}} (\exists{SortBExp{}} (X0:SortBExp{}, \exists{SortBExp{}} (X1:SortBExp{}, Lbl'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp{}(X0:SortBExp{}, X1:SortBExp{}))), \or{SortBExp{}} (\exists{SortBExp{}} (X0:SortAExp{}, \exists{SortBExp{}} (X1:SortAExp{}, Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}))), \or{SortBExp{}} (\exists{SortBExp{}} (Val:SortBool{}, inj{SortBool{}, SortBExp{}} (Val:SortBool{})), \bottom{SortBExp{}}())))) [constructor{}()] // no junk
  axiom{} \or{SortGeneratedCounterCellOpt{}} (LblnoGeneratedCounterCell{}(), \or{SortGeneratedCounterCellOpt{}} (\exists{SortGeneratedCounterCellOpt{}} (Val:SortGeneratedCounterCell{}, inj{SortGeneratedCounterCell{}, SortGeneratedCounterCellOpt{}} (Val:SortGeneratedCounterCell{})), \bottom{SortGeneratedCounterCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortIdCellOpt{}} (LblnoIdCell{}(), \or{SortIdCellOpt{}} (\exists{SortIdCellOpt{}} (Val:SortIdCell{}, inj{SortIdCell{}, SortIdCellOpt{}} (Val:SortIdCell{})), \bottom{SortIdCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortGeneratedCounterCell{}} (\exists{SortGeneratedCounterCell{}} (X0:SortInt{}, Lbl'-LT-'generatedCounter'-GT-'{}(X0:SortInt{})), \bottom{SortGeneratedCounterCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortThreadsCellFragment{}} (\exists{SortThreadsCellFragment{}} (X0:SortThreadCellMap{}, Lbl'-LT-'threads'-GT-'-fragment{}(X0:SortThreadCellMap{})), \bottom{SortThreadsCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortInputCell{}} (\exists{SortInputCell{}} (X0:SortList{}, Lbl'-LT-'input'-GT-'{}(X0:SortList{})), \bottom{SortInputCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortId{}} (\top{SortId{}}(), \bottom{SortId{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \bottom{SortBottom{}}() [constructor{}()] // no junk
  axiom{} \or{SortStream{}} (\exists{SortStream{}} (X0:SortK{}, Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(X0:SortK{})), \or{SortStream{}} (\exists{SortStream{}} (X0:SortInt{}, Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(X0:SortInt{})), \or{SortStream{}} (\exists{SortStream{}} (X0:SortInt{}, Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(X0:SortInt{})), \or{SortStream{}} (\exists{SortStream{}} (X0:SortString{}, \exists{SortStream{}} (X1:SortString{}, Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(X0:SortString{}, X1:SortString{}))), \bottom{SortStream{}}())))) [constructor{}()] // no junk
  axiom{} \or{SortBool{}} (\top{SortBool{}}(), \bottom{SortBool{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortKCell{}} (\exists{SortKCell{}} (X0:SortK{}, Lbl'-LT-'k'-GT-'{}(X0:SortK{})), \bottom{SortKCell{}}()) [constructor{}()] // no junk
  axiom{} \bottom{SortK{}}() [constructor{}()] // no junk
  axiom{} \or{SortStoreCell{}} (\exists{SortStoreCell{}} (X0:SortMap{}, Lbl'-LT-'store'-GT-'{}(X0:SortMap{})), \bottom{SortStoreCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortIOFile{}} (\exists{SortIOFile{}} (X0:SortString{}, \exists{SortIOFile{}} (X1:SortInt{}, Lbl'Hash'tempFile{}(X0:SortString{}, X1:SortInt{}))), \or{SortIOFile{}} (\exists{SortIOFile{}} (Val:SortIOError{}, inj{SortIOError{}, SortIOFile{}} (Val:SortIOError{})), \bottom{SortIOFile{}}())) [constructor{}()] // no junk
  axiom{} \or{SortOutputCell{}} (\exists{SortOutputCell{}} (X0:SortList{}, Lbl'-LT-'output'-GT-'{}(X0:SortList{})), \bottom{SortOutputCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortStoreCellOpt{}} (LblnoStoreCell{}(), \or{SortStoreCellOpt{}} (\exists{SortStoreCellOpt{}} (Val:SortStoreCell{}, inj{SortStoreCell{}, SortStoreCellOpt{}} (Val:SortStoreCell{})), \bottom{SortStoreCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortThreadCell{}} (\exists{SortThreadCell{}} (X0:SortIdCell{}, \exists{SortThreadCell{}} (X1:SortKCell{}, \exists{SortThreadCell{}} (X2:SortEnvCell{}, Lbl'-LT-'thread'-GT-'{}(X0:SortIdCell{}, X1:SortKCell{}, X2:SortEnvCell{})))), \bottom{SortThreadCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortThreadsCellOpt{}} (LblnoThreadsCell{}(), \or{SortThreadsCellOpt{}} (\exists{SortThreadsCellOpt{}} (Val:SortThreadsCell{}, inj{SortThreadsCell{}, SortThreadsCellOpt{}} (Val:SortThreadsCell{})), \bottom{SortThreadsCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortKResult{}} (\exists{SortKResult{}} (Val:SortString{}, inj{SortString{}, SortKResult{}} (Val:SortString{})), \or{SortKResult{}} (\exists{SortKResult{}} (Val:SortBottoms{}, inj{SortBottoms{}, SortKResult{}} (Val:SortBottoms{})), \or{SortKResult{}} (\exists{SortKResult{}} (Val:SortPrintables{}, inj{SortPrintables{}, SortKResult{}} (Val:SortPrintables{})), \or{SortKResult{}} (\exists{SortKResult{}} (Val:SortBool{}, inj{SortBool{}, SortKResult{}} (Val:SortBool{})), \or{SortKResult{}} (\exists{SortKResult{}} (Val:SortInt{}, inj{SortInt{}, SortKResult{}} (Val:SortInt{})), \bottom{SortKResult{}}()))))) [constructor{}()] // no junk
  axiom{} \or{SortStmts{}} (Lbl'Stop'List'LBraQuotUndsUndsUnds'IMP-SYNTAX'Unds'Stmts'Unds'Stmt'Unds'Stmts'QuotRBraUnds'Stmts{}(), \or{SortStmts{}} (\exists{SortStmts{}} (X0:SortStmt{}, \exists{SortStmts{}} (X1:SortStmts{}, Lbl'UndsUndsUnds'IMP-SYNTAX'Unds'Stmts'Unds'Stmt'Unds'Stmts{}(X0:SortStmt{}, X1:SortStmts{}))), \bottom{SortStmts{}}())) [constructor{}()] // no junk
  axiom{} \bottom{SortMap{}}() [constructor{}()] // no junk
  axiom{} \or{SortOutputCellOpt{}} (LblnoOutputCell{}(), \or{SortOutputCellOpt{}} (\exists{SortOutputCellOpt{}} (Val:SortOutputCell{}, inj{SortOutputCell{}, SortOutputCellOpt{}} (Val:SortOutputCell{})), \bottom{SortOutputCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortEnvCell{}} (\exists{SortEnvCell{}} (X0:SortMap{}, Lbl'-LT-'env'-GT-'{}(X0:SortMap{})), \bottom{SortEnvCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortKCellOpt{}} (LblnoKCell{}(), \or{SortKCellOpt{}} (\exists{SortKCellOpt{}} (Val:SortKCell{}, inj{SortKCell{}, SortKCellOpt{}} (Val:SortKCell{})), \bottom{SortKCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortStmt{}} (\exists{SortStmt{}} (X0:SortAExp{}, Lbl'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(X0:SortAExp{})), \or{SortStmt{}} (Lblabort'SClnUnds'IMP-SYNTAX'Unds'Stmt{}(), \or{SortStmt{}} (Lblhalt'SClnUnds'IMP-SYNTAX'Unds'Stmt{}(), \or{SortStmt{}} (\exists{SortStmt{}} (X0:SortBExp{}, \exists{SortStmt{}} (X1:SortBlock{}, \exists{SortStmt{}} (X2:SortBlock{}, Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}, X2:SortBlock{})))), \or{SortStmt{}} (\exists{SortStmt{}} (X0:SortIds{}, Lblint'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'Ids{}(X0:SortIds{})), \or{SortStmt{}} (\exists{SortStmt{}} (X0:SortAExp{}, Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(X0:SortAExp{})), \or{SortStmt{}} (\exists{SortStmt{}} (X0:SortAExps{}, Lblprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps{}(X0:SortAExps{})), \or{SortStmt{}} (\exists{SortStmt{}} (X0:SortBExp{}, \exists{SortStmt{}} (X1:SortBlock{}, Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block{}(X0:SortBExp{}, X1:SortBlock{}))), \or{SortStmt{}} (\exists{SortStmt{}} (Val:SortBlock{}, inj{SortBlock{}, SortStmt{}} (Val:SortBlock{})), \bottom{SortStmt{}}()))))))))) [constructor{}()] // no junk
  axiom{} \or{SortThreadCellMap{}} (\exists{SortThreadCellMap{}} (Val:SortThreadCell{}, inj{SortThreadCell{}, SortThreadCellMap{}} (Val:SortThreadCell{})), \bottom{SortThreadCellMap{}}()) [constructor{}()] // no junk
  axiom{} \or{SortInt{}} (\top{SortInt{}}(), \bottom{SortInt{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortFloat{}} (\top{SortFloat{}}(), \bottom{SortFloat{}}()) [constructor{}()] // no junk (TODO: fix bug with \dv)
  axiom{} \or{SortThreadsCell{}} (\exists{SortThreadsCell{}} (X0:SortThreadCellMap{}, Lbl'-LT-'threads'-GT-'{}(X0:SortThreadCellMap{})), \bottom{SortThreadsCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortGeneratedTopCell{}} (\exists{SortGeneratedTopCell{}} (X0:SortTCell{}, \exists{SortGeneratedTopCell{}} (X1:SortGeneratedCounterCell{}, Lbl'-LT-'generatedTop'-GT-'{}(X0:SortTCell{}, X1:SortGeneratedCounterCell{}))), \bottom{SortGeneratedTopCell{}}()) [constructor{}()] // no junk
  axiom{} \or{SortEnvCellOpt{}} (LblnoEnvCell{}(), \or{SortEnvCellOpt{}} (\exists{SortEnvCellOpt{}} (Val:SortEnvCell{}, inj{SortEnvCell{}, SortEnvCellOpt{}} (Val:SortEnvCell{})), \bottom{SortEnvCellOpt{}}())) [constructor{}()] // no junk
  axiom{} \or{SortBlock{}} (\exists{SortBlock{}} (X0:SortStmts{}, Lbl'LBraUndsRBraUnds'IMP-SYNTAX'Unds'Block'Unds'Stmts{}(X0:SortStmts{})), \bottom{SortBlock{}}()) [constructor{}()] // no junk
  axiom{} \or{SortAExps{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps'QuotRBraUnds'AExps{}(), \or{SortAExps{}} (\exists{SortAExps{}} (X0:SortAExp{}, \exists{SortAExps{}} (X1:SortAExps{}, Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(X0:SortAExp{}, X1:SortAExps{}))), \or{SortAExps{}} (\exists{SortAExps{}} (Val:SortIds{}, inj{SortIds{}, SortAExps{}} (Val:SortIds{})), \or{SortAExps{}} (\exists{SortAExps{}} (Val:SortBottoms{}, inj{SortBottoms{}, SortAExps{}} (Val:SortBottoms{})), \or{SortAExps{}} (\exists{SortAExps{}} (Val:SortPrintables{}, inj{SortPrintables{}, SortAExps{}} (Val:SortPrintables{})), \bottom{SortAExps{}}()))))) [constructor{}()] // no junk
  axiom{} \bottom{SortSet{}}() [constructor{}()] // no junk
  axiom{} \or{SortIOString{}} (\exists{SortIOString{}} (Val:SortString{}, inj{SortString{}, SortIOString{}} (Val:SortString{})), \or{SortIOString{}} (\exists{SortIOString{}} (Val:SortIOError{}, inj{SortIOError{}, SortIOString{}} (Val:SortIOError{})), \bottom{SortIOString{}}())) [constructor{}()] // no junk
  axiom{} \or{SortGeneratedTopCellFragment{}} (\exists{SortGeneratedTopCellFragment{}} (X0:SortTCellOpt{}, \exists{SortGeneratedTopCellFragment{}} (X1:SortGeneratedCounterCellOpt{}, Lbl'-LT-'generatedTop'-GT-'-fragment{}(X0:SortTCellOpt{}, X1:SortGeneratedCounterCellOpt{}))), \bottom{SortGeneratedTopCellFragment{}}()) [constructor{}()] // no junk
  axiom{} \or{SortIOError{}} (Lbl'Hash'E2BIG{}(), \or{SortIOError{}} (Lbl'Hash'EACCES{}(), \or{SortIOError{}} (Lbl'Hash'EADDRINUSE{}(), \or{SortIOError{}} (Lbl'Hash'EADDRNOTAVAIL{}(), \or{SortIOError{}} (Lbl'Hash'EAFNOSUPPORT{}(), \or{SortIOError{}} (Lbl'Hash'EAGAIN{}(), \or{SortIOError{}} (Lbl'Hash'EALREADY{}(), \or{SortIOError{}} (Lbl'Hash'EBADF{}(), \or{SortIOError{}} (Lbl'Hash'EBUSY{}(), \or{SortIOError{}} (Lbl'Hash'ECHILD{}(), \or{SortIOError{}} (Lbl'Hash'ECONNABORTED{}(), \or{SortIOError{}} (Lbl'Hash'ECONNREFUSED{}(), \or{SortIOError{}} (Lbl'Hash'ECONNRESET{}(), \or{SortIOError{}} (Lbl'Hash'EDEADLK{}(), \or{SortIOError{}} (Lbl'Hash'EDESTADDRREQ{}(), \or{SortIOError{}} (Lbl'Hash'EDOM{}(), \or{SortIOError{}} (Lbl'Hash'EEXIST{}(), \or{SortIOError{}} (Lbl'Hash'EFAULT{}(), \or{SortIOError{}} (Lbl'Hash'EFBIG{}(), \or{SortIOError{}} (Lbl'Hash'EHOSTDOWN{}(), \or{SortIOError{}} (Lbl'Hash'EHOSTUNREACH{}(), \or{SortIOError{}} (Lbl'Hash'EINPROGRESS{}(), \or{SortIOError{}} (Lbl'Hash'EINTR{}(), \or{SortIOError{}} (Lbl'Hash'EINVAL{}(), \or{SortIOError{}} (Lbl'Hash'EIO{}(), \or{SortIOError{}} (Lbl'Hash'EISCONN{}(), \or{SortIOError{}} (Lbl'Hash'EISDIR{}(), \or{SortIOError{}} (Lbl'Hash'ELOOP{}(), \or{SortIOError{}} (Lbl'Hash'EMFILE{}(), \or{SortIOError{}} (Lbl'Hash'EMLINK{}(), \or{SortIOError{}} (Lbl'Hash'EMSGSIZE{}(), \or{SortIOError{}} (Lbl'Hash'ENAMETOOLONG{}(), \or{SortIOError{}} (Lbl'Hash'ENETDOWN{}(), \or{SortIOError{}} (Lbl'Hash'ENETRESET{}(), \or{SortIOError{}} (Lbl'Hash'ENETUNREACH{}(), \or{SortIOError{}} (Lbl'Hash'ENFILE{}(), \or{SortIOError{}} (Lbl'Hash'ENOBUFS{}(), \or{SortIOError{}} (Lbl'Hash'ENODEV{}(), \or{SortIOError{}} (Lbl'Hash'ENOENT{}(), \or{SortIOError{}} (Lbl'Hash'ENOEXEC{}(), \or{SortIOError{}} (Lbl'Hash'ENOLCK{}(), \or{SortIOError{}} (Lbl'Hash'ENOMEM{}(), \or{SortIOError{}} (Lbl'Hash'ENOPROTOOPT{}(), \or{SortIOError{}} (Lbl'Hash'ENOSPC{}(), \or{SortIOError{}} (Lbl'Hash'ENOSYS{}(), \or{SortIOError{}} (Lbl'Hash'ENOTCONN{}(), \or{SortIOError{}} (Lbl'Hash'ENOTDIR{}(), \or{SortIOError{}} (Lbl'Hash'ENOTEMPTY{}(), \or{SortIOError{}} (Lbl'Hash'ENOTSOCK{}(), \or{SortIOError{}} (Lbl'Hash'ENOTTY{}(), \or{SortIOError{}} (Lbl'Hash'ENXIO{}(), \or{SortIOError{}} (Lbl'Hash'EOF{}(), \or{SortIOError{}} (Lbl'Hash'EOPNOTSUPP{}(), \or{SortIOError{}} (Lbl'Hash'EOVERFLOW{}(), \or{SortIOError{}} (Lbl'Hash'EPERM{}(), \or{SortIOError{}} (Lbl'Hash'EPFNOSUPPORT{}(), \or{SortIOError{}} (Lbl'Hash'EPIPE{}(), \or{SortIOError{}} (Lbl'Hash'EPROTONOSUPPORT{}(), \or{SortIOError{}} (Lbl'Hash'EPROTOTYPE{}(), \or{SortIOError{}} (Lbl'Hash'ERANGE{}(), \or{SortIOError{}} (Lbl'Hash'EROFS{}(), \or{SortIOError{}} (Lbl'Hash'ESHUTDOWN{}(), \or{SortIOError{}} (Lbl'Hash'ESOCKTNOSUPPORT{}(), \or{SortIOError{}} (Lbl'Hash'ESPIPE{}(), \or{SortIOError{}} (Lbl'Hash'ESRCH{}(), \or{SortIOError{}} (Lbl'Hash'ETIMEDOUT{}(), \or{SortIOError{}} (Lbl'Hash'ETOOMANYREFS{}(), \or{SortIOError{}} (Lbl'Hash'EWOULDBLOCK{}(), \or{SortIOError{}} (Lbl'Hash'EXDEV{}(), \or{SortIOError{}} (\exists{SortIOError{}} (X0:SortString{}, Lbl'Hash'noParse{}(X0:SortString{})), \or{SortIOError{}} (\exists{SortIOError{}} (X0:SortInt{}, Lbl'Hash'unknownIOError{}(X0:SortInt{})), \bottom{SortIOError{}}()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) [constructor{}()] // no junk
  axiom{} \or{SortAExp{}} (\exists{SortAExp{}} (X0:SortId{}, Lbl'PlusPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id{}(X0:SortId{})), \or{SortAExp{}} (\exists{SortAExp{}} (X0:SortInt{}, Lbl-'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Int{}(X0:SortInt{})), \or{SortAExp{}} (\exists{SortAExp{}} (X0:SortAExp{}, \exists{SortAExp{}} (X1:SortAExp{}, Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}))), \or{SortAExp{}} (\exists{SortAExp{}} (X0:SortAExp{}, \exists{SortAExp{}} (X1:SortAExp{}, Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(X0:SortAExp{}, X1:SortAExp{}))), \or{SortAExp{}} (\exists{SortAExp{}} (X0:SortId{}, \exists{SortAExp{}} (X1:SortAExp{}, Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}(X0:SortId{}, X1:SortAExp{}))), \or{SortAExp{}} (Lblread'LParRParUnds'IMP-SYNTAX'Unds'AExp{}(), \or{SortAExp{}} (\exists{SortAExp{}} (X0:SortBlock{}, Lblspawn'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Block{}(X0:SortBlock{})), \or{SortAExp{}} (\exists{SortAExp{}} (Val:SortString{}, inj{SortString{}, SortAExp{}} (Val:SortString{})), \or{SortAExp{}} (\exists{SortAExp{}} (Val:SortPrintable{}, inj{SortPrintable{}, SortAExp{}} (Val:SortPrintable{})), \or{SortAExp{}} (\exists{SortAExp{}} (Val:SortId{}, inj{SortId{}, SortAExp{}} (Val:SortId{})), \or{SortAExp{}} (\exists{SortAExp{}} (Val:SortInt{}, inj{SortInt{}, SortAExp{}} (Val:SortInt{})), \bottom{SortAExp{}}()))))))))))) [constructor{}()] // no junk
  axiom{R} \equals{SortAExps{}, R} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps'QuotRBraUnds'AExps{}(), inj{SortIds{}, SortAExps{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids'QuotRBraUnds'Ids{}())) [overload{}(Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps'QuotRBraUnds'AExps{}(), Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids'QuotRBraUnds'Ids{}())] // overloaded production
  axiom{R} \equals{SortAExps{}, R} (Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(inj{SortId{}, SortAExp{}} (K0:SortId{}),inj{SortIds{}, SortAExps{}} (K1:SortIds{})), inj{SortIds{}, SortAExps{}} (Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(K0:SortId{},K1:SortIds{}))) [overload{}(Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(), Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}())] // overloaded production
  axiom{R} \equals{SortAExps{}, R} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps'QuotRBraUnds'AExps{}(), inj{SortPrintables{}, SortAExps{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Printables'Unds'Printable'Unds'Printables'QuotRBraUnds'Printables{}())) [overload{}(Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps'QuotRBraUnds'AExps{}(), Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Printables'Unds'Printable'Unds'Printables'QuotRBraUnds'Printables{}())] // overloaded production
  axiom{R} \equals{SortIds{}, R} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids'QuotRBraUnds'Ids{}(), inj{SortBottoms{}, SortIds{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Bottoms'Unds'Bottom'Unds'Bottoms'QuotRBraUnds'Bottoms{}())) [overload{}(Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids'QuotRBraUnds'Ids{}(), Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Bottoms'Unds'Bottom'Unds'Bottoms'QuotRBraUnds'Bottoms{}())] // overloaded production
  axiom{R} \equals{SortAExps{}, R} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps'QuotRBraUnds'AExps{}(), inj{SortBottoms{}, SortAExps{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Bottoms'Unds'Bottom'Unds'Bottoms'QuotRBraUnds'Bottoms{}())) [overload{}(Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps'QuotRBraUnds'AExps{}(), Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Bottoms'Unds'Bottom'Unds'Bottoms'QuotRBraUnds'Bottoms{}())] // overloaded production
  axiom{R} \equals{SortPrintables{}, R} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Printables'Unds'Printable'Unds'Printables'QuotRBraUnds'Printables{}(), inj{SortBottoms{}, SortPrintables{}} (Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Bottoms'Unds'Bottom'Unds'Bottoms'QuotRBraUnds'Bottoms{}())) [overload{}(Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Printables'Unds'Printable'Unds'Printables'QuotRBraUnds'Printables{}(), Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Bottoms'Unds'Bottom'Unds'Bottoms'QuotRBraUnds'Bottoms{}())] // overloaded production
  axiom{R} \equals{SortAExps{}, R} (Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(inj{SortPrintable{}, SortAExp{}} (K0:SortPrintable{}),inj{SortPrintables{}, SortAExps{}} (K1:SortPrintables{})), inj{SortPrintables{}, SortAExps{}} (Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Printables'Unds'Printable'Unds'Printables{}(K0:SortPrintable{},K1:SortPrintables{}))) [overload{}(Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(), Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Printables'Unds'Printable'Unds'Printables{}())] // overloaded production

// rules
// rule `#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`{K}(C,B1,_Gen0)=>B1 requires C ensures #token("true","Bool") [UNIQUE_ID(2b32069ac3f589174502fa507ebc88fab7c902854c0a9baa8ab09beb551232e2), org.kframework.attributes.Location(Location(2222,8,2222,59)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        VarC:SortBool{},
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarC:SortBool{}
          ),\and{R} (
          \in{SortK{}, R} (
            X1:SortK{},
            VarB1:SortK{}
          ),\and{R} (
          \in{SortK{}, R} (
            X2:SortK{},
            Var'Unds'Gen0:SortK{}
          ),
          \top{R} ()
        )))),
    \equals{SortK{},R} (
      Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL-SYNTAX'Unds'Sort'Unds'Bool'Unds'Sort'Unds'Sort{SortK{}}(X0:SortBool{},X1:SortK{},X2:SortK{}),
     \and{SortK{}} (
       VarB1:SortK{},
        \top{SortK{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2222,8,2222,59)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("2b32069ac3f589174502fa507ebc88fab7c902854c0a9baa8ab09beb551232e2")]

// rule `#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`{K}(C,_Gen0,B2)=>B2 requires `notBool_`(C) ensures #token("true","Bool") [UNIQUE_ID(651bff3fa53d464ac7dd7aa77e1ef6071e14c959eb6df97baa325e2ad300daaa), org.kframework.attributes.Location(Location(2223,8,2223,67)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        LblnotBool'Unds'{}(VarC:SortBool{}),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarC:SortBool{}
          ),\and{R} (
          \in{SortK{}, R} (
            X1:SortK{},
            Var'Unds'Gen0:SortK{}
          ),\and{R} (
          \in{SortK{}, R} (
            X2:SortK{},
            VarB2:SortK{}
          ),
          \top{R} ()
        )))),
    \equals{SortK{},R} (
      Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL-SYNTAX'Unds'Sort'Unds'Bool'Unds'Sort'Unds'Sort{SortK{}}(X0:SortBool{},X1:SortK{},X2:SortK{}),
     \and{SortK{}} (
       VarB2:SortK{},
        \top{SortK{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2223,8,2223,67)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("651bff3fa53d464ac7dd7aa77e1ef6071e14c959eb6df97baa325e2ad300daaa")]

// rule `#open(_)_K-IO_IOInt_String`(S)=>`#open(_,_)_K-IO_IOInt_String_String`(S,#token("\"r+\"","String")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7ad2779cd54b9009119458217cae5138026cc4ff244e54c28e64db21100f63d9), org.kframework.attributes.Location(Location(2410,8,2410,48)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarS:SortString{}
          ),
          \top{R} ()
        )),
    \equals{SortIOInt{},R} (
      Lbl'Hash'open'LParUndsRParUnds'K-IO'Unds'IOInt'Unds'String{}(X0:SortString{}),
     \and{SortIOInt{}} (
       Lbl'Hash'open'LParUndsCommUndsRParUnds'K-IO'Unds'IOInt'Unds'String'Unds'String{}(VarS:SortString{},\dv{SortString{}}("r+")),
        \top{SortIOInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2410,8,2410,48)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("7ad2779cd54b9009119458217cae5138026cc4ff244e54c28e64db21100f63d9")]

// rule `#stderr_K-IO_Int`(.KList)=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(75e0a8082acda4cf1e29caa6aaafb7f9a421e16421a41f2006943d6fab17a162), org.kframework.attributes.Location(Location(2507,8,2507,20)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortInt{},R} (
      Lbl'Hash'stderr'Unds'K-IO'Unds'Int{}(),
     \and{SortInt{}} (
       \dv{SortInt{}}("2"),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2507,8,2507,20)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("75e0a8082acda4cf1e29caa6aaafb7f9a421e16421a41f2006943d6fab17a162")]

// rule `#stdin_K-IO_Int`(.KList)=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c7ffdc9908c28a954521816d680f4e5ec44a679c7231a8dd09d4700f50b6d8c3), org.kframework.attributes.Location(Location(2505,8,2505,19)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortInt{},R} (
      Lbl'Hash'stdin'Unds'K-IO'Unds'Int{}(),
     \and{SortInt{}} (
       \dv{SortInt{}}("0"),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2505,8,2505,19)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("c7ffdc9908c28a954521816d680f4e5ec44a679c7231a8dd09d4700f50b6d8c3")]

// rule `#stdout_K-IO_Int`(.KList)=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4ad4f379ff9db687ff9dfd1b15052edbcd3342a2ed262ecdd38c769e177a592c), org.kframework.attributes.Location(Location(2506,8,2506,20)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortInt{},R} (
      Lbl'Hash'stdout'Unds'K-IO'Unds'Int{}(),
     \and{SortInt{}} (
       \dv{SortInt{}}("1"),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2506,8,2506,20)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("4ad4f379ff9db687ff9dfd1b15052edbcd3342a2ed262ecdd38c769e177a592c")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen1,`<thread>`(_Gen1,`<k>`(inj{AExp,KItem}(`read()_IMP-SYNTAX_AExp`(.KList))~>_DotVar5),_Gen2)),_DotVar3)) #as _Gen6,_Gen3,`<input>`(`_List_`(`_List_`(`.List`(.KList),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(_Gen0))))),_DotVar2)),_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(_Gen6,_Gen3,`<input>`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#parseInput(_,_)_K-IO_Stream_String_String`(#token("\"Int\"","String"),#token("\" \\n\\t\\r\"","String")))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(_Gen0))))),_DotVar2)),_Gen4),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(48cac44ee0f81b500fbcc3d4844acd60710bd67b8aca8cb323d3a1c53f1d9e90), org.kframework.attributes.Location(Location(67,8,68,52)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), transition]
  alias rule6LHS{}(SortGeneratedCounterCell{},SortList{},SortThreadCellMap{},SortK{},SortString{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortOutputCell{},SortThreadsCell{}) : SortGeneratedTopCell{}
  where rule6LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortList{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar5:SortK{},Var'Unds'Gen0:SortString{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortOutputCell{},Var'Unds'Gen6:SortThreadsCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(\and{SortThreadsCell{}}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lblread'LParRParUnds'IMP-SYNTAX'Unds'AExp{}()),Var'Unds'DotVar5:SortK{})),Var'Unds'Gen2:SortEnvCell{})),Var'Unds'DotVar3:SortThreadCellMap{})),Var'Unds'Gen6:SortThreadsCell{}),Var'Unds'Gen3:SortStoreCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Stop'List{}(),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(Var'Unds'Gen0:SortString{}),dotk{}()))))),Var'Unds'DotVar2:SortList{})),Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule6LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortList{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar5:SortK{},Var'Unds'Gen0:SortString{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortOutputCell{},Var'Unds'Gen6:SortThreadsCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Var'Unds'Gen6:SortThreadsCell{},Var'Unds'Gen3:SortStoreCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(\dv{SortString{}}("Int"),\dv{SortString{}}(" \n\t\r")))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(Var'Unds'Gen0:SortString{}),dotk{}()))))),Var'Unds'DotVar2:SortList{})),Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), transition{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(67,8,68,52)"), UNIQUE'Unds'ID{}("48cac44ee0f81b500fbcc3d4844acd60710bd67b8aca8cb323d3a1c53f1d9e90")]

// rule `<generatedTop>`(`<T>`(_Gen1,_Gen2,_Gen3,`<output>`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#ostream(_)_K-IO_Stream_Int`(N))),`ListItem`(inj{String,KItem}(#token("\"on\"","String")))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(S))))),_Gen0))),_DotVar0)=>`<generatedTop>`(`<T>`(_Gen1,_Gen2,_Gen3,`<output>`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#ostream(_)_K-IO_Stream_Int`(`project:Int`(`#write(_,_)_K-IO_K_Int_String`(N,S)~>inj{Int,KItem}(N))))),`ListItem`(inj{String,KItem}(#token("\"on\"","String")))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(#token("\"\"","String")))))),_Gen0))),_DotVar0) requires `_=/=String__STRING-COMMON_Bool_String_String`(S,#token("\"\"","String")) ensures #token("true","Bool") [UNIQUE_ID(829e7a581bda9035541ca05d9bfdcdc5eaaead3bd4adcbcd0064665c87d15682), label(STDOUT-STREAM.stdoutWrite), org.kframework.attributes.Location(Location(2724,8,2730,28)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), priority(30), stream]
  alias rule7LHS{}(SortInt{},SortString{},SortGeneratedCounterCell{},SortList{},SortThreadsCell{},SortStoreCell{},SortInputCell{}) : SortGeneratedTopCell{}
  where rule7LHS{}(VarN:SortInt{},VarS:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortList{},Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(VarS:SortString{},\dv{SortString{}}("")),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(VarN:SortInt{}))),LblListItem{}(inj{SortString{}, SortKItem{}}(\dv{SortString{}}("on")))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(VarS:SortString{}),dotk{}()))))),Var'Unds'Gen0:SortList{}))),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE25{}()),
      rule7LHS{}(VarN:SortInt{},VarS:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortList{},Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Lblproject'Coln'Int{}(append{}(Lbl'Hash'write'LParUndsCommUndsRParUnds'K-IO'Unds'K'Unds'Int'Unds'String{}(VarN:SortInt{},VarS:SortString{}),kseq{}(inj{SortInt{}, SortKItem{}}(VarN:SortInt{}),dotk{}())))))),LblListItem{}(inj{SortString{}, SortKItem{}}(\dv{SortString{}}("on")))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(\dv{SortString{}}("")),dotk{}()))))),Var'Unds'Gen0:SortList{}))),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [label{}("STDOUT-STREAM.stdoutWrite"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2724,8,2730,28)"), stream{}(""), priority{}("30"), UNIQUE'Unds'ID{}("829e7a581bda9035541ca05d9bfdcdc5eaaead3bd4adcbcd0064665c87d15682")]

// rule `<generatedTop>`(`<T>`(_Gen1,_Gen2,`<input>`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#parseInput(_,_)_K-IO_Stream_String_String`(Sort,Delimiters))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(S))))),_Gen0)),_Gen3),_DotVar0)=>`<generatedTop>`(`<T>`(_Gen1,_Gen2,`<input>`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#parseInput(_,_)_K-IO_Stream_String_String`(Sort,Delimiters))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S,#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(S))))))),_Gen0)),_Gen3),_DotVar0) requires `_andBool_`(`_andBool_`(`_=/=Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S,Delimiters,#token("0","Int")),#token("-1","Int")),`_=/=String__STRING-COMMON_Bool_String_String`(Sort,#token("\"String\"","String"))),`_<=Int_`(`lengthString(_)_STRING-COMMON_Int_String`(S),#token("1","Int"))) ensures #token("true","Bool") [UNIQUE_ID(3460632040d4a6b6996153112abdd94b045405f44caa9ced1a89d5bc3ccfc51e), label(STDIN-STREAM.stdinTrim), org.kframework.attributes.Location(Location(2642,8,2649,39)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), stream]
  alias rule8LHS{}(SortString{},SortString{},SortString{},SortGeneratedCounterCell{},SortList{},SortThreadsCell{},SortStoreCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule8LHS{}(VarDelimiters:SortString{},VarS:SortString{},VarSort:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortList{},Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(Lbl'UndsEqlsSlshEqls'Int'Unds'{}(LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS:SortString{},VarDelimiters:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("-1")),Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(VarSort:SortString{},\dv{SortString{}}("String"))),Lbl'Unds-LT-Eqls'Int'Unds'{}(LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarS:SortString{}),\dv{SortInt{}}("1"))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(VarSort:SortString{},VarDelimiters:SortString{}))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(VarS:SortString{}),dotk{}()))))),Var'Unds'Gen0:SortList{})),Var'Unds'Gen3:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule8LHS{}(VarDelimiters:SortString{},VarS:SortString{},VarSort:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortList{},Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(VarSort:SortString{},VarDelimiters:SortString{}))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarS:SortString{}))),dotk{}()))))),Var'Unds'Gen0:SortList{})),Var'Unds'Gen3:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [label{}("STDIN-STREAM.stdinTrim"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2642,8,2649,39)"), stream{}(""), UNIQUE'Unds'ID{}("3460632040d4a6b6996153112abdd94b045405f44caa9ced1a89d5bc3ccfc51e")]

// rule `<generatedTop>`(`<T>`(_Gen1,_Gen2,`<input>`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#parseInput(_,_)_K-IO_Stream_String_String`(#token("\"Int\"","String"),Delimiters))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(S))))),_Gen0)),_Gen3),_DotVar0)=>`<generatedTop>`(`<T>`(_Gen1,_Gen2,`<input>`(`_List_`(`_List_`(`ListItem`(inj{Int,KItem}(`String2Int(_)_STRING-COMMON_Int_String`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S,#token("0","Int"),`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S,Delimiters,#token("0","Int")))))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S,`_+Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S,Delimiters,#token("0","Int")),#token("1","Int")),`lengthString(_)_STRING-COMMON_Int_String`(S))))))),_Gen0)),_Gen3),_DotVar0) requires `_andBool_`(`_=/=Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S,Delimiters,#token("0","Int")),#token("-1","Int")),`_>Int_`(`lengthString(_)_STRING-COMMON_Int_String`(S),#token("1","Int"))) ensures #token("true","Bool") [UNIQUE_ID(276cf77a317ebbe308a0a353690291cbf2a01f9dd3f1681037f881a9106caaa0), label(STDIN-STREAM.stdinParseInt), org.kframework.attributes.Location(Location(2631,8,2638,38)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), stream]
  alias rule9LHS{}(SortString{},SortString{},SortGeneratedCounterCell{},SortList{},SortThreadsCell{},SortStoreCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule9LHS{}(VarDelimiters:SortString{},VarS:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortList{},Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'UndsEqlsSlshEqls'Int'Unds'{}(LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS:SortString{},VarDelimiters:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("-1")),Lbl'Unds-GT-'Int'Unds'{}(LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarS:SortString{}),\dv{SortInt{}}("1"))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(\dv{SortString{}}("Int"),VarDelimiters:SortString{}))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(VarS:SortString{}),dotk{}()))))),Var'Unds'Gen0:SortList{})),Var'Unds'Gen3:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule9LHS{}(VarDelimiters:SortString{},VarS:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortList{},Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortInt{}, SortKItem{}}(LblString2Int'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS:SortString{},\dv{SortInt{}}("0"),LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS:SortString{},VarDelimiters:SortString{},\dv{SortInt{}}("0")))))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS:SortString{},Lbl'UndsPlus'Int'Unds'{}(LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS:SortString{},VarDelimiters:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("1")),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarS:SortString{}))),dotk{}()))))),Var'Unds'Gen0:SortList{})),Var'Unds'Gen3:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [label{}("STDIN-STREAM.stdinParseInt"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2631,8,2638,38)"), stream{}(""), UNIQUE'Unds'ID{}("276cf77a317ebbe308a0a353690291cbf2a01f9dd3f1681037f881a9106caaa0")]

// rule `<generatedTop>`(`<T>`(_Gen1,_Gen2,`<input>`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#parseInput(_,_)_K-IO_Stream_String_String`(#token("\"String\"","String"),Delimiters))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(S))))),_Gen0)),_Gen3),_DotVar0)=>`<generatedTop>`(`<T>`(_Gen1,_Gen2,`<input>`(`_List_`(`_List_`(`ListItem`(inj{String,KItem}(S)),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(#token("\"\"","String")))))),_Gen0)),_Gen3),_DotVar0) requires `_=/=Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S,Delimiters,#token("0","Int")),#token("-1","Int")) ensures #token("true","Bool") [UNIQUE_ID(3ae93598c3863f4e83c9e0f431bf1e1702334accac62a68621651783a7e8247a), label(STDIN-STREAM.stdinParseString), org.kframework.attributes.Location(Location(2621,8,2626,50)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), stream]
  alias rule10LHS{}(SortString{},SortString{},SortGeneratedCounterCell{},SortList{},SortThreadsCell{},SortStoreCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule10LHS{}(VarDelimiters:SortString{},VarS:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortList{},Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'UndsEqlsSlshEqls'Int'Unds'{}(LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS:SortString{},VarDelimiters:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("-1")),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(\dv{SortString{}}("String"),VarDelimiters:SortString{}))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(VarS:SortString{}),dotk{}()))))),Var'Unds'Gen0:SortList{})),Var'Unds'Gen3:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule10LHS{}(VarDelimiters:SortString{},VarS:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortList{},Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortString{}, SortKItem{}}(VarS:SortString{})),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(\dv{SortString{}}("")),dotk{}()))))),Var'Unds'Gen0:SortList{})),Var'Unds'Gen3:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [label{}("STDIN-STREAM.stdinParseString"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2621,8,2626,50)"), stream{}(""), UNIQUE'Unds'ID{}("3ae93598c3863f4e83c9e0f431bf1e1702334accac62a68621651783a7e8247a")]

// rule `<generatedTop>`(`<T>`(_Gen1,_Gen2,`<input>`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#parseInput(_,_)_K-IO_Stream_String_String`(_Gen0,Delimiters))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(S))))),`ListItem`(inj{String,KItem}(#token("\"on\"","String")))),`ListItem`(inj{Stream,KItem}(`#istream(_)_K-IO_Stream_Int`(N))))),_Gen3),_DotVar0)=>`<generatedTop>`(`<T>`(_Gen1,_Gen2,`<input>`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#parseInput(_,_)_K-IO_Stream_String_String`(_Gen0,Delimiters))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(`_+String__STRING-COMMON_String_String_String`(S,`chrChar(_)_STRING-COMMON_String_Int`(`project:Int`(inj{IOInt,KItem}(`#getc(_)_K-IO_IOInt_Int`(N)))))))))),`ListItem`(inj{String,KItem}(#token("\"on\"","String")))),`ListItem`(inj{Stream,KItem}(`#istream(_)_K-IO_Stream_Int`(N))))),_Gen3),_DotVar0) requires `_==Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S,Delimiters,#token("0","Int")),#token("-1","Int")) ensures #token("true","Bool") [UNIQUE_ID(b30d0d76abe8106854fc25ad1443e672cd6a0c1de7a1016001a5af430b38090b), label(STDIN-STREAM.stdinGetc), org.kframework.attributes.Location(Location(2610,8,2616,49)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), priority(200), stream]
  alias rule11LHS{}(SortString{},SortInt{},SortString{},SortGeneratedCounterCell{},SortString{},SortThreadsCell{},SortStoreCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule11LHS{}(VarDelimiters:SortString{},VarN:SortInt{},VarS:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortString{},Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'UndsEqlsEqls'Int'Unds'{}(LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS:SortString{},VarDelimiters:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("-1")),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(Var'Unds'Gen0:SortString{},VarDelimiters:SortString{}))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(VarS:SortString{}),dotk{}()))))),LblListItem{}(inj{SortString{}, SortKItem{}}(\dv{SortString{}}("on")))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(VarN:SortInt{}))))),Var'Unds'Gen3:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE50{}()),
      rule11LHS{}(VarDelimiters:SortString{},VarN:SortInt{},VarS:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortString{},Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'parseInput'LParUndsCommUndsRParUnds'K-IO'Unds'Stream'Unds'String'Unds'String{}(Var'Unds'Gen0:SortString{},VarDelimiters:SortString{}))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(VarS:SortString{},LblchrChar'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Int{}(Lblproject'Coln'Int{}(kseq{}(inj{SortIOInt{}, SortKItem{}}(Lbl'Hash'getc'LParUndsRParUnds'K-IO'Unds'IOInt'Unds'Int{}(VarN:SortInt{})),dotk{}()))))),dotk{}()))))),LblListItem{}(inj{SortString{}, SortKItem{}}(\dv{SortString{}}("on")))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(VarN:SortInt{}))))),Var'Unds'Gen3:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [label{}("STDIN-STREAM.stdinGetc"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2610,8,2616,49)"), stream{}(""), priority{}("200"), UNIQUE'Unds'ID{}("b30d0d76abe8106854fc25ad1443e672cd6a0c1de7a1016001a5af430b38090b")]

// rule `<generatedTop>`(`<T>`(_Gen3,_Gen4,_Gen5,`<output>`(`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#ostream(_)_K-IO_Stream_Int`(_Gen0))),`ListItem`(_Gen1)),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(Buffer))))),`ListItem`(inj{Float,KItem}(F))),_Gen2))),_DotVar0)=>`<generatedTop>`(`<T>`(_Gen3,_Gen4,_Gen5,`<output>`(`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#ostream(_)_K-IO_Stream_Int`(_Gen0))),`ListItem`(_Gen1)),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(`_+String__STRING-COMMON_String_String_String`(Buffer,`Float2String(_)_STRING-COMMON_String_Float`(F))))))),`.List`(.KList)),_Gen2))),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(89fef51abf440e0b5fb4f7e5124420710d920e33fd02d4b5f0a2bce24cf6bb6b), label(STDOUT-STREAM.stdoutBufferFloat), org.kframework.attributes.Location(Location(2692,8,2698,17)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), priority(25), stream]
  alias rule12LHS{}(SortString{},SortFloat{},SortGeneratedCounterCell{},SortInt{},SortKItem{},SortList{},SortThreadsCell{},SortStoreCell{},SortInputCell{}) : SortGeneratedTopCell{}
  where rule12LHS{}(VarBuffer:SortString{},VarF:SortFloat{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortInt{},Var'Unds'Gen1:SortKItem{},Var'Unds'Gen2:SortList{},Var'Unds'Gen3:SortThreadsCell{},Var'Unds'Gen4:SortStoreCell{},Var'Unds'Gen5:SortInputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Var'Unds'Gen3:SortThreadsCell{},Var'Unds'Gen4:SortStoreCell{},Var'Unds'Gen5:SortInputCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Var'Unds'Gen0:SortInt{}))),LblListItem{}(Var'Unds'Gen1:SortKItem{})),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(VarBuffer:SortString{}),dotk{}()))))),LblListItem{}(inj{SortFloat{}, SortKItem{}}(VarF:SortFloat{}))),Var'Unds'Gen2:SortList{}))),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule12LHS{}(VarBuffer:SortString{},VarF:SortFloat{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortInt{},Var'Unds'Gen1:SortKItem{},Var'Unds'Gen2:SortList{},Var'Unds'Gen3:SortThreadsCell{},Var'Unds'Gen4:SortStoreCell{},Var'Unds'Gen5:SortInputCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Var'Unds'Gen3:SortThreadsCell{},Var'Unds'Gen4:SortStoreCell{},Var'Unds'Gen5:SortInputCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Var'Unds'Gen0:SortInt{}))),LblListItem{}(Var'Unds'Gen1:SortKItem{})),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(VarBuffer:SortString{},LblFloat2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Float{}(VarF:SortFloat{}))),dotk{}()))))),Lbl'Stop'List{}()),Var'Unds'Gen2:SortList{}))),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [label{}("STDOUT-STREAM.stdoutBufferFloat"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2692,8,2698,17)"), stream{}(""), priority{}("25"), UNIQUE'Unds'ID{}("89fef51abf440e0b5fb4f7e5124420710d920e33fd02d4b5f0a2bce24cf6bb6b")]

// rule `<generatedTop>`(`<T>`(_Gen3,_Gen4,_Gen5,`<output>`(`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#ostream(_)_K-IO_Stream_Int`(_Gen0))),`ListItem`(_Gen1)),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(Buffer))))),`ListItem`(inj{Int,KItem}(I))),_Gen2))),_DotVar0)=>`<generatedTop>`(`<T>`(_Gen3,_Gen4,_Gen5,`<output>`(`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#ostream(_)_K-IO_Stream_Int`(_Gen0))),`ListItem`(_Gen1)),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(`_+String__STRING-COMMON_String_String_String`(Buffer,`Int2String(_)_STRING-COMMON_String_Int`(I))))))),`.List`(.KList)),_Gen2))),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f1b7e635260c20311589d096311bc20689afe150d1fe517d0d5c90f2911983bb), label(STDOUT-STREAM.stdoutBufferInt), org.kframework.attributes.Location(Location(2702,8,2708,17)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), priority(25), stream]
  alias rule13LHS{}(SortString{},SortInt{},SortGeneratedCounterCell{},SortInt{},SortKItem{},SortList{},SortThreadsCell{},SortStoreCell{},SortInputCell{}) : SortGeneratedTopCell{}
  where rule13LHS{}(VarBuffer:SortString{},VarI:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortInt{},Var'Unds'Gen1:SortKItem{},Var'Unds'Gen2:SortList{},Var'Unds'Gen3:SortThreadsCell{},Var'Unds'Gen4:SortStoreCell{},Var'Unds'Gen5:SortInputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Var'Unds'Gen3:SortThreadsCell{},Var'Unds'Gen4:SortStoreCell{},Var'Unds'Gen5:SortInputCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Var'Unds'Gen0:SortInt{}))),LblListItem{}(Var'Unds'Gen1:SortKItem{})),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(VarBuffer:SortString{}),dotk{}()))))),LblListItem{}(inj{SortInt{}, SortKItem{}}(VarI:SortInt{}))),Var'Unds'Gen2:SortList{}))),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule13LHS{}(VarBuffer:SortString{},VarI:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortInt{},Var'Unds'Gen1:SortKItem{},Var'Unds'Gen2:SortList{},Var'Unds'Gen3:SortThreadsCell{},Var'Unds'Gen4:SortStoreCell{},Var'Unds'Gen5:SortInputCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Var'Unds'Gen3:SortThreadsCell{},Var'Unds'Gen4:SortStoreCell{},Var'Unds'Gen5:SortInputCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Var'Unds'Gen0:SortInt{}))),LblListItem{}(Var'Unds'Gen1:SortKItem{})),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(VarBuffer:SortString{},LblInt2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Int{}(VarI:SortInt{}))),dotk{}()))))),Lbl'Stop'List{}()),Var'Unds'Gen2:SortList{}))),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [label{}("STDOUT-STREAM.stdoutBufferInt"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2702,8,2708,17)"), stream{}(""), priority{}("25"), UNIQUE'Unds'ID{}("f1b7e635260c20311589d096311bc20689afe150d1fe517d0d5c90f2911983bb")]

// rule `<generatedTop>`(`<T>`(_Gen3,_Gen4,_Gen5,`<output>`(`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#ostream(_)_K-IO_Stream_Int`(_Gen0))),`ListItem`(_Gen1)),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(Buffer))))),`ListItem`(inj{String,KItem}(S))),_Gen2))),_DotVar0)=>`<generatedTop>`(`<T>`(_Gen3,_Gen4,_Gen5,`<output>`(`_List_`(`_List_`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#ostream(_)_K-IO_Stream_Int`(_Gen0))),`ListItem`(_Gen1)),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(`_+String__STRING-COMMON_String_String_String`(Buffer,S)))))),`.List`(.KList)),_Gen2))),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b0fe5129bd201b152b85e90ec5a8723a84094ae3ebdfc28487c9b99c7ea3fed9), label(STDOUT-STREAM.stdoutBufferString), org.kframework.attributes.Location(Location(2712,8,2718,17)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), priority(25), stream]
  alias rule14LHS{}(SortString{},SortString{},SortGeneratedCounterCell{},SortInt{},SortKItem{},SortList{},SortThreadsCell{},SortStoreCell{},SortInputCell{}) : SortGeneratedTopCell{}
  where rule14LHS{}(VarBuffer:SortString{},VarS:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortInt{},Var'Unds'Gen1:SortKItem{},Var'Unds'Gen2:SortList{},Var'Unds'Gen3:SortThreadsCell{},Var'Unds'Gen4:SortStoreCell{},Var'Unds'Gen5:SortInputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Var'Unds'Gen3:SortThreadsCell{},Var'Unds'Gen4:SortStoreCell{},Var'Unds'Gen5:SortInputCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Var'Unds'Gen0:SortInt{}))),LblListItem{}(Var'Unds'Gen1:SortKItem{})),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(VarBuffer:SortString{}),dotk{}()))))),LblListItem{}(inj{SortString{}, SortKItem{}}(VarS:SortString{}))),Var'Unds'Gen2:SortList{}))),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    rule14LHS{}(VarBuffer:SortString{},VarS:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortInt{},Var'Unds'Gen1:SortKItem{},Var'Unds'Gen2:SortList{},Var'Unds'Gen3:SortThreadsCell{},Var'Unds'Gen4:SortStoreCell{},Var'Unds'Gen5:SortInputCell{}),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Var'Unds'Gen3:SortThreadsCell{},Var'Unds'Gen4:SortStoreCell{},Var'Unds'Gen5:SortInputCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Var'Unds'Gen0:SortInt{}))),LblListItem{}(Var'Unds'Gen1:SortKItem{})),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(VarBuffer:SortString{},VarS:SortString{})),dotk{}()))))),Lbl'Stop'List{}()),Var'Unds'Gen2:SortList{}))),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [label{}("STDOUT-STREAM.stdoutBufferString"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2712,8,2718,17)"), stream{}(""), priority{}("25"), UNIQUE'Unds'ID{}("b0fe5129bd201b152b85e90ec5a8723a84094ae3ebdfc28487c9b99c7ea3fed9")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar3,`<thread>`(_DotVar3,`<k>`(inj{Block,KItem}(`{_}_IMP-SYNTAX_Block_Stmts`(Ss))~>_DotVar4),`<env>`(Rho))),_DotVar2)),_Gen0,_Gen1,_Gen2),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar3,`<thread>`(_DotVar3,`<k>`(inj{Stmts,KItem}(Ss)~>`setEnv(_)_IMP_KItem_Map`(Rho)~>_DotVar4),`<env>`(Rho))),_DotVar2)),_Gen0,_Gen1,_Gen2),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8782ff5dcc9aa237bbd975a41fa6c6c8e1a39460fde53fdc9dad77356c613584), org.kframework.attributes.Location(Location(79,8,79,62)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), structural]
  alias rule15LHS{}(SortMap{},SortStmts{},SortGeneratedCounterCell{},SortThreadCellMap{},SortIdCell{},SortK{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule15LHS{}(VarRho:SortMap{},VarSs:SortStmts{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar3:SortIdCell{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortStoreCell{},Var'Unds'Gen1:SortInputCell{},Var'Unds'Gen2:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar3:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar3:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(Lbl'LBraUndsRBraUnds'IMP-SYNTAX'Unds'Block'Unds'Stmts{}(VarSs:SortStmts{})),Var'Unds'DotVar4:SortK{})),Lbl'-LT-'env'-GT-'{}(VarRho:SortMap{}))),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen0:SortStoreCell{},Var'Unds'Gen1:SortInputCell{},Var'Unds'Gen2:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule15LHS{}(VarRho:SortMap{},VarSs:SortStmts{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar3:SortIdCell{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortStoreCell{},Var'Unds'Gen1:SortInputCell{},Var'Unds'Gen2:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar3:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar3:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmts{}, SortKItem{}}(VarSs:SortStmts{}),kseq{}(LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(VarRho:SortMap{}),Var'Unds'DotVar4:SortK{}))),Lbl'-LT-'env'-GT-'{}(VarRho:SortMap{}))),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen0:SortStoreCell{},Var'Unds'Gen1:SortInputCell{},Var'Unds'Gen2:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(79,8,79,62)"), UNIQUE'Unds'ID{}("8782ff5dcc9aa237bbd975a41fa6c6c8e1a39460fde53fdc9dad77356c613584")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar3,`<thread>`(_DotVar3,`<k>`(`setEnv(_)_IMP_KItem_Map`(Rho)~>_DotVar4),`<env>`(_Gen0))),_DotVar2)),_Gen1,_Gen2,_Gen3),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar3,`<thread>`(_DotVar3,`<k>`(_DotVar4),`<env>`(Rho))),_DotVar2)),_Gen1,_Gen2,_Gen3),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7e9afca4cbba02cfe5484f96abc3aac645b4331758ebcf7354d48d7557addac7), org.kframework.attributes.Location(Location(81,8,81,58)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), structural]
  alias rule16LHS{}(SortMap{},SortGeneratedCounterCell{},SortThreadCellMap{},SortIdCell{},SortK{},SortMap{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule16LHS{}(VarRho:SortMap{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar3:SortIdCell{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortMap{},Var'Unds'Gen1:SortStoreCell{},Var'Unds'Gen2:SortInputCell{},Var'Unds'Gen3:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar3:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar3:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(LblsetEnv'LParUndsRParUnds'IMP'Unds'KItem'Unds'Map{}(VarRho:SortMap{}),Var'Unds'DotVar4:SortK{})),Lbl'-LT-'env'-GT-'{}(Var'Unds'Gen0:SortMap{}))),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen1:SortStoreCell{},Var'Unds'Gen2:SortInputCell{},Var'Unds'Gen3:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule16LHS{}(VarRho:SortMap{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar3:SortIdCell{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortMap{},Var'Unds'Gen1:SortStoreCell{},Var'Unds'Gen2:SortInputCell{},Var'Unds'Gen3:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar3:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar3:SortIdCell{},Lbl'-LT-'k'-GT-'{}(Var'Unds'DotVar4:SortK{}),Lbl'-LT-'env'-GT-'{}(VarRho:SortMap{}))),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen1:SortStoreCell{},Var'Unds'Gen2:SortInputCell{},Var'Unds'Gen3:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(81,8,81,58)"), UNIQUE'Unds'ID{}("7e9afca4cbba02cfe5484f96abc3aac645b4331758ebcf7354d48d7557addac7")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar4,`<thread>`(_DotVar4,`<k>`(inj{Id,KItem}(X)~>_DotVar5),`<env>`(`_Map_`(`_|->_`(inj{Id,KItem}(X),N),_DotVar6)))),_DotVar3)),`<store>`(`_Map_`(`_|->_`(N,I),_DotVar2)) #as _Gen5,_Gen0,_Gen1),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar4,`<thread>`(_DotVar4,`<k>`(I~>_DotVar5),`<env>`(`_Map_`(`_|->_`(inj{Id,KItem}(X),N),_DotVar6)))),_DotVar3)),_Gen5,_Gen0,_Gen1),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(a2600d13ea62cdb6c8dac9b526b41902d87ac8800845959bf0cf1e9c85e58cb9), cool-like, org.kframework.attributes.Location(Location(61,8,63,38)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), transition]
  alias rule17LHS{}(SortKItem{},SortKItem{},SortId{},SortGeneratedCounterCell{},SortMap{},SortThreadCellMap{},SortIdCell{},SortK{},SortMap{},SortInputCell{},SortOutputCell{},SortStoreCell{}) : SortGeneratedTopCell{}
  where rule17LHS{}(VarI:SortKItem{},VarN:SortKItem{},VarX:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortMap{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar4:SortIdCell{},Var'Unds'DotVar5:SortK{},Var'Unds'DotVar6:SortMap{},Var'Unds'Gen0:SortInputCell{},Var'Unds'Gen1:SortOutputCell{},Var'Unds'Gen5:SortStoreCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar4:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar4:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarX:SortId{}),Var'Unds'DotVar5:SortK{})),Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarX:SortId{}),VarN:SortKItem{}),Var'Unds'DotVar6:SortMap{})))),Var'Unds'DotVar3:SortThreadCellMap{})),\and{SortStoreCell{}}(Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(VarN:SortKItem{},VarI:SortKItem{}),Var'Unds'DotVar2:SortMap{})),Var'Unds'Gen5:SortStoreCell{}),Var'Unds'Gen0:SortInputCell{},Var'Unds'Gen1:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule17LHS{}(VarI:SortKItem{},VarN:SortKItem{},VarX:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortMap{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar4:SortIdCell{},Var'Unds'DotVar5:SortK{},Var'Unds'DotVar6:SortMap{},Var'Unds'Gen0:SortInputCell{},Var'Unds'Gen1:SortOutputCell{},Var'Unds'Gen5:SortStoreCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar4:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar4:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(VarI:SortKItem{},Var'Unds'DotVar5:SortK{})),Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarX:SortId{}),VarN:SortKItem{}),Var'Unds'DotVar6:SortMap{})))),Var'Unds'DotVar3:SortThreadCellMap{})),Var'Unds'Gen5:SortStoreCell{},Var'Unds'Gen0:SortInputCell{},Var'Unds'Gen1:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), cool-like{}(), transition{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(61,8,63,38)"), UNIQUE'Unds'ID{}("a2600d13ea62cdb6c8dac9b526b41902d87ac8800845959bf0cf1e9c85e58cb9")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar4,`<thread>`(_DotVar4,`<k>`(inj{AExp,KItem}(`++__IMP-SYNTAX_AExp_Id`(X))~>_DotVar5),`<env>`(`_Map_`(`_|->_`(inj{Id,KItem}(X),N),_DotVar6)))),_DotVar3)),`<store>`(`_Map_`(`_|->_`(N,inj{Int,KItem}(I)),_DotVar2)),_Gen0,_Gen1),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar4,`<thread>`(_DotVar4,`<k>`(inj{Int,KItem}(`_+Int_`(I,#token("1","Int")))~>_DotVar5),`<env>`(`_Map_`(`_|->_`(inj{Id,KItem}(X),N),_DotVar6)))),_DotVar3)),`<store>`(`_Map_`(`_|->_`(N,inj{Int,KItem}(`_+Int_`(I,#token("1","Int")))),_DotVar2)),_Gen0,_Gen1),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b2d4a493568db13f4fd0d83aa3d73afa43c5231225038a2fd491fffdde924fde), org.kframework.attributes.Location(Location(64,8,66,52)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), transition]
  alias rule18LHS{}(SortInt{},SortKItem{},SortId{},SortGeneratedCounterCell{},SortMap{},SortThreadCellMap{},SortIdCell{},SortK{},SortMap{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule18LHS{}(VarI:SortInt{},VarN:SortKItem{},VarX:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortMap{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar4:SortIdCell{},Var'Unds'DotVar5:SortK{},Var'Unds'DotVar6:SortMap{},Var'Unds'Gen0:SortInputCell{},Var'Unds'Gen1:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar4:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar4:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'PlusPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id{}(VarX:SortId{})),Var'Unds'DotVar5:SortK{})),Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarX:SortId{}),VarN:SortKItem{}),Var'Unds'DotVar6:SortMap{})))),Var'Unds'DotVar3:SortThreadCellMap{})),Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(VarN:SortKItem{},inj{SortInt{}, SortKItem{}}(VarI:SortInt{})),Var'Unds'DotVar2:SortMap{})),Var'Unds'Gen0:SortInputCell{},Var'Unds'Gen1:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule18LHS{}(VarI:SortInt{},VarN:SortKItem{},VarX:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortMap{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar4:SortIdCell{},Var'Unds'DotVar5:SortK{},Var'Unds'DotVar6:SortMap{},Var'Unds'Gen0:SortInputCell{},Var'Unds'Gen1:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar4:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar4:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'UndsPlus'Int'Unds'{}(VarI:SortInt{},\dv{SortInt{}}("1"))),Var'Unds'DotVar5:SortK{})),Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarX:SortId{}),VarN:SortKItem{}),Var'Unds'DotVar6:SortMap{})))),Var'Unds'DotVar3:SortThreadCellMap{})),Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(VarN:SortKItem{},inj{SortInt{}, SortKItem{}}(Lbl'UndsPlus'Int'Unds'{}(VarI:SortInt{},\dv{SortInt{}}("1")))),Var'Unds'DotVar2:SortMap{})),Var'Unds'Gen0:SortInputCell{},Var'Unds'Gen1:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), transition{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(64,8,66,52)"), UNIQUE'Unds'ID{}("b2d4a493568db13f4fd0d83aa3d73afa43c5231225038a2fd491fffdde924fde")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar4,`<thread>`(_DotVar4,`<k>`(inj{AExp,KItem}(`_=__IMP-SYNTAX_AExp_Id_AExp`(X,inj{Int,AExp}(I)))~>_DotVar5),`<env>`(`_Map_`(`_|->_`(inj{Id,KItem}(X),N),_DotVar6)))),_DotVar3)),`<store>`(`_Map_`(`_|->_`(N,_Gen0),_DotVar2)),_Gen1,_Gen2),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar4,`<thread>`(_DotVar4,`<k>`(inj{Int,KItem}(I)~>_DotVar5),`<env>`(`_Map_`(`_|->_`(inj{Id,KItem}(X),N),_DotVar6)))),_DotVar3)),`<store>`(`_Map_`(`_|->_`(N,inj{Int,KItem}(I)),_DotVar2)),_Gen1,_Gen2),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(406b4cdab74e80d60edfadc16d6a5539cdef7714493df5825060da6ba51d803d), org.kframework.attributes.Location(Location(84,8,86,45)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), transition]
  alias rule19LHS{}(SortInt{},SortKItem{},SortId{},SortGeneratedCounterCell{},SortMap{},SortThreadCellMap{},SortIdCell{},SortK{},SortMap{},SortKItem{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule19LHS{}(VarI:SortInt{},VarN:SortKItem{},VarX:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortMap{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar4:SortIdCell{},Var'Unds'DotVar5:SortK{},Var'Unds'DotVar6:SortMap{},Var'Unds'Gen0:SortKItem{},Var'Unds'Gen1:SortInputCell{},Var'Unds'Gen2:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar4:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar4:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}(VarX:SortId{},inj{SortInt{}, SortAExp{}}(VarI:SortInt{}))),Var'Unds'DotVar5:SortK{})),Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarX:SortId{}),VarN:SortKItem{}),Var'Unds'DotVar6:SortMap{})))),Var'Unds'DotVar3:SortThreadCellMap{})),Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(VarN:SortKItem{},Var'Unds'Gen0:SortKItem{}),Var'Unds'DotVar2:SortMap{})),Var'Unds'Gen1:SortInputCell{},Var'Unds'Gen2:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule19LHS{}(VarI:SortInt{},VarN:SortKItem{},VarX:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortMap{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar4:SortIdCell{},Var'Unds'DotVar5:SortK{},Var'Unds'DotVar6:SortMap{},Var'Unds'Gen0:SortKItem{},Var'Unds'Gen1:SortInputCell{},Var'Unds'Gen2:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar4:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar4:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarI:SortInt{}),Var'Unds'DotVar5:SortK{})),Lbl'-LT-'env'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortId{}, SortKItem{}}(VarX:SortId{}),VarN:SortKItem{}),Var'Unds'DotVar6:SortMap{})))),Var'Unds'DotVar3:SortThreadCellMap{})),Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(VarN:SortKItem{},inj{SortInt{}, SortKItem{}}(VarI:SortInt{})),Var'Unds'DotVar2:SortMap{})),Var'Unds'Gen1:SortInputCell{},Var'Unds'Gen2:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), transition{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(84,8,86,45)"), UNIQUE'Unds'ID{}("406b4cdab74e80d60edfadc16d6a5539cdef7714493df5825060da6ba51d803d")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar4,`<thread>`(_DotVar4,`<k>`(inj{Stmt,KItem}(`int_;_IMP-SYNTAX_Stmt_Ids`(`_,__IMP-SYNTAX_Ids_Id_Ids`(X,Xs)))~>_DotVar5),`<env>`(Rho))),_DotVar3)),`<store>`(`_Map_`(`.Map`(.KList),_DotVar2)),_Gen0,_Gen1),`<generatedCounter>`(#Fresh))=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_DotVar4,`<thread>`(_DotVar4,`<k>`(inj{Stmt,KItem}(`int_;_IMP-SYNTAX_Stmt_Ids`(Xs))~>_DotVar5),`<env>`(`Map:update`(Rho,inj{Id,KItem}(X),inj{Int,KItem}(`freshInt(_)_INT_Int_Int`(`_+Int_`(#Fresh,#token("0","Int")))))))),_DotVar3)),`<store>`(`_Map_`(`_|->_`(inj{Int,KItem}(`freshInt(_)_INT_Int_Int`(`_+Int_`(#Fresh,#token("0","Int")))),inj{Int,KItem}(#token("0","Int"))),_DotVar2)),_Gen0,_Gen1),`<generatedCounter>`(`_+Int_`(#Fresh,#token("1","Int")))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f6c4305df415ae1433a7f2d3ae4d64017a4b2c9e39d61c511eb68d168f1d0390), org.kframework.attributes.Location(Location(91,8,93,45)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule20LHS{}(SortInt{},SortMap{},SortId{},SortIds{},SortMap{},SortThreadCellMap{},SortIdCell{},SortK{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule20LHS{}(Var'Hash'Fresh:SortInt{},VarRho:SortMap{},VarX:SortId{},VarXs:SortIds{},Var'Unds'DotVar2:SortMap{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar4:SortIdCell{},Var'Unds'DotVar5:SortK{},Var'Unds'Gen0:SortInputCell{},Var'Unds'Gen1:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar4:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar4:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblint'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'Ids{}(Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(VarX:SortId{},VarXs:SortIds{}))),Var'Unds'DotVar5:SortK{})),Lbl'-LT-'env'-GT-'{}(VarRho:SortMap{}))),Var'Unds'DotVar3:SortThreadCellMap{})),Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'Stop'Map{}(),Var'Unds'DotVar2:SortMap{})),Var'Unds'Gen0:SortInputCell{},Var'Unds'Gen1:SortOutputCell{}),Lbl'-LT-'generatedCounter'-GT-'{}(Var'Hash'Fresh:SortInt{}))) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule20LHS{}(Var'Hash'Fresh:SortInt{},VarRho:SortMap{},VarX:SortId{},VarXs:SortIds{},Var'Unds'DotVar2:SortMap{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar4:SortIdCell{},Var'Unds'DotVar5:SortK{},Var'Unds'Gen0:SortInputCell{},Var'Unds'Gen1:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'DotVar4:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar4:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblint'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'Ids{}(VarXs:SortIds{})),Var'Unds'DotVar5:SortK{})),Lbl'-LT-'env'-GT-'{}(LblMap'Coln'update{}(VarRho:SortMap{},inj{SortId{}, SortKItem{}}(VarX:SortId{}),inj{SortInt{}, SortKItem{}}(LblfreshInt'LParUndsRParUnds'INT'Unds'Int'Unds'Int{}(Lbl'UndsPlus'Int'Unds'{}(Var'Hash'Fresh:SortInt{},\dv{SortInt{}}("0")))))))),Var'Unds'DotVar3:SortThreadCellMap{})),Lbl'-LT-'store'-GT-'{}(Lbl'Unds'Map'Unds'{}(Lbl'UndsPipe'-'-GT-Unds'{}(inj{SortInt{}, SortKItem{}}(LblfreshInt'LParUndsRParUnds'INT'Unds'Int'Unds'Int{}(Lbl'UndsPlus'Int'Unds'{}(Var'Hash'Fresh:SortInt{},\dv{SortInt{}}("0")))),inj{SortInt{}, SortKItem{}}(\dv{SortInt{}}("0"))),Var'Unds'DotVar2:SortMap{})),Var'Unds'Gen0:SortInputCell{},Var'Unds'Gen1:SortOutputCell{}),Lbl'-LT-'generatedCounter'-GT-'{}(Lbl'UndsPlus'Int'Unds'{}(Var'Hash'Fresh:SortInt{},\dv{SortInt{}}("1"))))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(91,8,93,45)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("f6c4305df415ae1433a7f2d3ae4d64017a4b2c9e39d61c511eb68d168f1d0390")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{BExp,KItem}(HOLE)~>`#freezer!__IMP-SYNTAX_BExp_BExp0_`(.KList)~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{BExp,KItem}(`!__IMP-SYNTAX_BExp_BExp`(HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(inj{BExp,KItem}(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(046d60c057d139673331558d0eff1ad1f6facf0730255938ec566a001adf3afa), cool, cool-like, org.kframework.attributes.Location(Location(14,20,14,55)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict]
  alias rule21LHS{}(SortBExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule21LHS{}(VarHOLE:SortBExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),kseq{}(Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule21LHS{}(VarHOLE:SortBExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp{}(VarHOLE:SortBExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(14,20,14,55)"), UNIQUE'Unds'ID{}("046d60c057d139673331558d0eff1ad1f6facf0730255938ec566a001adf3afa")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{BExp,KItem}(HOLE)~>`#freezer_&&__IMP-SYNTAX_BExp_BExp_BExp0_`(inj{BExp,KItem}(K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{BExp,KItem}(`_&&__IMP-SYNTAX_BExp_BExp_BExp`(HOLE,K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(inj{BExp,KItem}(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(8b530b30ac880d6fa64dbe1811bc5c4babea10e4c3d1ac265b3e7de95facc118), cool, cool-like, left, org.kframework.attributes.Location(Location(16,20,16,64)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict(1)]
  alias rule22LHS{}(SortBExp{},SortBExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule22LHS{}(VarHOLE:SortBExp{},VarK1:SortBExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),kseq{}(Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarK1:SortBExp{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule22LHS{}(VarHOLE:SortBExp{},VarK1:SortBExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp{}(VarHOLE:SortBExp{},VarK1:SortBExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}("1"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), left{}(), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(16,20,16,64)"), UNIQUE'Unds'ID{}("8b530b30ac880d6fa64dbe1811bc5c4babea10e4c3d1ac265b3e7de95facc118")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_+__IMP-SYNTAX_AExp_AExp_AExp0_`(inj{AExp,KItem}(K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(`_+__IMP-SYNTAX_AExp_AExp_AExp`(HOLE,K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(inj{AExp,KItem}(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(f79afd27602e94c1d3cab7c479ee62b0612347889c7941935322ede490064831), cool, cool-like, left, org.kframework.attributes.Location(Location(9,20,9,61)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict]
  alias rule23LHS{}(SortAExp{},SortAExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule23LHS{}(VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule23LHS{}(VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), left{}(), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(9,20,9,61)"), UNIQUE'Unds'ID{}("f79afd27602e94c1d3cab7c479ee62b0612347889c7941935322ede490064831")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_+__IMP-SYNTAX_AExp_AExp_AExp1_`(inj{AExp,KItem}(K0))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(`_+__IMP-SYNTAX_AExp_AExp_AExp`(K0,HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(inj{AExp,KItem}(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(20d55dbe86aeba2a0375fcaeffd1b70463e163132d64bd344c8403e2abf48d4b), cool, cool-like, left, org.kframework.attributes.Location(Location(9,20,9,61)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict]
  alias rule24LHS{}(SortAExp{},SortAExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule24LHS{}(VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule24LHS{}(VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), left{}(), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(9,20,9,61)"), UNIQUE'Unds'ID{}("20d55dbe86aeba2a0375fcaeffd1b70463e163132d64bd344c8403e2abf48d4b")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_,__IMP-SYNTAX_AExps_AExp_AExps0_`(inj{AExps,KItem}(K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExps,KItem}(`_,__IMP-SYNTAX_AExps_AExp_AExps`(HOLE,K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(inj{AExp,KItem}(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(109b59cf919036f7f8581d3da0e8f8cbeb53605463fe314c2071c3b8fdf729f2), cool, cool-like, klabel(exps), org.kframework.attributes.Location(Location(31,20,31,69)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), right, strict, userList(*)]
  alias rule25LHS{}(SortAExp{},SortAExps{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule25LHS{}(VarHOLE:SortAExp{},VarK1:SortAExps{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(kseq{}(inj{SortAExps{}, SortKItem{}}(VarK1:SortAExps{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule25LHS{}(VarHOLE:SortAExp{},VarK1:SortAExps{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExps{}, SortKItem{}}(Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(VarHOLE:SortAExp{},VarK1:SortAExps{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [cool{}(), userList{}("*"), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), cool-like{}(), right{}(), klabel{}("exps"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(31,20,31,69)"), UNIQUE'Unds'ID{}("109b59cf919036f7f8581d3da0e8f8cbeb53605463fe314c2071c3b8fdf729f2")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExps,KItem}(HOLE)~>`#freezer_,__IMP-SYNTAX_AExps_AExp_AExps1_`(inj{AExp,KItem}(K0))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExps,KItem}(`_,__IMP-SYNTAX_AExps_AExp_AExps`(K0,HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(inj{AExps,KItem}(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(b862c1810b93a570c7e60b673fbc1b4bd302de2a79152271bba2c04276b4880c), cool, cool-like, klabel(exps), org.kframework.attributes.Location(Location(31,20,31,69)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), right, strict, userList(*)]
  alias rule26LHS{}(SortAExps{},SortAExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule26LHS{}(VarHOLE:SortAExps{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(inj{SortAExps{}, SortKItem{}}(VarHOLE:SortAExps{}),dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExps{}, SortKItem{}}(VarHOLE:SortAExps{}),kseq{}(Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule26LHS{}(VarHOLE:SortAExps{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExps{}, SortKItem{}}(Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(VarK0:SortAExp{},VarHOLE:SortAExps{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [cool{}(), userList{}("*"), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), cool-like{}(), right{}(), klabel{}("exps"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(31,20,31,69)"), UNIQUE'Unds'ID{}("b862c1810b93a570c7e60b673fbc1b4bd302de2a79152271bba2c04276b4880c")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Id,KItem}(HOLE)~>`#freezer_,__IMP-SYNTAX_Ids_Id_Ids0_`(inj{Ids,KItem}(K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Ids,KItem}(`_,__IMP-SYNTAX_Ids_Id_Ids`(HOLE,K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(inj{Id,KItem}(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(4289759b6dcb78387cc621b363c5c039c18a1f38ed6a93ab233493a08b5c27fb), cool, cool-like, klabel(exps), org.kframework.attributes.Location(Location(30,20,30,69)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), right, strict, userList(*)]
  alias rule27LHS{}(SortId{},SortIds{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule27LHS{}(VarHOLE:SortId{},VarK1:SortIds{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(inj{SortId{}, SortKItem{}}(VarHOLE:SortId{}),dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarHOLE:SortId{}),kseq{}(Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(kseq{}(inj{SortIds{}, SortKItem{}}(VarK1:SortIds{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule27LHS{}(VarHOLE:SortId{},VarK1:SortIds{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortIds{}, SortKItem{}}(Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(VarHOLE:SortId{},VarK1:SortIds{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [cool{}(), userList{}("*"), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), cool-like{}(), right{}(), klabel{}("exps"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(30,20,30,69)"), UNIQUE'Unds'ID{}("4289759b6dcb78387cc621b363c5c039c18a1f38ed6a93ab233493a08b5c27fb")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Ids,KItem}(HOLE)~>`#freezer_,__IMP-SYNTAX_Ids_Id_Ids1_`(inj{Id,KItem}(K0))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Ids,KItem}(`_,__IMP-SYNTAX_Ids_Id_Ids`(K0,HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(inj{Ids,KItem}(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(1c8ecde82a0cae6988f52aaef830bd2c47a1bdf62ab2d560c7fe25f8229cb846), cool, cool-like, klabel(exps), org.kframework.attributes.Location(Location(30,20,30,69)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), right, strict, userList(*)]
  alias rule28LHS{}(SortIds{},SortId{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule28LHS{}(VarHOLE:SortIds{},VarK0:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(inj{SortIds{}, SortKItem{}}(VarHOLE:SortIds{}),dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortIds{}, SortKItem{}}(VarHOLE:SortIds{}),kseq{}(Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarK0:SortId{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule28LHS{}(VarHOLE:SortIds{},VarK0:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortIds{}, SortKItem{}}(Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(VarK0:SortId{},VarHOLE:SortIds{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [cool{}(), userList{}("*"), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), cool-like{}(), right{}(), klabel{}("exps"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(30,20,30,69)"), UNIQUE'Unds'ID{}("1c8ecde82a0cae6988f52aaef830bd2c47a1bdf62ab2d560c7fe25f8229cb846")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_/__IMP-SYNTAX_AExp_AExp_AExp0_`(inj{AExp,KItem}(K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(`_/__IMP-SYNTAX_AExp_AExp_AExp`(HOLE,K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(inj{AExp,KItem}(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(2b2e93acde009669ccf6c554a733a049140a0f9311be80cf9186665606c6c97a), cool, cool-like, left, org.kframework.attributes.Location(Location(8,20,8,61)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict]
  alias rule29LHS{}(SortAExp{},SortAExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule29LHS{}(VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule29LHS{}(VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), left{}(), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(8,20,8,61)"), UNIQUE'Unds'ID{}("2b2e93acde009669ccf6c554a733a049140a0f9311be80cf9186665606c6c97a")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_/__IMP-SYNTAX_AExp_AExp_AExp1_`(inj{AExp,KItem}(K0))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(`_/__IMP-SYNTAX_AExp_AExp_AExp`(K0,HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(inj{AExp,KItem}(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(8ae6039c4a121c0d47acc683acd3940aec4e7e1e809439177fc32b7131179e5c), cool, cool-like, left, org.kframework.attributes.Location(Location(8,20,8,61)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict]
  alias rule30LHS{}(SortAExp{},SortAExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule30LHS{}(VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule30LHS{}(VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), left{}(), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(8,20,8,61)"), UNIQUE'Unds'ID{}("8ae6039c4a121c0d47acc683acd3940aec4e7e1e809439177fc32b7131179e5c")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_;_IMP-SYNTAX_Stmt_AExp0_`(.KList)~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Stmt,KItem}(`_;_IMP-SYNTAX_Stmt_AExp`(HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(inj{AExp,KItem}(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(9c4294d587722a6a1b1673837f6a788f3b9da0d2684457b0f978b79409da746d), cool, cool-like, org.kframework.attributes.Location(Location(19,20,19,55)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict]
  alias rule31LHS{}(SortAExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule31LHS{}(VarHOLE:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}(),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule31LHS{}(VarHOLE:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lbl'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(VarHOLE:SortAExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(19,20,19,55)"), UNIQUE'Unds'ID{}("9c4294d587722a6a1b1673837f6a788f3b9da0d2684457b0f978b79409da746d")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_<=__IMP-SYNTAX_BExp_AExp_AExp0_`(inj{AExp,KItem}(K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{BExp,KItem}(`_<=__IMP-SYNTAX_BExp_AExp_AExp`(HOLE,K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(inj{AExp,KItem}(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(6ce7009dfb83c0c72a89762edcf8cb8d2852d75049bdceea660f0074383548a5), cool, cool-like, latex({#1}\leq{#2}), org.kframework.attributes.Location(Location(13,20,13,79)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), seqstrict]
  alias rule32LHS{}(SortAExp{},SortAExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule32LHS{}(VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule32LHS{}(VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [latex{}("{#1}\\leq{#2}"), cool{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(13,20,13,79)"), UNIQUE'Unds'ID{}("6ce7009dfb83c0c72a89762edcf8cb8d2852d75049bdceea660f0074383548a5"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_<=__IMP-SYNTAX_BExp_AExp_AExp1_`(inj{AExp,KItem}(K0))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{BExp,KItem}(`_<=__IMP-SYNTAX_BExp_AExp_AExp`(K0,HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(inj{AExp,KItem}(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(72ed975186623c17fc2633658600368326b27ae1343270330b7b6047005ccbcd), cool, cool-like, latex({#1}\leq{#2}), org.kframework.attributes.Location(Location(13,20,13,79)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), seqstrict]
  alias rule33LHS{}(SortAExp{},SortAExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule33LHS{}(VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule33LHS{}(VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [latex{}("{#1}\\leq{#2}"), cool{}(), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(13,20,13,79)"), UNIQUE'Unds'ID{}("72ed975186623c17fc2633658600368326b27ae1343270330b7b6047005ccbcd"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_=__IMP-SYNTAX_AExp_Id_AExp1_`(inj{Id,KItem}(K0))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(`_=__IMP-SYNTAX_AExp_Id_AExp`(K0,HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(inj{AExp,KItem}(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(b08cc6a199de309f4b6760a8652f0368f510ad2376fdf28cef8f8e94e41a382b), cool, cool-like, org.kframework.attributes.Location(Location(11,20,11,58)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict(2)]
  alias rule34LHS{}(SortAExp{},SortId{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule34LHS{}(VarHOLE:SortAExp{},VarK0:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarK0:SortId{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule34LHS{}(VarHOLE:SortAExp{},VarK0:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}(VarK0:SortId{},VarHOLE:SortAExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}("2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(11,20,11,58)"), UNIQUE'Unds'ID{}("b08cc6a199de309f4b6760a8652f0368f510ad2376fdf28cef8f8e94e41a382b")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{BExp,KItem}(HOLE)~>`#freezerif(_)_else__IMP-SYNTAX_Stmt_BExp_Block_Block0_`(inj{Block,KItem}(K1),inj{Block,KItem}(K2))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Stmt,KItem}(`if(_)_else__IMP-SYNTAX_Stmt_BExp_Block_Block`(HOLE,K1,K2))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(inj{BExp,KItem}(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(034c38e512c1256ff47aba3ef484c11ee596236ab05cedd1304cade7be3bf774), cool, cool-like, org.kframework.attributes.Location(Location(20,20,21,58)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict(1)]
  alias rule35LHS{}(SortBExp{},SortBlock{},SortBlock{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule35LHS{}(VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortBlock{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),kseq{}(Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarK1:SortBlock{}),dotk{}()),kseq{}(inj{SortBlock{}, SortKItem{}}(VarK2:SortBlock{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule35LHS{}(VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortBlock{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block{}(VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortBlock{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}("1"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(20,20,21,58)"), UNIQUE'Unds'ID{}("034c38e512c1256ff47aba3ef484c11ee596236ab05cedd1304cade7be3bf774")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezerjoin_;_IMP-SYNTAX_Stmt_AExp0_`(.KList)~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Stmt,KItem}(`join_;_IMP-SYNTAX_Stmt_AExp`(HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(inj{AExp,KItem}(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(887f53e9d03ad892f972a39f8413da459a4fe12f31328056c111f94d3df39840), cool, cool-like, org.kframework.attributes.Location(Location(28,20,28,55)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict]
  alias rule36LHS{}(SortAExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule36LHS{}(VarHOLE:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}(),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule36LHS{}(VarHOLE:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(VarHOLE:SortAExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(28,20,28,55)"), UNIQUE'Unds'ID{}("887f53e9d03ad892f972a39f8413da459a4fe12f31328056c111f94d3df39840")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExps,KItem}(HOLE)~>`#freezerprint(_);_IMP-SYNTAX_Stmt_AExps0_`(.KList)~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Stmt,KItem}(`print(_);_IMP-SYNTAX_Stmt_AExps`(HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),isKResult(inj{AExps,KItem}(HOLE))) ensures #token("true","Bool") [UNIQUE_ID(6741cb273b5919d9bf698acedf5084b633e6e6b6d901698ea32d6e0d7277da5d), cool, cool-like, org.kframework.attributes.Location(Location(24,20,24,55)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict]
  alias rule37LHS{}(SortAExps{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule37LHS{}(VarHOLE:SortAExps{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblisKResult{}(kseq{}(inj{SortAExps{}, SortKItem{}}(VarHOLE:SortAExps{}),dotk{}()))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExps{}, SortKItem{}}(VarHOLE:SortAExps{}),kseq{}(Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}(),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule37LHS{}(VarHOLE:SortAExps{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps{}(VarHOLE:SortAExps{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [cool{}(), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), cool-like{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(24,20,24,55)"), UNIQUE'Unds'ID{}("6741cb273b5919d9bf698acedf5084b633e6e6b6d901698ea32d6e0d7277da5d")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{BExp,KItem}(`!__IMP-SYNTAX_BExp_BExp`(HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{BExp,KItem}(HOLE)~>`#freezer!__IMP-SYNTAX_BExp_BExp0_`(.KList)~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(inj{BExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(73386cb8877936630fdb20179dc70c5cbdddb3f4ff225a19ac6719f847087f67), heat, org.kframework.attributes.Location(Location(14,20,14,55)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict]
  alias rule38LHS{}(SortBExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule38LHS{}(VarHOLE:SortBExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp{}(VarHOLE:SortBExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule38LHS{}(VarHOLE:SortBExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),kseq{}(Lbl'Hash'freezer'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp0'Unds'{}(),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(14,20,14,55)"), UNIQUE'Unds'ID{}("73386cb8877936630fdb20179dc70c5cbdddb3f4ff225a19ac6719f847087f67")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{BExp,KItem}(`!__IMP-SYNTAX_BExp_BExp`(inj{Bool,BExp}(T)))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Bool,KItem}(`notBool_`(T))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(df02fc0d0e5961db2abfb367f3e75a41da73560b1bd8104ba77b08a90463d01f), org.kframework.attributes.Location(Location(75,8,75,24)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule39LHS{}(SortBool{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule39LHS{}(VarT:SortBool{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'BangUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp{}(inj{SortBool{}, SortBExp{}}(VarT:SortBool{}))),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule39LHS{}(VarT:SortBool{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBool{}, SortKItem{}}(LblnotBool'Unds'{}(VarT:SortBool{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(75,8,75,24)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("df02fc0d0e5961db2abfb367f3e75a41da73560b1bd8104ba77b08a90463d01f")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(`-__IMP-SYNTAX_AExp_Int`(I))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Int,KItem}(`_-Int_`(#token("0","Int"),I))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(11257cfa6e4acf011c9eb56e4c968dee1a99d1dcbca3fbda5360adc3c0683b80), org.kframework.attributes.Location(Location(71,8,71,23)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule40LHS{}(SortInt{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule40LHS{}(VarI:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl-'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Int{}(VarI:SortInt{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule40LHS{}(VarI:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'Unds'-Int'Unds'{}(\dv{SortInt{}}("0"),VarI:SortInt{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(71,8,71,23)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("11257cfa6e4acf011c9eb56e4c968dee1a99d1dcbca3fbda5360adc3c0683b80")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Stmts,KItem}(`.List{"___IMP-SYNTAX_Stmts_Stmt_Stmts"}_Stmts`(.KList))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(776ec2ae660e455c82072289e9e500b5cba3c75a97220e7ebad2a17ffff499a4), org.kframework.attributes.Location(Location(116,8,116,19)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule41LHS{}(SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule41LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmts{}, SortKItem{}}(Lbl'Stop'List'LBraQuotUndsUndsUnds'IMP-SYNTAX'Unds'Stmts'Unds'Stmt'Unds'Stmts'QuotRBraUnds'Stmts{}()),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule41LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(Var'Unds'DotVar4:SortK{}),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(116,8,116,19)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("776ec2ae660e455c82072289e9e500b5cba3c75a97220e7ebad2a17ffff499a4")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{BExp,KItem}(`_&&__IMP-SYNTAX_BExp_BExp_BExp`(HOLE,K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{BExp,KItem}(HOLE)~>`#freezer_&&__IMP-SYNTAX_BExp_BExp_BExp0_`(inj{BExp,KItem}(K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(inj{BExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(2447707c4c2dc4331c8d20f39d00f56ede8fed99d954198d265186c741d8be89), heat, left, org.kframework.attributes.Location(Location(16,20,16,64)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict(1)]
  alias rule42LHS{}(SortBExp{},SortBExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule42LHS{}(VarHOLE:SortBExp{},VarK1:SortBExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp{}(VarHOLE:SortBExp{},VarK1:SortBExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule42LHS{}(VarHOLE:SortBExp{},VarK1:SortBExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),kseq{}(Lbl'Hash'freezer'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp0'Unds'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarK1:SortBExp{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [strict{}("1"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), left{}(), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(16,20,16,64)"), UNIQUE'Unds'ID{}("2447707c4c2dc4331c8d20f39d00f56ede8fed99d954198d265186c741d8be89")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{BExp,KItem}(`_&&__IMP-SYNTAX_BExp_BExp_BExp`(inj{Bool,BExp}(#token("true","Bool")),B))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{BExp,KItem}(B)~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c78d274bec7913fb60cd62c41693aa099f25ba70160c4ab4a7af9c99043b8bd0), org.kframework.attributes.Location(Location(76,8,76,22)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule43LHS{}(SortBExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule43LHS{}(VarB:SortBExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp{}(inj{SortBool{}, SortBExp{}}(\dv{SortBool{}}("true")),VarB:SortBExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule43LHS{}(VarB:SortBExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarB:SortBExp{}),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(76,8,76,22)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("c78d274bec7913fb60cd62c41693aa099f25ba70160c4ab4a7af9c99043b8bd0")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(`_+__IMP-SYNTAX_AExp_AExp_AExp`(HOLE,K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_+__IMP-SYNTAX_AExp_AExp_AExp0_`(inj{AExp,KItem}(K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(4f1fc6a54f410e0c9b75aa0a8df5036933591a2e5f7c23a9f112121b049e0865), heat, left, org.kframework.attributes.Location(Location(9,20,9,61)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict]
  alias rule44LHS{}(SortAExp{},SortAExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule44LHS{}(VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule44LHS{}(VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), left{}(), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(9,20,9,61)"), UNIQUE'Unds'ID{}("4f1fc6a54f410e0c9b75aa0a8df5036933591a2e5f7c23a9f112121b049e0865")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(`_+__IMP-SYNTAX_AExp_AExp_AExp`(K0,HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_+__IMP-SYNTAX_AExp_AExp_AExp1_`(inj{AExp,KItem}(K0))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(33b45f2c7611ceb1fcaaace5dcddc3e69dfb6e2412fa65018934a5feeb667428), heat, left, org.kframework.attributes.Location(Location(9,20,9,61)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict]
  alias rule45LHS{}(SortAExp{},SortAExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule45LHS{}(VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule45LHS{}(VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), left{}(), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(9,20,9,61)"), UNIQUE'Unds'ID{}("33b45f2c7611ceb1fcaaace5dcddc3e69dfb6e2412fa65018934a5feeb667428")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(`_+__IMP-SYNTAX_AExp_AExp_AExp`(inj{Int,AExp}(I1),inj{Int,AExp}(I2)))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Int,KItem}(`_+Int_`(I1,I2))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(558153b25ed67940d62fe6aba2c159725c68ef58cf9fdcd03034b94d6013593b), org.kframework.attributes.Location(Location(70,8,70,29)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule46LHS{}(SortInt{},SortInt{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule46LHS{}(VarI1:SortInt{},VarI2:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(inj{SortInt{}, SortAExp{}}(VarI1:SortInt{}),inj{SortInt{}, SortAExp{}}(VarI2:SortInt{}))),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule46LHS{}(VarI1:SortInt{},VarI2:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'UndsPlus'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(70,8,70,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("558153b25ed67940d62fe6aba2c159725c68ef58cf9fdcd03034b94d6013593b")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(`_+__IMP-SYNTAX_AExp_AExp_AExp`(inj{String,AExp}(Str1),inj{String,AExp}(Str2)))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{String,KItem}(`_+String__STRING-COMMON_String_String_String`(Str1,Str2))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(074e3171550054838c97ca426cd1e07876ac1dea3292e91114c3f05cea3330cb), org.kframework.attributes.Location(Location(72,8,72,40)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule47LHS{}(SortString{},SortString{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule47LHS{}(VarStr1:SortString{},VarStr2:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsPlusUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(inj{SortString{}, SortAExp{}}(VarStr1:SortString{}),inj{SortString{}, SortAExp{}}(VarStr2:SortString{}))),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule47LHS{}(VarStr1:SortString{},VarStr2:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortString{}, SortKItem{}}(Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(VarStr1:SortString{},VarStr2:SortString{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(72,8,72,40)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("074e3171550054838c97ca426cd1e07876ac1dea3292e91114c3f05cea3330cb")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExps,KItem}(`_,__IMP-SYNTAX_AExps_AExp_AExps`(HOLE,K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_,__IMP-SYNTAX_AExps_AExp_AExps0_`(inj{AExps,KItem}(K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(046be13abc205caed27f3b8b693db68c9886859e21e5379e2b758a3a7e72d02d), heat, klabel(exps), org.kframework.attributes.Location(Location(31,20,31,69)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), right, strict, userList(*)]
  alias rule48LHS{}(SortAExp{},SortAExps{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule48LHS{}(VarHOLE:SortAExp{},VarK1:SortAExps{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExps{}, SortKItem{}}(Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(VarHOLE:SortAExp{},VarK1:SortAExps{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule48LHS{}(VarHOLE:SortAExp{},VarK1:SortAExps{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps0'Unds'{}(kseq{}(inj{SortAExps{}, SortKItem{}}(VarK1:SortAExps{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [userList{}("*"), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), heat{}(), right{}(), klabel{}("exps"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(31,20,31,69)"), UNIQUE'Unds'ID{}("046be13abc205caed27f3b8b693db68c9886859e21e5379e2b758a3a7e72d02d")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExps,KItem}(`_,__IMP-SYNTAX_AExps_AExp_AExps`(K0,HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExps,KItem}(HOLE)~>`#freezer_,__IMP-SYNTAX_AExps_AExp_AExps1_`(inj{AExp,KItem}(K0))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(inj{AExps,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(4495780831054c3841eab2ff7cfcdf172ab032217651dae4170c99b21202a85d), heat, klabel(exps), org.kframework.attributes.Location(Location(31,20,31,69)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), right, strict, userList(*)]
  alias rule49LHS{}(SortAExps{},SortAExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule49LHS{}(VarHOLE:SortAExps{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExps{}, SortKItem{}}(VarHOLE:SortAExps{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExps{}, SortKItem{}}(Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(VarK0:SortAExp{},VarHOLE:SortAExps{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule49LHS{}(VarHOLE:SortAExps{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExps{}, SortKItem{}}(VarHOLE:SortAExps{}),kseq{}(Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [userList{}("*"), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), heat{}(), right{}(), klabel{}("exps"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(31,20,31,69)"), UNIQUE'Unds'ID{}("4495780831054c3841eab2ff7cfcdf172ab032217651dae4170c99b21202a85d")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Ids,KItem}(`_,__IMP-SYNTAX_Ids_Id_Ids`(HOLE,K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Id,KItem}(HOLE)~>`#freezer_,__IMP-SYNTAX_Ids_Id_Ids0_`(inj{Ids,KItem}(K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(inj{Id,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(d926e94d69c7c09ef628e15cc230f2c4f417423b2113187e5dc084f0a8ce2371), heat, klabel(exps), org.kframework.attributes.Location(Location(30,20,30,69)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), right, strict, userList(*)]
  alias rule50LHS{}(SortId{},SortIds{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule50LHS{}(VarHOLE:SortId{},VarK1:SortIds{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortId{}, SortKItem{}}(VarHOLE:SortId{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortIds{}, SortKItem{}}(Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(VarHOLE:SortId{},VarK1:SortIds{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule50LHS{}(VarHOLE:SortId{},VarK1:SortIds{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarHOLE:SortId{}),kseq{}(Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids0'Unds'{}(kseq{}(inj{SortIds{}, SortKItem{}}(VarK1:SortIds{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [userList{}("*"), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), heat{}(), right{}(), klabel{}("exps"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(30,20,30,69)"), UNIQUE'Unds'ID{}("d926e94d69c7c09ef628e15cc230f2c4f417423b2113187e5dc084f0a8ce2371")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Ids,KItem}(`_,__IMP-SYNTAX_Ids_Id_Ids`(K0,HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Ids,KItem}(HOLE)~>`#freezer_,__IMP-SYNTAX_Ids_Id_Ids1_`(inj{Id,KItem}(K0))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(inj{Ids,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(a86382e68a32bfa88d3032de1c45d4e4b823066a9d95fbbe6063c1c80c646a8c), heat, klabel(exps), org.kframework.attributes.Location(Location(30,20,30,69)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), right, strict, userList(*)]
  alias rule51LHS{}(SortIds{},SortId{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule51LHS{}(VarHOLE:SortIds{},VarK0:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortIds{}, SortKItem{}}(VarHOLE:SortIds{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortIds{}, SortKItem{}}(Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids{}(VarK0:SortId{},VarHOLE:SortIds{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule51LHS{}(VarHOLE:SortIds{},VarK0:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortIds{}, SortKItem{}}(VarHOLE:SortIds{}),kseq{}(Lbl'Hash'freezer'UndsCommUndsUnds'IMP-SYNTAX'Unds'Ids'Unds'Id'Unds'Ids1'Unds'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarK0:SortId{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [userList{}("*"), strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), heat{}(), right{}(), klabel{}("exps"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(30,20,30,69)"), UNIQUE'Unds'ID{}("a86382e68a32bfa88d3032de1c45d4e4b823066a9d95fbbe6063c1c80c646a8c")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(`_/__IMP-SYNTAX_AExp_AExp_AExp`(HOLE,K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_/__IMP-SYNTAX_AExp_AExp_AExp0_`(inj{AExp,KItem}(K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(e71ca68a882d2aa4aa2475a577baf9d6960d4dc7f2dbd747ddc4efb9105e0ec6), heat, left, org.kframework.attributes.Location(Location(8,20,8,61)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict]
  alias rule52LHS{}(SortAExp{},SortAExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule52LHS{}(VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule52LHS{}(VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), left{}(), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(8,20,8,61)"), UNIQUE'Unds'ID{}("e71ca68a882d2aa4aa2475a577baf9d6960d4dc7f2dbd747ddc4efb9105e0ec6")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(`_/__IMP-SYNTAX_AExp_AExp_AExp`(K0,HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_/__IMP-SYNTAX_AExp_AExp_AExp1_`(inj{AExp,KItem}(K0))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(df1711d103a1d5fabb5655e0996e2ea62689fbc637f0bd8329c5977ee37af582), heat, left, org.kframework.attributes.Location(Location(8,20,8,61)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict]
  alias rule53LHS{}(SortAExp{},SortAExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule53LHS{}(VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule53LHS{}(VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), left{}(), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(8,20,8,61)"), UNIQUE'Unds'ID{}("df1711d103a1d5fabb5655e0996e2ea62689fbc637f0bd8329c5977ee37af582")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(`_/__IMP-SYNTAX_AExp_AExp_AExp`(inj{Int,AExp}(I1),inj{Int,AExp}(I2)))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Int,KItem}(`_/Int_`(I1,I2))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_=/=Int_`(I2,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(6afd6e6a38cfbe63d88684cb832028c72316c47cf3bd4a98ab50da45d8d4f338), org.kframework.attributes.Location(Location(69,8,69,47)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "when" Bool [klabel(#ruleRequires), symbol])]
  alias rule54LHS{}(SortInt{},SortInt{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule54LHS{}(VarI1:SortInt{},VarI2:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'UndsEqlsSlshEqls'Int'Unds'{}(VarI2:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsSlshUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'AExp'Unds'AExp{}(inj{SortInt{}, SortAExp{}}(VarI1:SortInt{}),inj{SortInt{}, SortAExp{}}(VarI2:SortInt{}))),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule54LHS{}(VarI1:SortInt{},VarI2:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'UndsSlsh'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(69,8,69,47)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"when\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("6afd6e6a38cfbe63d88684cb832028c72316c47cf3bd4a98ab50da45d8d4f338")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Stmt,KItem}(`_;_IMP-SYNTAX_Stmt_AExp`(HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_;_IMP-SYNTAX_Stmt_AExp0_`(.KList)~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(d2e6a5c3b45dd8d50ade7579cd1532ed7757194dbdf6ccbf257c16bb39c84c00), heat, org.kframework.attributes.Location(Location(19,20,19,55)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict]
  alias rule55LHS{}(SortAExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule55LHS{}(VarHOLE:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lbl'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(VarHOLE:SortAExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule55LHS{}(VarHOLE:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}(),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(19,20,19,55)"), UNIQUE'Unds'ID{}("d2e6a5c3b45dd8d50ade7579cd1532ed7757194dbdf6ccbf257c16bb39c84c00")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{BExp,KItem}(`_<=__IMP-SYNTAX_BExp_AExp_AExp`(HOLE,K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_<=__IMP-SYNTAX_BExp_AExp_AExp0_`(inj{AExp,KItem}(K1))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(3ea228c13423f10a5e2a2dfe82bde4b8ecf790cd6ab3e2095ef0f66e62099a30), heat, latex({#1}\leq{#2}), org.kframework.attributes.Location(Location(13,20,13,79)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), seqstrict]
  alias rule56LHS{}(SortAExp{},SortAExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule56LHS{}(VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarHOLE:SortAExp{},VarK1:SortAExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule56LHS{}(VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp0'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK1:SortAExp{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [latex{}("{#1}\\leq{#2}"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(13,20,13,79)"), UNIQUE'Unds'ID{}("3ea228c13423f10a5e2a2dfe82bde4b8ecf790cd6ab3e2095ef0f66e62099a30"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{BExp,KItem}(`_<=__IMP-SYNTAX_BExp_AExp_AExp`(K0,HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_<=__IMP-SYNTAX_BExp_AExp_AExp1_`(inj{AExp,KItem}(K0))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(`_andBool_`(isKResult(inj{AExp,KItem}(K0)),#token("true","Bool")),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(86fbfc54f768898e51293efe170369589e35695f1f2afdd6ce6a3975fbec3492), heat, latex({#1}\leq{#2}), org.kframework.attributes.Location(Location(13,20,13,79)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), seqstrict]
  alias rule57LHS{}(SortAExp{},SortAExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule57LHS{}(VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(Lbl'Unds'andBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),\dv{SortBool{}}("true")),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(VarK0:SortAExp{},VarHOLE:SortAExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule57LHS{}(VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp1'Unds'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarK0:SortAExp{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [latex{}("{#1}\\leq{#2}"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(13,20,13,79)"), UNIQUE'Unds'ID{}("86fbfc54f768898e51293efe170369589e35695f1f2afdd6ce6a3975fbec3492"), seqstrict{}()]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{BExp,KItem}(`_<=__IMP-SYNTAX_BExp_AExp_AExp`(inj{Int,AExp}(I1),inj{Int,AExp}(I2)))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Bool,KItem}(`_<=Int_`(I1,I2))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f3294578cd4f3183bed59df22c8899bcf796bf26593a7c5e36540ac0829f6d69), org.kframework.attributes.Location(Location(74,8,74,31)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule58LHS{}(SortInt{},SortInt{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule58LHS{}(VarI1:SortInt{},VarI2:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'Unds-LT-EqlsUndsUnds'IMP-SYNTAX'Unds'BExp'Unds'AExp'Unds'AExp{}(inj{SortInt{}, SortAExp{}}(VarI1:SortInt{}),inj{SortInt{}, SortAExp{}}(VarI2:SortInt{}))),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule58LHS{}(VarI1:SortInt{},VarI2:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBool{}, SortKItem{}}(Lbl'Unds-LT-Eqls'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(74,8,74,31)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("f3294578cd4f3183bed59df22c8899bcf796bf26593a7c5e36540ac0829f6d69")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(`_=__IMP-SYNTAX_AExp_Id_AExp`(K0,HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezer_=__IMP-SYNTAX_AExp_Id_AExp1_`(inj{Id,KItem}(K0))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(80925d1f7619fce34bc82741e01d262e56091c9f9d0416b64e0cd797f8b88d38), heat, org.kframework.attributes.Location(Location(11,20,11,58)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict(2)]
  alias rule59LHS{}(SortAExp{},SortId{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule59LHS{}(VarHOLE:SortAExp{},VarK0:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lbl'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp{}(VarK0:SortId{},VarHOLE:SortAExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule59LHS{}(VarHOLE:SortAExp{},VarK0:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezer'UndsEqlsUndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Id'Unds'AExp1'Unds'{}(kseq{}(inj{SortId{}, SortKItem{}}(VarK0:SortId{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [strict{}("2"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(11,20,11,58)"), UNIQUE'Unds'ID{}("80925d1f7619fce34bc82741e01d262e56091c9f9d0416b64e0cd797f8b88d38")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Stmts,KItem}(`___IMP-SYNTAX_Stmts_Stmt_Stmts`(S,Ss))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Stmt,KItem}(S)~>inj{Stmts,KItem}(Ss)~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c757ad808f728d4440888c70537b26cf5e96f83c76d3b4101c7bf834d054a14b), org.kframework.attributes.Location(Location(117,8,117,34)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), structural]
  alias rule60LHS{}(SortStmt{},SortStmts{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule60LHS{}(VarS:SortStmt{},VarSs:SortStmts{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmts{}, SortKItem{}}(Lbl'UndsUndsUnds'IMP-SYNTAX'Unds'Stmts'Unds'Stmt'Unds'Stmts{}(VarS:SortStmt{},VarSs:SortStmts{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule60LHS{}(VarS:SortStmt{},VarSs:SortStmts{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(VarS:SortStmt{}),kseq{}(inj{SortStmts{}, SortKItem{}}(VarSs:SortStmts{}),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(117,8,117,34)"), UNIQUE'Unds'ID{}("c757ad808f728d4440888c70537b26cf5e96f83c76d3b4101c7bf834d054a14b")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Stmt,KItem}(`if(_)_else__IMP-SYNTAX_Stmt_BExp_Block_Block`(HOLE,K1,K2))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{BExp,KItem}(HOLE)~>`#freezerif(_)_else__IMP-SYNTAX_Stmt_BExp_Block_Block0_`(inj{Block,KItem}(K1),inj{Block,KItem}(K2))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(inj{BExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(f65385a6a43e8163e2ba4db22a222ea18ec2656be0ebcc0b352c836838907221), heat, org.kframework.attributes.Location(Location(20,20,21,58)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict(1)]
  alias rule61LHS{}(SortBExp{},SortBlock{},SortBlock{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule61LHS{}(VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortBlock{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block{}(VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortBlock{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule61LHS{}(VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortBlock{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(VarHOLE:SortBExp{}),kseq{}(Lbl'Hash'freezerif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block0'Unds'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarK1:SortBlock{}),dotk{}()),kseq{}(inj{SortBlock{}, SortKItem{}}(VarK2:SortBlock{}),dotk{}())),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [strict{}("1"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(20,20,21,58)"), UNIQUE'Unds'ID{}("f65385a6a43e8163e2ba4db22a222ea18ec2656be0ebcc0b352c836838907221")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Stmt,KItem}(`int_;_IMP-SYNTAX_Stmt_Ids`(inj{Bottoms,Ids}(`.List{"_,__IMP-SYNTAX_Bottoms_Bottom_Bottoms"}_Bottoms`(.KList))))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4b663a3c8cb73ebeba31530a4f0f9e3307933e31661919b171b3c692ed280750), org.kframework.attributes.Location(Location(94,8,94,22)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), structural]
  alias rule62LHS{}(SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule62LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblint'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'Ids{}(inj{SortBottoms{}, SortIds{}}(Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Bottoms'Unds'Bottom'Unds'Bottoms'QuotRBraUnds'Bottoms{}()))),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule62LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(Var'Unds'DotVar4:SortK{}),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(94,8,94,22)"), UNIQUE'Unds'ID{}("4b663a3c8cb73ebeba31530a4f0f9e3307933e31661919b171b3c692ed280750")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Stmt,KItem}(`join_;_IMP-SYNTAX_Stmt_AExp`(HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(HOLE)~>`#freezerjoin_;_IMP-SYNTAX_Stmt_AExp0_`(.KList)~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(inj{AExp,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(e8e963bdf54baaf6afa4c5e78ff13e608560ce018383d738884ec941d9fb72d5), heat, org.kframework.attributes.Location(Location(28,20,28,55)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict]
  alias rule63LHS{}(SortAExp{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule63LHS{}(VarHOLE:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(VarHOLE:SortAExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule63LHS{}(VarHOLE:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(VarHOLE:SortAExp{}),kseq{}(Lbl'Hash'freezerjoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp0'Unds'{}(),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(28,20,28,55)"), UNIQUE'Unds'ID{}("e8e963bdf54baaf6afa4c5e78ff13e608560ce018383d738884ec941d9fb72d5")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Stmt,KItem}(`print(_);_IMP-SYNTAX_Stmt_AExps`(HOLE))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExps,KItem}(HOLE)~>`#freezerprint(_);_IMP-SYNTAX_Stmt_AExps0_`(.KList)~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires `_andBool_`(#token("true","Bool"),`notBool_`(isKResult(inj{AExps,KItem}(HOLE)))) ensures #token("true","Bool") [UNIQUE_ID(3f8623b43324975f78717edc12eb94f56e96139dbfb3bd967f6befce2c335140), heat, org.kframework.attributes.Location(Location(24,20,24,55)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), strict]
  alias rule64LHS{}(SortAExps{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule64LHS{}(VarHOLE:SortAExps{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \equals{SortBool{},SortGeneratedTopCell{}}(
        Lbl'Unds'andBool'Unds'{}(\dv{SortBool{}}("true"),LblnotBool'Unds'{}(LblisKResult{}(kseq{}(inj{SortAExps{}, SortKItem{}}(VarHOLE:SortAExps{}),dotk{}())))),
        \dv{SortBool{}}("true")), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps{}(VarHOLE:SortAExps{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule64LHS{}(VarHOLE:SortAExps{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExps{}, SortKItem{}}(VarHOLE:SortAExps{}),kseq{}(Lbl'Hash'freezerprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps0'Unds'{}(),Var'Unds'DotVar4:SortK{}))),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [strict{}(""), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), heat{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(24,20,24,55)"), UNIQUE'Unds'ID{}("3f8623b43324975f78717edc12eb94f56e96139dbfb3bd967f6befce2c335140")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Stmt,KItem}(`print(_);_IMP-SYNTAX_Stmt_AExps`(`_,__IMP-SYNTAX_AExps_AExp_AExps`(inj{Printable,AExp}(P),AEs)))~>_DotVar5),_Gen1)),_DotVar3)),_Gen2,_Gen3,`<output>`(`_List_`(_DotVar2,`.List`(.KList)))),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Stmt,KItem}(`print(_);_IMP-SYNTAX_Stmt_AExps`(AEs))~>_DotVar5),_Gen1)),_DotVar3)),_Gen2,_Gen3,`<output>`(`_List_`(_DotVar2,`ListItem`(inj{Printable,KItem}(P))))),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0e09f26b6d1eb4f6d39e9abe0a50a6df947f4b00afb81a303eeb63976b00f735), org.kframework.attributes.Location(Location(100,8,101,50)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), print, transition]
  alias rule65LHS{}(SortAExps{},SortPrintable{},SortGeneratedCounterCell{},SortList{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{}) : SortGeneratedTopCell{}
  where rule65LHS{}(VarAEs:SortAExps{},VarP:SortPrintable{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortList{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar5:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps{}(Lbl'UndsCommUndsUnds'IMP-SYNTAX'Unds'AExps'Unds'AExp'Unds'AExps{}(inj{SortPrintable{}, SortAExp{}}(VarP:SortPrintable{}),VarAEs:SortAExps{}))),Var'Unds'DotVar5:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar3:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Var'Unds'DotVar2:SortList{},Lbl'Stop'List{}()))),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule65LHS{}(VarAEs:SortAExps{},VarP:SortPrintable{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortList{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar5:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps{}(VarAEs:SortAExps{})),Var'Unds'DotVar5:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar3:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Var'Unds'DotVar2:SortList{},LblListItem{}(inj{SortPrintable{}, SortKItem{}}(VarP:SortPrintable{}))))),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), print{}(), transition{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(100,8,101,50)"), UNIQUE'Unds'ID{}("0e09f26b6d1eb4f6d39e9abe0a50a6df947f4b00afb81a303eeb63976b00f735")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Stmt,KItem}(`print(_);_IMP-SYNTAX_Stmt_AExps`(inj{Bottoms,AExps}(`.List{"_,__IMP-SYNTAX_Bottoms_Bottom_Bottoms"}_Bottoms`(.KList))))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d5763a8b320302634c9bded8451a731f64598a66c07b07336ce84e6a45215be7), org.kframework.attributes.Location(Location(102,8,102,27)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), structural]
  alias rule66LHS{}(SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule66LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblprint'LParUndsRParSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExps{}(inj{SortBottoms{}, SortAExps{}}(Lbl'Stop'List'LBraQuotUndsCommUndsUnds'IMP-SYNTAX'Unds'Bottoms'Unds'Bottom'Unds'Bottoms'QuotRBraUnds'Bottoms{}()))),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule66LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(Var'Unds'DotVar4:SortK{}),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(102,8,102,27)"), UNIQUE'Unds'ID{}("d5763a8b320302634c9bded8451a731f64598a66c07b07336ce84e6a45215be7")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{AExp,KItem}(`read()_IMP-SYNTAX_AExp`(.KList))~>_DotVar5),_Gen1)),_DotVar3)),_Gen2,`<input>`(`_List_`(`ListItem`(inj{Int,KItem}(I)),_DotVar2)),_Gen3),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Int,KItem}(I)~>_DotVar5),_Gen1)),_DotVar3)),_Gen2,`<input>`(`_List_`(`.List`(.KList),_DotVar2)),_Gen3),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1e26eee907da3471331eb325377016ffde623f0f814f94e0ae005f494a3ae032), org.kframework.attributes.Location(Location(67,8,68,52)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), transition]
  alias rule67LHS{}(SortInt{},SortGeneratedCounterCell{},SortList{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule67LHS{}(VarI:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortList{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar5:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lblread'LParRParUnds'IMP-SYNTAX'Unds'AExp{}()),Var'Unds'DotVar5:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar3:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortInt{}, SortKItem{}}(VarI:SortInt{})),Var'Unds'DotVar2:SortList{})),Var'Unds'Gen3:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule67LHS{}(VarI:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortList{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar5:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(VarI:SortInt{}),Var'Unds'DotVar5:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar3:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Stop'List{}(),Var'Unds'DotVar2:SortList{})),Var'Unds'Gen3:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), transition{}(), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(67,8,68,52)"), UNIQUE'Unds'ID{}("1e26eee907da3471331eb325377016ffde623f0f814f94e0ae005f494a3ae032")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Stmt,KItem}(`while(_)__IMP-SYNTAX_Stmt_BExp_Block`(B,S))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Stmt,KItem}(`if(_)_else__IMP-SYNTAX_Stmt_BExp_Block_Block`(B,`{_}_IMP-SYNTAX_Block_Stmts`(`___IMP-SYNTAX_Stmts_Stmt_Stmts`(inj{Block,Stmt}(S),`___IMP-SYNTAX_Stmts_Stmt_Stmts`(`while(_)__IMP-SYNTAX_Stmt_BExp_Block`(B,S),`.List{"___IMP-SYNTAX_Stmts_Stmt_Stmts"}_Stmts`(.KList)))),`{_}_IMP-SYNTAX_Block_Stmts`(`.List{"___IMP-SYNTAX_Stmts_Stmt_Stmts"}_Stmts`(.KList))))~>_DotVar4),_Gen1)),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8ed9201fd25d8890a12f63342ad2ebec3afcc559fc1624c3be15603b4e4cf557), org.kframework.attributes.Location(Location(89,8,89,59)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), structural]
  alias rule68LHS{}(SortBExp{},SortBlock{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule68LHS{}(VarB:SortBExp{},VarS:SortBlock{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block{}(VarB:SortBExp{},VarS:SortBlock{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule68LHS{}(VarB:SortBExp{},VarS:SortBlock{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block{}(VarB:SortBExp{},Lbl'LBraUndsRBraUnds'IMP-SYNTAX'Unds'Block'Unds'Stmts{}(Lbl'UndsUndsUnds'IMP-SYNTAX'Unds'Stmts'Unds'Stmt'Unds'Stmts{}(inj{SortBlock{}, SortStmt{}}(VarS:SortBlock{}),Lbl'UndsUndsUnds'IMP-SYNTAX'Unds'Stmts'Unds'Stmt'Unds'Stmts{}(Lblwhile'LParUndsRParUndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block{}(VarB:SortBExp{},VarS:SortBlock{}),Lbl'Stop'List'LBraQuotUndsUndsUnds'IMP-SYNTAX'Unds'Stmts'Unds'Stmt'Unds'Stmts'QuotRBraUnds'Stmts{}()))),Lbl'LBraUndsRBraUnds'IMP-SYNTAX'Unds'Block'Unds'Stmts{}(Lbl'Stop'List'LBraQuotUndsUndsUnds'IMP-SYNTAX'Unds'Stmts'Unds'Stmt'Unds'Stmts'QuotRBraUnds'Stmts{}()))),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen1:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), structural{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(89,8,89,59)"), UNIQUE'Unds'ID{}("8ed9201fd25d8890a12f63342ad2ebec3afcc559fc1624c3be15603b4e4cf557")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen1,`<thread>`(_Gen1,`<k>`(inj{BExp,KItem}(`_&&__IMP-SYNTAX_BExp_BExp_BExp`(inj{Bool,BExp}(#token("false","Bool")),_Gen0))~>_DotVar4),_Gen2)),_DotVar2)),_Gen3,_Gen4,_Gen5),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen1,`<thread>`(_Gen1,`<k>`(inj{Bool,KItem}(#token("false","Bool"))~>_DotVar4),_Gen2)),_DotVar2)),_Gen3,_Gen4,_Gen5),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(aad2bcfd509bccd60d7e25b0eec1c400a385c8a8ddd49c668f15f83eeac44567), org.kframework.attributes.Location(Location(77,8,77,27)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule69LHS{}(SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortBExp{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule69LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortBExp{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBExp{}, SortKItem{}}(Lbl'UndsAnd-And-UndsUnds'IMP-SYNTAX'Unds'BExp'Unds'BExp'Unds'BExp{}(inj{SortBool{}, SortBExp{}}(\dv{SortBool{}}("false")),Var'Unds'Gen0:SortBExp{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen2:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule69LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortBExp{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBool{}, SortKItem{}}(\dv{SortBool{}}("false")),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen2:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(77,8,77,27)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("aad2bcfd509bccd60d7e25b0eec1c400a385c8a8ddd49c668f15f83eeac44567")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen1,`<thread>`(_Gen1,`<k>`(inj{Stmt,KItem}(`_;_IMP-SYNTAX_Stmt_AExp`(inj{Int,AExp}(_Gen0)))~>_DotVar4),_Gen2)),_DotVar2)),_Gen3,_Gen4,_Gen5),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen1,`<thread>`(_Gen1,`<k>`(_DotVar4),_Gen2)),_DotVar2)),_Gen3,_Gen4,_Gen5),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c2c5a6f759807db1b6abea4f8e515372de855385982d63a610282e9ec788dda7), org.kframework.attributes.Location(Location(83,8,83,19)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule70LHS{}(SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortInt{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule70LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortInt{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lbl'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(inj{SortInt{}, SortAExp{}}(Var'Unds'Gen0:SortInt{}))),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen2:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule70LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortInt{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'k'-GT-'{}(Var'Unds'DotVar4:SortK{}),Var'Unds'Gen2:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(83,8,83,19)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("c2c5a6f759807db1b6abea4f8e515372de855385982d63a610282e9ec788dda7")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen1,`<thread>`(_Gen1,`<k>`(inj{Stmt,KItem}(`abort;_IMP-SYNTAX_Stmt`(.KList))~>_DotVar3),_Gen2)),_Gen0)),_Gen3,_Gen4,_Gen5),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`.ThreadCellMap`(.KList)),_Gen3,_Gen4,_Gen5),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9944112f6d79d70a3e5abde958868bc13c87092b2365490cdc40e0bcab97d626), org.kframework.attributes.Location(Location(113,8,113,81)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule71LHS{}(SortGeneratedCounterCell{},SortK{},SortThreadCellMap{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule71LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar3:SortK{},Var'Unds'Gen0:SortThreadCellMap{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblabort'SClnUnds'IMP-SYNTAX'Unds'Stmt{}()),Var'Unds'DotVar3:SortK{})),Var'Unds'Gen2:SortEnvCell{})),Var'Unds'Gen0:SortThreadCellMap{})),Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule71LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar3:SortK{},Var'Unds'Gen0:SortThreadCellMap{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Stop'ThreadCellMap{}()),Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(113,8,113,81)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("9944112f6d79d70a3e5abde958868bc13c87092b2365490cdc40e0bcab97d626")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen1,`<thread>`(_Gen1,`<k>`(inj{Stmt,KItem}(`halt;_IMP-SYNTAX_Stmt`(.KList))~>_Gen0),_Gen2)),_DotVar2)),_Gen3,_Gen4,_Gen5),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen1,`<thread>`(_Gen1,`<k>`(.K),_Gen2)),_DotVar2)),_Gen3,_Gen4,_Gen5),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f189f492647925aed82ebf402e5a18330d6dace20d82fd6c0f209229a843b5a5), org.kframework.attributes.Location(Location(104,8,104,32)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule72LHS{}(SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule72LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'Gen0:SortK{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblhalt'SClnUnds'IMP-SYNTAX'Unds'Stmt{}()),Var'Unds'Gen0:SortK{})),Var'Unds'Gen2:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule72LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'Gen0:SortK{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'k'-GT-'{}(dotk{}()),Var'Unds'Gen2:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(104,8,104,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("f189f492647925aed82ebf402e5a18330d6dace20d82fd6c0f209229a843b5a5")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen1,`<thread>`(_Gen1,`<k>`(inj{Stmt,KItem}(`if(_)_else__IMP-SYNTAX_Stmt_BExp_Block_Block`(inj{Bool,BExp}(#token("false","Bool")),_Gen0,S))~>_DotVar4),_Gen2)),_DotVar2)),_Gen3,_Gen4,_Gen5),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen1,`<thread>`(_Gen1,`<k>`(inj{Block,KItem}(S)~>_DotVar4),_Gen2)),_DotVar2)),_Gen3,_Gen4,_Gen5),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f12ec760036f191754935e67853214c87c49da500e49c7b913ddbc732150ee1a), org.kframework.attributes.Location(Location(88,8,88,32)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule73LHS{}(SortBlock{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortBlock{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule73LHS{}(VarS:SortBlock{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortBlock{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block{}(inj{SortBool{}, SortBExp{}}(\dv{SortBool{}}("false")),Var'Unds'Gen0:SortBlock{},VarS:SortBlock{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen2:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule73LHS{}(VarS:SortBlock{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortBlock{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarS:SortBlock{}),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen2:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(88,8,88,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("f12ec760036f191754935e67853214c87c49da500e49c7b913ddbc732150ee1a")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen1,`<thread>`(_Gen1,`<k>`(inj{Stmt,KItem}(`if(_)_else__IMP-SYNTAX_Stmt_BExp_Block_Block`(inj{Bool,BExp}(#token("true","Bool")),S,_Gen0))~>_DotVar4),_Gen2)),_DotVar2)),_Gen3,_Gen4,_Gen5),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`ThreadCellMapItem`(_Gen1,`<thread>`(_Gen1,`<k>`(inj{Block,KItem}(S)~>_DotVar4),_Gen2)),_DotVar2)),_Gen3,_Gen4,_Gen5),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3db8362dabb3eb158afddd5722f7130eae1135170929330ee1aaf9eb2fd3dcda), org.kframework.attributes.Location(Location(87,8,87,32)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule74LHS{}(SortBlock{},SortGeneratedCounterCell{},SortThreadCellMap{},SortK{},SortBlock{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule74LHS{}(VarS:SortBlock{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortBlock{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lblif'LParUndsRParUnds'else'UndsUnds'IMP-SYNTAX'Unds'Stmt'Unds'BExp'Unds'Block'Unds'Block{}(inj{SortBool{}, SortBExp{}}(\dv{SortBool{}}("true")),VarS:SortBlock{},Var'Unds'Gen0:SortBlock{})),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen2:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule74LHS{}(VarS:SortBlock{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortBlock{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen1:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarS:SortBlock{}),Var'Unds'DotVar4:SortK{})),Var'Unds'Gen2:SortEnvCell{})),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(87,8,87,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("3db8362dabb3eb158afddd5722f7130eae1135170929330ee1aaf9eb2fd3dcda")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`_ThreadCellMap_`(`.ThreadCellMap`(.KList),`ThreadCellMapItem`(_DotVar3,`<thread>`(_DotVar3,`<k>`(inj{AExp,KItem}(`spawn__IMP-SYNTAX_AExp_Block`(S))~>_DotVar4),`<env>`(Rho)))),_DotVar2)),_Gen0,_Gen1,_Gen2),`<generatedCounter>`(#Fresh))=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`_ThreadCellMap_`(`ThreadCellMapItem`(`<id>`(`_+Int_`(`freshInt(_)_INT_Int_Int`(`_+Int_`(#Fresh,#token("0","Int"))),#token("1","Int"))),`<thread>`(`<id>`(`_+Int_`(`freshInt(_)_INT_Int_Int`(`_+Int_`(#Fresh,#token("0","Int"))),#token("1","Int"))),`<k>`(inj{Block,KItem}(S)),`<env>`(Rho))),`ThreadCellMapItem`(_DotVar3,`<thread>`(_DotVar3,`<k>`(inj{Int,KItem}(`_+Int_`(`freshInt(_)_INT_Int_Int`(`_+Int_`(#Fresh,#token("0","Int"))),#token("1","Int")))~>_DotVar4),`<env>`(Rho)))),_DotVar2)),_Gen0,_Gen1,_Gen2),`<generatedCounter>`(`_+Int_`(#Fresh,#token("1","Int")))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5950c652f2ca919613b0f1b5e72989454f9811e36536f8cdaf11e769d872e725), org.kframework.attributes.Location(Location(106,8,107,91)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule75LHS{}(SortInt{},SortMap{},SortBlock{},SortThreadCellMap{},SortIdCell{},SortK{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule75LHS{}(Var'Hash'Fresh:SortInt{},VarRho:SortMap{},VarS:SortBlock{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar3:SortIdCell{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortStoreCell{},Var'Unds'Gen1:SortInputCell{},Var'Unds'Gen2:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(Lbl'Unds'ThreadCellMap'Unds'{}(Lbl'Stop'ThreadCellMap{}(),LblThreadCellMapItem{}(Var'Unds'DotVar3:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar3:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortAExp{}, SortKItem{}}(Lblspawn'UndsUnds'IMP-SYNTAX'Unds'AExp'Unds'Block{}(VarS:SortBlock{})),Var'Unds'DotVar4:SortK{})),Lbl'-LT-'env'-GT-'{}(VarRho:SortMap{})))),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen0:SortStoreCell{},Var'Unds'Gen1:SortInputCell{},Var'Unds'Gen2:SortOutputCell{}),Lbl'-LT-'generatedCounter'-GT-'{}(Var'Hash'Fresh:SortInt{}))) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule75LHS{}(Var'Hash'Fresh:SortInt{},VarRho:SortMap{},VarS:SortBlock{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar3:SortIdCell{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortStoreCell{},Var'Unds'Gen1:SortInputCell{},Var'Unds'Gen2:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Lbl'-LT-'id'-GT-'{}(Lbl'UndsPlus'Int'Unds'{}(LblfreshInt'LParUndsRParUnds'INT'Unds'Int'Unds'Int{}(Lbl'UndsPlus'Int'Unds'{}(Var'Hash'Fresh:SortInt{},\dv{SortInt{}}("0"))),\dv{SortInt{}}("1"))),Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'id'-GT-'{}(Lbl'UndsPlus'Int'Unds'{}(LblfreshInt'LParUndsRParUnds'INT'Unds'Int'Unds'Int{}(Lbl'UndsPlus'Int'Unds'{}(Var'Hash'Fresh:SortInt{},\dv{SortInt{}}("0"))),\dv{SortInt{}}("1"))),Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortBlock{}, SortKItem{}}(VarS:SortBlock{}),dotk{}())),Lbl'-LT-'env'-GT-'{}(VarRho:SortMap{}))),LblThreadCellMapItem{}(Var'Unds'DotVar3:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'DotVar3:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortInt{}, SortKItem{}}(Lbl'UndsPlus'Int'Unds'{}(LblfreshInt'LParUndsRParUnds'INT'Unds'Int'Unds'Int{}(Lbl'UndsPlus'Int'Unds'{}(Var'Hash'Fresh:SortInt{},\dv{SortInt{}}("0"))),\dv{SortInt{}}("1"))),Var'Unds'DotVar4:SortK{})),Lbl'-LT-'env'-GT-'{}(VarRho:SortMap{})))),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen0:SortStoreCell{},Var'Unds'Gen1:SortInputCell{},Var'Unds'Gen2:SortOutputCell{}),Lbl'-LT-'generatedCounter'-GT-'{}(Lbl'UndsPlus'Int'Unds'{}(Var'Hash'Fresh:SortInt{},\dv{SortInt{}}("1"))))))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(106,8,107,91)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("5950c652f2ca919613b0f1b5e72989454f9811e36536f8cdaf11e769d872e725")]

// rule `<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`_ThreadCellMap_`(`ThreadCellMapItem`(`<id>`(T),`<thread>`(`<id>`(T),`<k>`(.K),_DotVar3)),`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(inj{Stmt,KItem}(`join_;_IMP-SYNTAX_Stmt_AExp`(inj{Int,AExp}(T)))~>_DotVar5),_Gen1))),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0)=>`<generatedTop>`(`<T>`(`<threads>`(`_ThreadCellMap_`(`_ThreadCellMap_`(`ThreadCellMapItem`(`<id>`(T),`<thread>`(`<id>`(T),`<k>`(.K),_DotVar3)),`ThreadCellMapItem`(_Gen0,`<thread>`(_Gen0,`<k>`(_DotVar5),_Gen1))),_DotVar2)),_Gen2,_Gen3,_Gen4),_DotVar0) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(52fdf4aa5a24f0b2f2a1e81acbe4d218b2d4a3269d3e19b138bfa859d1e057ae), org.kframework.attributes.Location(Location(108,8,108,78)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  alias rule76LHS{}(SortInt{},SortGeneratedCounterCell{},SortThreadCellMap{},SortEnvCell{},SortK{},SortIdCell{},SortEnvCell{},SortStoreCell{},SortInputCell{},SortOutputCell{}) : SortGeneratedTopCell{}
  where rule76LHS{}(VarT:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar3:SortEnvCell{},Var'Unds'DotVar5:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}) :=
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Lbl'-LT-'id'-GT-'{}(VarT:SortInt{}),Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'id'-GT-'{}(VarT:SortInt{}),Lbl'-LT-'k'-GT-'{}(dotk{}()),Var'Unds'DotVar3:SortEnvCell{})),LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmt{}, SortKItem{}}(Lbljoin'UndsSClnUnds'IMP-SYNTAX'Unds'Stmt'Unds'AExp{}(inj{SortInt{}, SortAExp{}}(VarT:SortInt{}))),Var'Unds'DotVar5:SortK{})),Var'Unds'Gen1:SortEnvCell{}))),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})) []

  axiom{} \rewrites{SortGeneratedTopCell{}} (
    \and{SortGeneratedTopCell{}}(
      \not{SortGeneratedTopCell{}}(priorityLE30{}()),
      rule76LHS{}(VarT:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar3:SortEnvCell{},Var'Unds'DotVar5:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})),
    \and{SortGeneratedTopCell{}} (
      \top{SortGeneratedTopCell{}}(), Lbl'-LT-'generatedTop'-GT-'{}(Lbl'-LT-'T'-GT-'{}(Lbl'-LT-'threads'-GT-'{}(Lbl'Unds'ThreadCellMap'Unds'{}(Lbl'Unds'ThreadCellMap'Unds'{}(LblThreadCellMapItem{}(Lbl'-LT-'id'-GT-'{}(VarT:SortInt{}),Lbl'-LT-'thread'-GT-'{}(Lbl'-LT-'id'-GT-'{}(VarT:SortInt{}),Lbl'-LT-'k'-GT-'{}(dotk{}()),Var'Unds'DotVar3:SortEnvCell{})),LblThreadCellMapItem{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'thread'-GT-'{}(Var'Unds'Gen0:SortIdCell{},Lbl'-LT-'k'-GT-'{}(Var'Unds'DotVar5:SortK{}),Var'Unds'Gen1:SortEnvCell{}))),Var'Unds'DotVar2:SortThreadCellMap{})),Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}),Var'Unds'DotVar0:SortGeneratedCounterCell{})))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(108,8,108,78)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("52fdf4aa5a24f0b2f2a1e81acbe4d218b2d4a3269d3e19b138bfa859d1e057ae")]

// rule `Bool2String(_)_STRING-COMMON_String_Bool`(#token("false","Bool"))=>#token("\"false\"","String") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(cca4780e4e7660055f781b9643f3125234a0f4f08ba76cacf8e5a18fe7fc999f), org.kframework.attributes.Location(Location(1585,8,1585,37)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("false")
          ),
          \top{R} ()
        )),
    \equals{SortString{},R} (
      LblBool2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Bool{}(X0:SortBool{}),
     \and{SortString{}} (
       \dv{SortString{}}("false"),
        \top{SortString{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1585,8,1585,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("cca4780e4e7660055f781b9643f3125234a0f4f08ba76cacf8e5a18fe7fc999f")]

// rule `Bool2String(_)_STRING-COMMON_String_Bool`(#token("true","Bool"))=>#token("\"true\"","String") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(365df37345a5a44ac061f8741369c7bd74a49f0f6e7b716be0374806dd1add3d), org.kframework.attributes.Location(Location(1584,8,1584,36)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("true")
          ),
          \top{R} ()
        )),
    \equals{SortString{},R} (
      LblBool2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Bool{}(X0:SortBool{}),
     \and{SortString{}} (
       \dv{SortString{}}("true"),
        \top{SortString{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1584,8,1584,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("365df37345a5a44ac061f8741369c7bd74a49f0f6e7b716be0374806dd1add3d")]

// rule `String2Bool(_)_STRING-COMMON_Bool_String`(#token("\"false\"","String"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b73b5c8e0ae45020f2b9b8170d366691fee01a63763b79653a2075703ec4e835), org.kframework.attributes.Location(Location(1591,8,1591,37)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            \dv{SortString{}}("false")
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblString2Bool'LParUndsRParUnds'STRING-COMMON'Unds'Bool'Unds'String{}(X0:SortString{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1591,8,1591,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("b73b5c8e0ae45020f2b9b8170d366691fee01a63763b79653a2075703ec4e835")]

// rule `String2Bool(_)_STRING-COMMON_Bool_String`(#token("\"true\"","String"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(27a5d1d7872d61f82556a4e44bda13846dde7dc2d9c54304d7858de9a8b9d6b8), org.kframework.attributes.Location(Location(1590,8,1590,36)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            \dv{SortString{}}("true")
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblString2Bool'LParUndsRParUnds'STRING-COMMON'Unds'Bool'Unds'String{}(X0:SortString{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1590,8,1590,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("27a5d1d7872d61f82556a4e44bda13846dde7dc2d9c54304d7858de9a8b9d6b8")]

// rule `ThreadCellMapKey`(`<thread>`(Key,_Gen0,_Gen1))=>Key requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e802d3da416687d81f220c032238ab3b9417ad82017ade7e981e5884ed19e52f)]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortThreadCell{}, R} (
            X0:SortThreadCell{},
            Lbl'-LT-'thread'-GT-'{}(VarKey:SortIdCell{},Var'Unds'Gen0:SortKCell{},Var'Unds'Gen1:SortEnvCell{})
          ),
          \top{R} ()
        )),
    \equals{SortIdCell{},R} (
      LblThreadCellMapKey{}(X0:SortThreadCell{}),
     \and{SortIdCell{}} (
       VarKey:SortIdCell{},
        \top{SortIdCell{}}())))
  [UNIQUE'Unds'ID{}("e802d3da416687d81f220c032238ab3b9417ad82017ade7e981e5884ed19e52f")]

// rule `_<=String__STRING-COMMON_Bool_String_String`(S1,S2)=>`notBool_`(`_<String__STRING-COMMON_Bool_String_String`(S2,S1)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9e50fb4dcba1212ee863c170298cb8b555f39fb3b4bcb649f3d1d8e321accc80), org.kframework.attributes.Location(Location(1684,8,1684,63)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarS1:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarS2:SortString{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds-LT-Eqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(X0:SortString{},X1:SortString{}),
     \and{SortBool{}} (
       LblnotBool'Unds'{}(Lbl'Unds-LT-'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(VarS2:SortString{},VarS1:SortString{})),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1684,8,1684,63)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("9e50fb4dcba1212ee863c170298cb8b555f39fb3b4bcb649f3d1d8e321accc80")]

// rule `_=/=Bool_`(B1,B2)=>`notBool_`(`_==Bool_`(B1,B2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(31fe72efcfddcd8588a11d9d10c1b1a9f96ae3da46b647d4cb9d1e8b1bd1654f), org.kframework.attributes.Location(Location(960,8,960,57)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarB1:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            VarB2:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'UndsEqlsSlshEqls'Bool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'Bool'Unds'{}(VarB1:SortBool{},VarB2:SortBool{})),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(960,8,960,57)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("31fe72efcfddcd8588a11d9d10c1b1a9f96ae3da46b647d4cb9d1e8b1bd1654f")]

// rule `_=/=Int_`(I1,I2)=>`notBool_`(`_==Int_`(I1,I2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4de6e05b11cdbed7ef5cb4c952127924661af4744c1e495370e1c8a962ba7be3), org.kframework.attributes.Location(Location(1250,8,1250,53)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortInt{}, R} (
            X0:SortInt{},
            VarI1:SortInt{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X1:SortInt{},
            VarI2:SortInt{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'UndsEqlsSlshEqls'Int'Unds'{}(X0:SortInt{},X1:SortInt{}),
     \and{SortBool{}} (
       LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{})),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1250,8,1250,53)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("4de6e05b11cdbed7ef5cb4c952127924661af4744c1e495370e1c8a962ba7be3")]

// rule `_=/=K_`(K1,K2)=>`notBool_`(`_==K_`(K1,K2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(bccaba7335e4cd77501a0667f2f7b3eb4a2105d5f60d804915dd4b1b08902c0c), org.kframework.attributes.Location(Location(2220,8,2220,45)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK1:SortK{}
          ),\and{R} (
          \in{SortK{}, R} (
            X1:SortK{},
            VarK2:SortK{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'UndsEqlsSlshEqls'K'Unds'{}(X0:SortK{},X1:SortK{}),
     \and{SortBool{}} (
       LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'K'Unds'{}(VarK1:SortK{},VarK2:SortK{})),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2220,8,2220,45)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("bccaba7335e4cd77501a0667f2f7b3eb4a2105d5f60d804915dd4b1b08902c0c")]

// rule `_=/=String__STRING-COMMON_Bool_String_String`(S1,S2)=>`notBool_`(`_==String__STRING-COMMON_Bool_String_String`(S1,S2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f390a9b650f3de0e3a93773a46e65aae3decdeb2a10906058f204f031681c9b7), org.kframework.attributes.Location(Location(1664,8,1664,65)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarS1:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarS2:SortString{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(X0:SortString{},X1:SortString{}),
     \and{SortBool{}} (
       LblnotBool'Unds'{}(Lbl'UndsEqlsEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{})),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1664,8,1664,65)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("f390a9b650f3de0e3a93773a46e65aae3decdeb2a10906058f204f031681c9b7")]

// rule `_>=String__STRING-COMMON_Bool_String_String`(S1,S2)=>`notBool_`(`_<String__STRING-COMMON_Bool_String_String`(S1,S2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b376ffb0925555ed27696d73fc8fe43306e2005e4cf6ad819e860958992f9f17), org.kframework.attributes.Location(Location(1686,8,1686,63)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarS1:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarS2:SortString{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds-GT-Eqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(X0:SortString{},X1:SortString{}),
     \and{SortBool{}} (
       LblnotBool'Unds'{}(Lbl'Unds-LT-'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(VarS1:SortString{},VarS2:SortString{})),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1686,8,1686,63)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("b376ffb0925555ed27696d73fc8fe43306e2005e4cf6ad819e860958992f9f17")]

// rule `_>String__STRING-COMMON_Bool_String_String`(S1,S2)=>`_<String__STRING-COMMON_Bool_String_String`(S2,S1) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8e5353c0a58491f8613ad7a35d0833206c342df0c91773e42485e52f4dad0cd0), org.kframework.attributes.Location(Location(1685,8,1685,52)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarS1:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarS2:SortString{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds-GT-'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(X0:SortString{},X1:SortString{}),
     \and{SortBool{}} (
       Lbl'Unds-LT-'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(VarS2:SortString{},VarS1:SortString{}),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1685,8,1685,52)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("8e5353c0a58491f8613ad7a35d0833206c342df0c91773e42485e52f4dad0cd0")]

// rule `_andBool_`(#token("false","Bool") #as _Gen1,_Gen0)=>_Gen1 requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(61fbef33b3611f1cc2aaf3b5e8ddec4a0f434c557278c38461c65c8722743497), org.kframework.attributes.Location(Location(933,8,933,37)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \and{SortBool{}}(\dv{SortBool{}}("false"),Var'Unds'Gen1:SortBool{})
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            Var'Unds'Gen0:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'andBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       Var'Unds'Gen1:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(933,8,933,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("61fbef33b3611f1cc2aaf3b5e8ddec4a0f434c557278c38461c65c8722743497")]

// rule `_andBool_`(B,#token("true","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e8d4ca75a690151f99f8904b068db555782f5599b11230a9d0b97a71afb6fc98), org.kframework.attributes.Location(Location(932,8,932,37)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarB:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \dv{SortBool{}}("true")
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'andBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarB:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(932,8,932,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("e8d4ca75a690151f99f8904b068db555782f5599b11230a9d0b97a71afb6fc98")]

// rule `_andBool_`(_Gen0,#token("false","Bool") #as _Gen1)=>_Gen1 requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9c183fae7de06f560180386d14d29c609cadf0c98266ce2adbecb50100a1daca), org.kframework.attributes.Location(Location(934,8,934,37)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            Var'Unds'Gen0:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \and{SortBool{}}(\dv{SortBool{}}("false"),Var'Unds'Gen1:SortBool{})
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'andBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       Var'Unds'Gen1:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(934,8,934,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("9c183fae7de06f560180386d14d29c609cadf0c98266ce2adbecb50100a1daca")]

// rule `_andBool_`(#token("true","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5b9db8dba12010819161cc42dadccd0adf0100a47c21f884ae66c0a3d5483a1f), org.kframework.attributes.Location(Location(931,8,931,37)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("true")
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            VarB:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'andBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarB:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(931,8,931,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("5b9db8dba12010819161cc42dadccd0adf0100a47c21f884ae66c0a3d5483a1f")]

// rule `_andThenBool_`(#token("false","Bool") #as _Gen1,_Gen0)=>_Gen1 requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5b729746be7bf2183d9eff138d97078a7c9489def6d8b2e1495c41ce3954997d), org.kframework.attributes.Location(Location(938,8,938,36)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \and{SortBool{}}(\dv{SortBool{}}("false"),Var'Unds'Gen1:SortBool{})
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            Var'Unds'Gen0:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'andThenBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       Var'Unds'Gen1:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(938,8,938,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("5b729746be7bf2183d9eff138d97078a7c9489def6d8b2e1495c41ce3954997d")]

// rule `_andThenBool_`(K,#token("true","Bool"))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(82ac30b094be9b12206773d87b60274e929a41ca595f4674be1d37eeff873d7c), org.kframework.attributes.Location(Location(937,8,937,37)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarK:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \dv{SortBool{}}("true")
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'andThenBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarK:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(937,8,937,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("82ac30b094be9b12206773d87b60274e929a41ca595f4674be1d37eeff873d7c")]

// rule `_andThenBool_`(_Gen0,#token("false","Bool") #as _Gen1)=>_Gen1 requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0508592878b546cbc6eeda6ec7b322584eea5c6d6eea3f72be8418fe4f7149b2), org.kframework.attributes.Location(Location(939,8,939,36)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            Var'Unds'Gen0:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \and{SortBool{}}(\dv{SortBool{}}("false"),Var'Unds'Gen1:SortBool{})
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'andThenBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       Var'Unds'Gen1:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(939,8,939,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("0508592878b546cbc6eeda6ec7b322584eea5c6d6eea3f72be8418fe4f7149b2")]

// rule `_andThenBool_`(#token("true","Bool"),K)=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(78a3191cbbdec57b0f411f41291076c8124bb0d9b6b57905674b2c6858d78689), org.kframework.attributes.Location(Location(936,8,936,37)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("true")
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            VarK:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'andThenBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarK:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(936,8,936,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("78a3191cbbdec57b0f411f41291076c8124bb0d9b6b57905674b2c6858d78689")]

// rule `_divInt_`(I1,I2)=>`_/Int_`(`_-Int_`(I1,`_modInt_`(I1,I2)),I2) requires `_=/=Int_`(I2,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(83dcf9bc8c69f131715bc7a92d06c99b9a2b5f4c4fdafb69e6fdb2f1822712d4), org.kframework.attributes.Location(Location(1239,8,1240,23)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'Int'Unds'{}(VarI2:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortInt{}, R} (
            X0:SortInt{},
            VarI1:SortInt{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X1:SortInt{},
            VarI2:SortInt{}
          ),
          \top{R} ()
        ))),
    \equals{SortInt{},R} (
      Lbl'Unds'divInt'Unds'{}(X0:SortInt{},X1:SortInt{}),
     \and{SortInt{}} (
       Lbl'UndsSlsh'Int'Unds'{}(Lbl'Unds'-Int'Unds'{}(VarI1:SortInt{},Lbl'Unds'modInt'Unds'{}(VarI1:SortInt{},VarI2:SortInt{})),VarI2:SortInt{}),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1239,8,1240,23)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("83dcf9bc8c69f131715bc7a92d06c99b9a2b5f4c4fdafb69e6fdb2f1822712d4")]

// rule `_dividesInt__INT-COMMON_Bool_Int_Int`(I1,I2)=>`_==Int_`(`_%Int_`(I2,I1),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(fd8facae0061fe5bc5c406f7ad2ed5d8d21960bf1118c9b240451253064dadb5), org.kframework.attributes.Location(Location(1251,8,1251,58)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortInt{}, R} (
            X0:SortInt{},
            VarI1:SortInt{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X1:SortInt{},
            VarI2:SortInt{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'dividesInt'UndsUnds'INT-COMMON'Unds'Bool'Unds'Int'Unds'Int{}(X0:SortInt{},X1:SortInt{}),
     \and{SortBool{}} (
       Lbl'UndsEqlsEqls'Int'Unds'{}(Lbl'UndsPerc'Int'Unds'{}(VarI2:SortInt{},VarI1:SortInt{}),\dv{SortInt{}}("0")),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1251,8,1251,58)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("fd8facae0061fe5bc5c406f7ad2ed5d8d21960bf1118c9b240451253064dadb5")]

// rule `_impliesBool_`(B,#token("false","Bool"))=>`notBool_`(B) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(022c562a21d72cedfb795607d2249b8ad14b66399b720b3b2f4a05a1da08df96), org.kframework.attributes.Location(Location(958,8,958,45)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarB:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \dv{SortBool{}}("false")
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'impliesBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       LblnotBool'Unds'{}(VarB:SortBool{}),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(958,8,958,45)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("022c562a21d72cedfb795607d2249b8ad14b66399b720b3b2f4a05a1da08df96")]

// rule `_impliesBool_`(_Gen0,#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(99ba64afc26a739953df142ccd4b486bba68107fce8c9aa356d40afa7a988712), org.kframework.attributes.Location(Location(957,8,957,39)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            Var'Unds'Gen0:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \dv{SortBool{}}("true")
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'impliesBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(957,8,957,39)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("99ba64afc26a739953df142ccd4b486bba68107fce8c9aa356d40afa7a988712")]

// rule `_impliesBool_`(#token("false","Bool"),_Gen0)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(55bb5c83c9563c712537b95401c0a5c88255fd7cdbd18b2d4358c54aee80660e), org.kframework.attributes.Location(Location(956,8,956,40)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("false")
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            Var'Unds'Gen0:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'impliesBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(956,8,956,40)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("55bb5c83c9563c712537b95401c0a5c88255fd7cdbd18b2d4358c54aee80660e")]

// rule `_impliesBool_`(#token("true","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(da818c43c21c5fb2cced7e02a74b6b4191d323de2967a671b961ad28550f3c7d), org.kframework.attributes.Location(Location(955,8,955,36)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("true")
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            VarB:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'impliesBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarB:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(955,8,955,36)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("da818c43c21c5fb2cced7e02a74b6b4191d323de2967a671b961ad28550f3c7d")]

// rule `_modInt_`(I1,I2)=>`_%Int_`(`_+Int_`(`_%Int_`(I1,`absInt(_)_INT-COMMON_Int_Int`(I2)),`absInt(_)_INT-COMMON_Int_Int`(I2)),`absInt(_)_INT-COMMON_Int_Int`(I2)) requires `_=/=Int_`(I2,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(adfacb58b0678a49f66186954229939a953c9849d5b08edc8f887c0d7514b2c6), concrete, org.kframework.attributes.Location(Location(1242,5,1245,23)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), simplification]
  axiom{R} \implies{R} (
    \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'Int'Unds'{}(VarI2:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
    \equals{SortInt{},R} (
      Lbl'Unds'modInt'Unds'{}(VarI1:SortInt{},VarI2:SortInt{}),
     \and{SortInt{}} (
       Lbl'UndsPerc'Int'Unds'{}(Lbl'UndsPlus'Int'Unds'{}(Lbl'UndsPerc'Int'Unds'{}(VarI1:SortInt{},LblabsInt'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(VarI2:SortInt{})),LblabsInt'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(VarI2:SortInt{})),LblabsInt'LParUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int{}(VarI2:SortInt{})),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), concrete{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1242,5,1245,23)"), simplification{}(), UNIQUE'Unds'ID{}("adfacb58b0678a49f66186954229939a953c9849d5b08edc8f887c0d7514b2c6")]

// rule `_orBool_`(B,#token("false","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d7245713da157cf997438091f92bb78eb51a6cefa568bb0d30560ce08d647f26), org.kframework.attributes.Location(Location(948,8,948,32)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarB:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \dv{SortBool{}}("false")
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'orBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarB:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(948,8,948,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("d7245713da157cf997438091f92bb78eb51a6cefa568bb0d30560ce08d647f26")]

// rule `_orBool_`(_Gen0,#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(47860d52c18a441b229449cd89d5464256137dc32deb5551effbac0482c883f3), org.kframework.attributes.Location(Location(946,8,946,34)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            Var'Unds'Gen0:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \dv{SortBool{}}("true")
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'orBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(946,8,946,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("47860d52c18a441b229449cd89d5464256137dc32deb5551effbac0482c883f3")]

// rule `_orBool_`(#token("false","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(991a3290bc7b6dca75d676a72a848ec6b2bd2827fb0e9626252aa1507394ca1b), org.kframework.attributes.Location(Location(947,8,947,32)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("false")
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            VarB:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'orBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarB:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(947,8,947,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("991a3290bc7b6dca75d676a72a848ec6b2bd2827fb0e9626252aa1507394ca1b")]

// rule `_orBool_`(#token("true","Bool"),_Gen0)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(71744528cdad83bc729990d3af3b544d27b09630b2615ca707dd2fc6ec93e7c2), org.kframework.attributes.Location(Location(945,8,945,34)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("true")
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            Var'Unds'Gen0:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'orBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(945,8,945,34)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("71744528cdad83bc729990d3af3b544d27b09630b2615ca707dd2fc6ec93e7c2")]

// rule `_orElseBool_`(K,#token("false","Bool"))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(684b0444a1f711d49ff1502423a3346fb26958697423db488b05d25081fc0480), org.kframework.attributes.Location(Location(953,8,953,37)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarK:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \dv{SortBool{}}("false")
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'orElseBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarK:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(953,8,953,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("684b0444a1f711d49ff1502423a3346fb26958697423db488b05d25081fc0480")]

// rule `_orElseBool_`(_Gen0,#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c9eccff94ecf6e810c600d4536bf1701485c13c3456c6b98c0cdab0fe7c5af14), org.kframework.attributes.Location(Location(951,8,951,33)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            Var'Unds'Gen0:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \dv{SortBool{}}("true")
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'orElseBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(951,8,951,33)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("c9eccff94ecf6e810c600d4536bf1701485c13c3456c6b98c0cdab0fe7c5af14")]

// rule `_orElseBool_`(#token("false","Bool"),K)=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(eb8c85dac19a5951f694b65269c2b17c80d6d126d6a367958e4a5d736a880ecf), org.kframework.attributes.Location(Location(952,8,952,37)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("false")
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            VarK:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'orElseBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarK:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(952,8,952,37)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("eb8c85dac19a5951f694b65269c2b17c80d6d126d6a367958e4a5d736a880ecf")]

// rule `_orElseBool_`(#token("true","Bool"),_Gen0)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(354bd0860c7f38b59e285c935fd2ea553ebddbabb4973342ad25f0dac6ea7bf6), org.kframework.attributes.Location(Location(950,8,950,33)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("true")
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            Var'Unds'Gen0:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'orElseBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(950,8,950,33)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("354bd0860c7f38b59e285c935fd2ea553ebddbabb4973342ad25f0dac6ea7bf6")]

// rule `_xorBool_`(B,B)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9a6d91cd75cd777b0d4db536b3e4b20578e74fe650e644b55294da95fd2dba7f), org.kframework.attributes.Location(Location(943,8,943,38)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarB:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            VarB:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'xorBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(943,8,943,38)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("9a6d91cd75cd777b0d4db536b3e4b20578e74fe650e644b55294da95fd2dba7f")]

// rule `_xorBool_`(B,#token("false","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7a2851f9d4ea4bd3f35070ee029fc3bdca36e361f7ee54addeff9d10ddeb7c75), org.kframework.attributes.Location(Location(942,8,942,38)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            VarB:SortBool{}
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            \dv{SortBool{}}("false")
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'xorBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarB:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(942,8,942,38)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("7a2851f9d4ea4bd3f35070ee029fc3bdca36e361f7ee54addeff9d10ddeb7c75")]

// rule `_xorBool_`(#token("false","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(73513655c09a595907ab9d26d67e27f01d14a3435743b77000c02d10f35c05bf), org.kframework.attributes.Location(Location(941,8,941,38)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("false")
          ),\and{R} (
          \in{SortBool{}, R} (
            X1:SortBool{},
            VarB:SortBool{}
          ),
          \top{R} ()
        ))),
    \equals{SortBool{},R} (
      Lbl'Unds'xorBool'Unds'{}(X0:SortBool{},X1:SortBool{}),
     \and{SortBool{}} (
       VarB:SortBool{},
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(941,8,941,38)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("73513655c09a595907ab9d26d67e27f01d14a3435743b77000c02d10f35c05bf")]

// rule `_|Set__SET_Set_Set_Set`(S1,S2)=>`_Set_`(S1,`Set:difference`(S2,S1)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e9a710d8d1ca5c799420161879cbbff926de45a5bddd820d646f51d43eb67e62), concrete, org.kframework.attributes.Location(Location(559,8,559,45)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortSet{}, R} (
            X0:SortSet{},
            VarS1:SortSet{}
          ),\and{R} (
          \in{SortSet{}, R} (
            X1:SortSet{},
            VarS2:SortSet{}
          ),
          \top{R} ()
        ))),
    \equals{SortSet{},R} (
      Lbl'UndsPipe'Set'UndsUnds'SET'Unds'Set'Unds'Set'Unds'Set{}(X0:SortSet{},X1:SortSet{}),
     \and{SortSet{}} (
       Lbl'Unds'Set'Unds'{}(VarS1:SortSet{},LblSet'Coln'difference{}(VarS2:SortSet{},VarS1:SortSet{})),
        \top{SortSet{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), concrete{}(), org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(559,8,559,45)"), UNIQUE'Unds'ID{}("e9a710d8d1ca5c799420161879cbbff926de45a5bddd820d646f51d43eb67e62")]

// rule `bitRangeInt(_,_,_)_INT-COMMON_Int_Int_Int_Int`(I,IDX,LEN)=>`_modInt_`(`_>>Int_`(I,IDX),`_<<Int_`(#token("1","Int"),LEN)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(147fc15c2ec6c36de1a9c0cad6212b8acd8b224f21c0aeabd36726e9c8a06119), org.kframework.attributes.Location(Location(1235,8,1235,85)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortInt{}, R} (
            X0:SortInt{},
            VarI:SortInt{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X1:SortInt{},
            VarIDX:SortInt{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X2:SortInt{},
            VarLEN:SortInt{}
          ),
          \top{R} ()
        )))),
    \equals{SortInt{},R} (
      LblbitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(X0:SortInt{},X1:SortInt{},X2:SortInt{}),
     \and{SortInt{}} (
       Lbl'Unds'modInt'Unds'{}(Lbl'Unds-GT--GT-'Int'Unds'{}(VarI:SortInt{},VarIDX:SortInt{}),Lbl'Unds-LT--LT-'Int'Unds'{}(\dv{SortInt{}}("1"),VarLEN:SortInt{})),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1235,8,1235,85)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("147fc15c2ec6c36de1a9c0cad6212b8acd8b224f21c0aeabd36726e9c8a06119")]

// rule `countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(Source,ToCount)=>`_+Int_`(#token("1","Int"),`countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,`_+Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToCount,#token("0","Int")),`lengthString(_)_STRING-COMMON_Int_String`(ToCount)),`lengthString(_)_STRING-COMMON_Int_String`(Source)),ToCount)) requires `_>=Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToCount,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(628cff029a6d79e4c99999c0309f91ab8cb12f0ba549bb3faa850f96304c970e), org.kframework.attributes.Location(Location(1695,8,1696,60)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'Unds-GT-Eqls'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToCount:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarSource:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarToCount:SortString{}
          ),
          \top{R} ()
        ))),
    \equals{SortInt{},R} (
      LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String{}(X0:SortString{},X1:SortString{}),
     \and{SortInt{}} (
       Lbl'UndsPlus'Int'Unds'{}(\dv{SortInt{}}("1"),LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},Lbl'UndsPlus'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToCount:SortString{},\dv{SortInt{}}("0")),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarToCount:SortString{})),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarSource:SortString{})),VarToCount:SortString{})),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1695,8,1696,60)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("628cff029a6d79e4c99999c0309f91ab8cb12f0ba549bb3faa850f96304c970e")]

// rule `countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(Source,ToCount)=>#token("0","Int") requires `_<Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToCount,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(1c726cd81629c2e5f411539a7f9b4d297e8600e5d71a5d235d287e3001f3ec84), org.kframework.attributes.Location(Location(1693,8,1694,59)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'Unds-LT-'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToCount:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarSource:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarToCount:SortString{}
          ),
          \top{R} ()
        ))),
    \equals{SortInt{},R} (
      LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String{}(X0:SortString{},X1:SortString{}),
     \and{SortInt{}} (
       \dv{SortInt{}}("0"),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1693,8,1694,59)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("1c726cd81629c2e5f411539a7f9b4d297e8600e5d71a5d235d287e3001f3ec84")]

// rule `findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,S2,I)=>`#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`{Int}(`_==Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),#token("-1","Int")),`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(S2)),I),`#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`{Int}(`_==Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(S2)),I),#token("-1","Int")),`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`minInt(_,_)_INT-COMMON_Int_Int_Int`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(S2)),I)))) requires `_=/=String__STRING-COMMON_Bool_String_String`(S2,#token("\"\"","String")) ensures #token("true","Bool") [UNIQUE_ID(9a3b7d1924363894c859ceb6bcec34fb944f01a5e0c90679d41b8430990b7295), org.kframework.attributes.Location(Location(1688,8,1688,431)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(VarS2:SortString{},\dv{SortString{}}("")),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarS1:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarS2:SortString{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X2:SortInt{},
            VarI:SortInt{}
          ),
          \top{R} ()
        )))),
    \equals{SortInt{},R} (
      LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(X0:SortString{},X1:SortString{},X2:SortInt{}),
     \and{SortInt{}} (
       Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL-SYNTAX'Unds'Sort'Unds'Bool'Unds'Sort'Unds'Sort{SortInt{}}(Lbl'UndsEqlsEqls'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),\dv{SortInt{}}("-1")),LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarS2:SortString{})),VarI:SortInt{}),Lbl'Hash'if'UndsHash'then'UndsHash'else'UndsHash'fi'Unds'K-EQUAL-SYNTAX'Unds'Sort'Unds'Bool'Unds'Sort'Unds'Sort{SortInt{}}(Lbl'UndsEqlsEqls'Int'Unds'{}(LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarS2:SortString{})),VarI:SortInt{}),\dv{SortInt{}}("-1")),LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),LblminInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarS2:SortString{})),VarI:SortInt{})))),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1688,8,1688,431)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("9a3b7d1924363894c859ceb6bcec34fb944f01a5e0c90679d41b8430990b7295")]

// rule `findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(_Gen0,#token("\"\"","String"),_Gen1)=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5a6cf981f0ec2494854cd3e517b0cf645a1c9762c92a14849adfca9a6a553117), org.kframework.attributes.Location(Location(1689,8,1689,32)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            Var'Unds'Gen0:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            \dv{SortString{}}("")
          ),\and{R} (
          \in{SortInt{}, R} (
            X2:SortInt{},
            Var'Unds'Gen1:SortInt{}
          ),
          \top{R} ()
        )))),
    \equals{SortInt{},R} (
      LblfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(X0:SortString{},X1:SortString{},X2:SortInt{}),
     \and{SortInt{}} (
       \dv{SortInt{}}("-1"),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1689,8,1689,32)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("5a6cf981f0ec2494854cd3e517b0cf645a1c9762c92a14849adfca9a6a553117")]

// rule `freshId(_)_ID-COMMON_Id_Int`(I)=>`String2Id(_)_ID-COMMON_Id_String`(`_+String__STRING-COMMON_String_String_String`(#token("\"_\"","String"),`Int2String(_)_STRING-COMMON_String_Int`(I))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3965c8e65257ebae926d601fa8ac672d34e4c211d73ba594c571c6bc5960f3de), org.kframework.attributes.Location(Location(2146,8,2146,62)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortInt{}, R} (
            X0:SortInt{},
            VarI:SortInt{}
          ),
          \top{R} ()
        )),
    \equals{SortId{},R} (
      LblfreshId'LParUndsRParUnds'ID-COMMON'Unds'Id'Unds'Int{}(X0:SortInt{}),
     \and{SortId{}} (
       LblString2Id'LParUndsRParUnds'ID-COMMON'Unds'Id'Unds'String{}(Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(\dv{SortString{}}("_"),LblInt2String'LParUndsRParUnds'STRING-COMMON'Unds'String'Unds'Int{}(VarI:SortInt{}))),
        \top{SortId{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(2146,8,2146,62)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("3965c8e65257ebae926d601fa8ac672d34e4c211d73ba594c571c6bc5960f3de")]

// rule `freshInt(_)_INT_Int_Int`(I)=>I requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(cf2cb8f038b4bdc4edb1334a3b8ced9cd296a7af43f0a1916e082a4e1aefa08b), org.kframework.attributes.Location(Location(1254,8,1254,28)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortInt{}, R} (
            X0:SortInt{},
            VarI:SortInt{}
          ),
          \top{R} ()
        )),
    \equals{SortInt{},R} (
      LblfreshInt'LParUndsRParUnds'INT'Unds'Int'Unds'Int{}(X0:SortInt{}),
     \and{SortInt{}} (
       VarI:SortInt{},
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1254,8,1254,28)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("cf2cb8f038b4bdc4edb1334a3b8ced9cd296a7af43f0a1916e082a4e1aefa08b")]

// rule getGeneratedCounterCell(`<generatedTop>`(_DotVar0,Cell))=>Cell requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortGeneratedTopCell{}, R} (
            X0:SortGeneratedTopCell{},
            Lbl'-LT-'generatedTop'-GT-'{}(Var'Unds'DotVar0:SortTCell{},VarCell:SortGeneratedCounterCell{})
          ),
          \top{R} ()
        )),
    \equals{SortGeneratedCounterCell{},R} (
      LblgetGeneratedCounterCell{}(X0:SortGeneratedTopCell{}),
     \and{SortGeneratedCounterCell{}} (
       VarCell:SortGeneratedCounterCell{},
        \top{SortGeneratedCounterCell{}}())))
  []

// rule initEnvCell(.KList)=>`<env>`(`.Map`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(00d428bbba5e1be4a85aba1c6d8e92413cb67f2b9e9b8fc00940b647db49b07a), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortEnvCell{},R} (
      LblinitEnvCell{}(),
     \and{SortEnvCell{}} (
       Lbl'-LT-'env'-GT-'{}(Lbl'Stop'Map{}()),
        \top{SortEnvCell{}}())))
  [initializer{}(), UNIQUE'Unds'ID{}("00d428bbba5e1be4a85aba1c6d8e92413cb67f2b9e9b8fc00940b647db49b07a")]

// rule initGeneratedCounterCell(.KList)=>`<generatedCounter>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortGeneratedCounterCell{},R} (
      LblinitGeneratedCounterCell{}(),
     \and{SortGeneratedCounterCell{}} (
       Lbl'-LT-'generatedCounter'-GT-'{}(\dv{SortInt{}}("0")),
        \top{SortGeneratedCounterCell{}}())))
  [initializer{}()]

// rule initGeneratedTopCell(Init)=>`<generatedTop>`(initTCell(Init),initGeneratedCounterCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortMap{}, R} (
            X0:SortMap{},
            VarInit:SortMap{}
          ),
          \top{R} ()
        )),
    \equals{SortGeneratedTopCell{},R} (
      LblinitGeneratedTopCell{}(X0:SortMap{}),
     \and{SortGeneratedTopCell{}} (
       Lbl'-LT-'generatedTop'-GT-'{}(LblinitTCell{}(VarInit:SortMap{}),LblinitGeneratedCounterCell{}()),
        \top{SortGeneratedTopCell{}}())))
  [initializer{}()]

// rule initIdCell(.KList)=>`<id>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(2a06b6a27a201eff054d451215437e05883ac11cae719271694b12cb59b7c6df), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortIdCell{},R} (
      LblinitIdCell{}(),
     \and{SortIdCell{}} (
       Lbl'-LT-'id'-GT-'{}(\dv{SortInt{}}("0")),
        \top{SortIdCell{}}())))
  [initializer{}(), UNIQUE'Unds'ID{}("2a06b6a27a201eff054d451215437e05883ac11cae719271694b12cb59b7c6df")]

// rule initInputCell(Init)=>`<input>`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(`project:String`(`Map:lookup`(Init,inj{KConfigVar,KItem}(#token("$STDIN","KConfigVar")))))))),`ListItem`(inj{String,KItem}(`project:String`(`Map:lookup`(Init,inj{KConfigVar,KItem}(#token("$IO","KConfigVar"))))))),`ListItem`(inj{Stream,KItem}(`#istream(_)_K-IO_Stream_Int`(`#stdin_K-IO_Int`(.KList)))))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(02dab0fdd06e535dc7414d9921d25b84e5e7b2a5ed0e971b567aee1acbd0ef48), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortMap{}, R} (
            X0:SortMap{},
            VarInit:SortMap{}
          ),
          \top{R} ()
        )),
    \equals{SortInputCell{},R} (
      LblinitInputCell{}(X0:SortMap{}),
     \and{SortInputCell{}} (
       Lbl'-LT-'input'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(Lblproject'Coln'String{}(kseq{}(LblMap'Coln'lookup{}(VarInit:SortMap{},inj{SortKConfigVar{}, SortKItem{}}(\dv{SortKConfigVar{}}("$STDIN"))),dotk{}()))),dotk{}())))),LblListItem{}(inj{SortString{}, SortKItem{}}(Lblproject'Coln'String{}(kseq{}(LblMap'Coln'lookup{}(VarInit:SortMap{},inj{SortKConfigVar{}, SortKItem{}}(\dv{SortKConfigVar{}}("$IO"))),dotk{}()))))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'istream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Lbl'Hash'stdin'Unds'K-IO'Unds'Int{}()))))),
        \top{SortInputCell{}}())))
  [initializer{}(), UNIQUE'Unds'ID{}("02dab0fdd06e535dc7414d9921d25b84e5e7b2a5ed0e971b567aee1acbd0ef48")]

// rule initKCell(Init)=>`<k>`(inj{Stmts,KItem}(`project:Stmts`(`Map:lookup`(Init,inj{KConfigVar,KItem}(#token("$PGM","KConfigVar")))))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9a69f118782bea2713e55c0dcc3655e47167aecbbc09ea867286fcb95e634d70), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortMap{}, R} (
            X0:SortMap{},
            VarInit:SortMap{}
          ),
          \top{R} ()
        )),
    \equals{SortKCell{},R} (
      LblinitKCell{}(X0:SortMap{}),
     \and{SortKCell{}} (
       Lbl'-LT-'k'-GT-'{}(kseq{}(inj{SortStmts{}, SortKItem{}}(Lblproject'Coln'Stmts{}(kseq{}(LblMap'Coln'lookup{}(VarInit:SortMap{},inj{SortKConfigVar{}, SortKItem{}}(\dv{SortKConfigVar{}}("$PGM"))),dotk{}()))),dotk{}())),
        \top{SortKCell{}}())))
  [initializer{}(), UNIQUE'Unds'ID{}("9a69f118782bea2713e55c0dcc3655e47167aecbbc09ea867286fcb95e634d70")]

// rule initOutputCell(Init)=>`<output>`(`_List_`(`_List_`(`ListItem`(inj{Stream,KItem}(`#ostream(_)_K-IO_Stream_Int`(`#stdout_K-IO_Int`(.KList)))),`ListItem`(inj{String,KItem}(`project:String`(`Map:lookup`(Init,inj{KConfigVar,KItem}(#token("$IO","KConfigVar"))))))),`ListItem`(inj{Stream,KItem}(`#buffer(_)_K-IO_Stream_K`(inj{String,KItem}(#token("\"\"","String"))))))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(fe4bbac01b7ae18be478d157df9368bcc1dd048a5bfb0e334cd02c0fc7d3c6a2), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortMap{}, R} (
            X0:SortMap{},
            VarInit:SortMap{}
          ),
          \top{R} ()
        )),
    \equals{SortOutputCell{},R} (
      LblinitOutputCell{}(X0:SortMap{}),
     \and{SortOutputCell{}} (
       Lbl'-LT-'output'-GT-'{}(Lbl'Unds'List'Unds'{}(Lbl'Unds'List'Unds'{}(LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'ostream'LParUndsRParUnds'K-IO'Unds'Stream'Unds'Int{}(Lbl'Hash'stdout'Unds'K-IO'Unds'Int{}()))),LblListItem{}(inj{SortString{}, SortKItem{}}(Lblproject'Coln'String{}(kseq{}(LblMap'Coln'lookup{}(VarInit:SortMap{},inj{SortKConfigVar{}, SortKItem{}}(\dv{SortKConfigVar{}}("$IO"))),dotk{}()))))),LblListItem{}(inj{SortStream{}, SortKItem{}}(Lbl'Hash'buffer'LParUndsRParUnds'K-IO'Unds'Stream'Unds'K{}(kseq{}(inj{SortString{}, SortKItem{}}(\dv{SortString{}}("")),dotk{}())))))),
        \top{SortOutputCell{}}())))
  [initializer{}(), UNIQUE'Unds'ID{}("fe4bbac01b7ae18be478d157df9368bcc1dd048a5bfb0e334cd02c0fc7d3c6a2")]

// rule initStoreCell(.KList)=>`<store>`(`.Map`(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(25c9fd48ffb4ae6d3301adb7ee16d732c9e7eff638e62fef57a687c62281f5ee), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      
          \top{R} ()
        ),
    \equals{SortStoreCell{},R} (
      LblinitStoreCell{}(),
     \and{SortStoreCell{}} (
       Lbl'-LT-'store'-GT-'{}(Lbl'Stop'Map{}()),
        \top{SortStoreCell{}}())))
  [initializer{}(), UNIQUE'Unds'ID{}("25c9fd48ffb4ae6d3301adb7ee16d732c9e7eff638e62fef57a687c62281f5ee")]

// rule initTCell(Init)=>`<T>`(initThreadsCell(Init),initStoreCell(.KList),initInputCell(Init),initOutputCell(Init)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0c222096c57e5b6ac3400f4e803e676f24981f47702c529664969da8bc991e0f), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortMap{}, R} (
            X0:SortMap{},
            VarInit:SortMap{}
          ),
          \top{R} ()
        )),
    \equals{SortTCell{},R} (
      LblinitTCell{}(X0:SortMap{}),
     \and{SortTCell{}} (
       Lbl'-LT-'T'-GT-'{}(LblinitThreadsCell{}(VarInit:SortMap{}),LblinitStoreCell{}(),LblinitInputCell{}(VarInit:SortMap{}),LblinitOutputCell{}(VarInit:SortMap{})),
        \top{SortTCell{}}())))
  [initializer{}(), UNIQUE'Unds'ID{}("0c222096c57e5b6ac3400f4e803e676f24981f47702c529664969da8bc991e0f")]

// rule initThreadCell(Init)=>`ThreadCellMapItem`(initIdCell(.KList),`<thread>`(initIdCell(.KList),initKCell(Init),initEnvCell(.KList))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(6294b5ce68e222949dab69c76d410a44b74d7b64b55ab8800b088164a5ee0393), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortMap{}, R} (
            X0:SortMap{},
            VarInit:SortMap{}
          ),
          \top{R} ()
        )),
    \equals{SortThreadCellMap{},R} (
      LblinitThreadCell{}(X0:SortMap{}),
     \and{SortThreadCellMap{}} (
       LblThreadCellMapItem{}(LblinitIdCell{}(),Lbl'-LT-'thread'-GT-'{}(LblinitIdCell{}(),LblinitKCell{}(VarInit:SortMap{}),LblinitEnvCell{}())),
        \top{SortThreadCellMap{}}())))
  [initializer{}(), UNIQUE'Unds'ID{}("6294b5ce68e222949dab69c76d410a44b74d7b64b55ab8800b088164a5ee0393")]

// rule initThreadsCell(Init)=>`<threads>`(initThreadCell(Init)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3e08d3c475b64c7e4b7a4038d9a7c5dd428a06793741278eb7bb82d182f92b0c), initializer]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortMap{}, R} (
            X0:SortMap{},
            VarInit:SortMap{}
          ),
          \top{R} ()
        )),
    \equals{SortThreadsCell{},R} (
      LblinitThreadsCell{}(X0:SortMap{}),
     \and{SortThreadsCell{}} (
       Lbl'-LT-'threads'-GT-'{}(LblinitThreadCell{}(VarInit:SortMap{})),
        \top{SortThreadsCell{}}())))
  [initializer{}(), UNIQUE'Unds'ID{}("3e08d3c475b64c7e4b7a4038d9a7c5dd428a06793741278eb7bb82d182f92b0c")]

// rule isAExp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortAExp{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortAExp{}, SortKItem{}}(Var'Unds'Gen1:SortAExp{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisAExp{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isAExp(inj{AExp,KItem}(AExp))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortAExp{}, SortKItem{}}(VarAExp:SortAExp{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisAExp{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isAExps(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortAExps{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortAExps{}, SortKItem{}}(Var'Unds'Gen1:SortAExps{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisAExps{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isAExps(inj{AExps,KItem}(AExps))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortAExps{}, SortKItem{}}(VarAExps:SortAExps{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisAExps{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isBExp(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortBExp{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortBExp{}, SortKItem{}}(Var'Unds'Gen0:SortBExp{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisBExp{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isBExp(inj{BExp,KItem}(BExp))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortBExp{}, SortKItem{}}(VarBExp:SortBExp{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisBExp{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isBlock(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortBlock{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortBlock{}, SortKItem{}}(Var'Unds'Gen0:SortBlock{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisBlock{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isBlock(inj{Block,KItem}(Block))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortBlock{}, SortKItem{}}(VarBlock:SortBlock{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisBlock{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isBool(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortBool{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortBool{}, SortKItem{}}(Var'Unds'Gen0:SortBool{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisBool{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isBool(inj{Bool,KItem}(Bool))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortBool{}, SortKItem{}}(VarBool:SortBool{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisBool{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isBottom(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortBottom{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortBottom{}, SortKItem{}}(Var'Unds'Gen1:SortBottom{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisBottom{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isBottom(inj{Bottom,KItem}(Bottom))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortBottom{}, SortKItem{}}(VarBottom:SortBottom{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisBottom{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isBottoms(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortBottoms{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortBottoms{}, SortKItem{}}(Var'Unds'Gen1:SortBottoms{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisBottoms{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isBottoms(inj{Bottoms,KItem}(Bottoms))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortBottoms{}, SortKItem{}}(VarBottoms:SortBottoms{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisBottoms{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isEnvCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortEnvCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortEnvCell{}, SortKItem{}}(Var'Unds'Gen1:SortEnvCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisEnvCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isEnvCell(inj{EnvCell,KItem}(EnvCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortEnvCell{}, SortKItem{}}(VarEnvCell:SortEnvCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisEnvCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isEnvCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortEnvCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortEnvCellOpt{}, SortKItem{}}(Var'Unds'Gen1:SortEnvCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisEnvCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isEnvCellOpt(inj{EnvCellOpt,KItem}(EnvCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortEnvCellOpt{}, SortKItem{}}(VarEnvCellOpt:SortEnvCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisEnvCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isFloat(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortFloat{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortFloat{}, SortKItem{}}(Var'Unds'Gen1:SortFloat{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisFloat{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isFloat(inj{Float,KItem}(Float))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortFloat{}, SortKItem{}}(VarFloat:SortFloat{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisFloat{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isGeneratedCounterCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortGeneratedCounterCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortGeneratedCounterCell{}, SortKItem{}}(Var'Unds'Gen1:SortGeneratedCounterCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisGeneratedCounterCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isGeneratedCounterCell(inj{GeneratedCounterCell,KItem}(GeneratedCounterCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedCounterCell{}, SortKItem{}}(VarGeneratedCounterCell:SortGeneratedCounterCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisGeneratedCounterCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isGeneratedCounterCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortGeneratedCounterCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortGeneratedCounterCellOpt{}, SortKItem{}}(Var'Unds'Gen1:SortGeneratedCounterCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisGeneratedCounterCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isGeneratedCounterCellOpt(inj{GeneratedCounterCellOpt,KItem}(GeneratedCounterCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedCounterCellOpt{}, SortKItem{}}(VarGeneratedCounterCellOpt:SortGeneratedCounterCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisGeneratedCounterCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isGeneratedTopCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortGeneratedTopCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortGeneratedTopCell{}, SortKItem{}}(Var'Unds'Gen1:SortGeneratedTopCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisGeneratedTopCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isGeneratedTopCell(inj{GeneratedTopCell,KItem}(GeneratedTopCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedTopCell{}, SortKItem{}}(VarGeneratedTopCell:SortGeneratedTopCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisGeneratedTopCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isGeneratedTopCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortGeneratedTopCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortGeneratedTopCellFragment{}, SortKItem{}}(Var'Unds'Gen0:SortGeneratedTopCellFragment{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisGeneratedTopCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isGeneratedTopCellFragment(inj{GeneratedTopCellFragment,KItem}(GeneratedTopCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedTopCellFragment{}, SortKItem{}}(VarGeneratedTopCellFragment:SortGeneratedTopCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisGeneratedTopCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isIOError(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortIOError{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortIOError{}, SortKItem{}}(Var'Unds'Gen1:SortIOError{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisIOError{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isIOError(inj{IOError,KItem}(IOError))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIOError{}, SortKItem{}}(VarIOError:SortIOError{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisIOError{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isIOFile(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortIOFile{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortIOFile{}, SortKItem{}}(Var'Unds'Gen0:SortIOFile{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisIOFile{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isIOFile(inj{IOFile,KItem}(IOFile))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIOFile{}, SortKItem{}}(VarIOFile:SortIOFile{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisIOFile{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isIOInt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortIOInt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortIOInt{}, SortKItem{}}(Var'Unds'Gen0:SortIOInt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisIOInt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isIOInt(inj{IOInt,KItem}(IOInt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIOInt{}, SortKItem{}}(VarIOInt:SortIOInt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisIOInt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isIOString(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortIOString{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortIOString{}, SortKItem{}}(Var'Unds'Gen1:SortIOString{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisIOString{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isIOString(inj{IOString,KItem}(IOString))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIOString{}, SortKItem{}}(VarIOString:SortIOString{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisIOString{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isId(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortId{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortId{}, SortKItem{}}(Var'Unds'Gen0:SortId{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisId{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isId(inj{Id,KItem}(Id))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortId{}, SortKItem{}}(VarId:SortId{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisId{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isIdCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortIdCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortIdCell{}, SortKItem{}}(Var'Unds'Gen1:SortIdCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisIdCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isIdCell(inj{IdCell,KItem}(IdCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIdCell{}, SortKItem{}}(VarIdCell:SortIdCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisIdCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isIdCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortIdCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortIdCellOpt{}, SortKItem{}}(Var'Unds'Gen1:SortIdCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisIdCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isIdCellOpt(inj{IdCellOpt,KItem}(IdCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIdCellOpt{}, SortKItem{}}(VarIdCellOpt:SortIdCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisIdCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isIds(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortIds{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortIds{}, SortKItem{}}(Var'Unds'Gen0:SortIds{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisIds{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isIds(inj{Ids,KItem}(Ids))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIds{}, SortKItem{}}(VarIds:SortIds{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisIds{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isInputCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortInputCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortInputCell{}, SortKItem{}}(Var'Unds'Gen1:SortInputCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisInputCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isInputCell(inj{InputCell,KItem}(InputCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortInputCell{}, SortKItem{}}(VarInputCell:SortInputCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisInputCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isInputCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortInputCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortInputCellOpt{}, SortKItem{}}(Var'Unds'Gen1:SortInputCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisInputCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isInputCellOpt(inj{InputCellOpt,KItem}(InputCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortInputCellOpt{}, SortKItem{}}(VarInputCellOpt:SortInputCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisInputCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isInt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortInt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortInt{}, SortKItem{}}(Var'Unds'Gen1:SortInt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisInt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isInt(inj{Int,KItem}(Int))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortInt{}, SortKItem{}}(VarInt:SortInt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisInt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isK(K)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisK{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isKCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortKCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortKCell{}, SortKItem{}}(Var'Unds'Gen1:SortKCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisKCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isKCell(inj{KCell,KItem}(KCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortKCell{}, SortKItem{}}(VarKCell:SortKCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisKCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isKCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortKCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortKCellOpt{}, SortKItem{}}(Var'Unds'Gen0:SortKCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisKCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isKCellOpt(inj{KCellOpt,KItem}(KCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortKCellOpt{}, SortKItem{}}(VarKCellOpt:SortKCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisKCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isKConfigVar(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortKConfigVar{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortKConfigVar{}, SortKItem{}}(Var'Unds'Gen1:SortKConfigVar{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisKConfigVar{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isKConfigVar(inj{KConfigVar,KItem}(KConfigVar))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortKConfigVar{}, SortKItem{}}(VarKConfigVar:SortKConfigVar{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisKConfigVar{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isKItem(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortKItem{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(Var'Unds'Gen1:SortKItem{},dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisKItem{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isKItem(KItem)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(VarKItem:SortKItem{},dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisKItem{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isKResult(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortKResult{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortKResult{}, SortKItem{}}(Var'Unds'Gen1:SortKResult{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisKResult{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isKResult(inj{KResult,KItem}(KResult))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortKResult{}, SortKItem{}}(VarKResult:SortKResult{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisKResult{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isList(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortList{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortList{}, SortKItem{}}(Var'Unds'Gen0:SortList{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisList{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isList(inj{List,KItem}(List))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortList{}, SortKItem{}}(VarList:SortList{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisList{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isMap(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortMap{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortMap{}, SortKItem{}}(Var'Unds'Gen1:SortMap{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisMap{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isMap(inj{Map,KItem}(Map))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortMap{}, SortKItem{}}(VarMap:SortMap{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisMap{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isOutputCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortOutputCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortOutputCell{}, SortKItem{}}(Var'Unds'Gen0:SortOutputCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisOutputCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isOutputCell(inj{OutputCell,KItem}(OutputCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortOutputCell{}, SortKItem{}}(VarOutputCell:SortOutputCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisOutputCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isOutputCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortOutputCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortOutputCellOpt{}, SortKItem{}}(Var'Unds'Gen1:SortOutputCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisOutputCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isOutputCellOpt(inj{OutputCellOpt,KItem}(OutputCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortOutputCellOpt{}, SortKItem{}}(VarOutputCellOpt:SortOutputCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisOutputCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isPrintable(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortPrintable{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortPrintable{}, SortKItem{}}(Var'Unds'Gen0:SortPrintable{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisPrintable{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isPrintable(inj{Printable,KItem}(Printable))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortPrintable{}, SortKItem{}}(VarPrintable:SortPrintable{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisPrintable{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isPrintables(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortPrintables{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortPrintables{}, SortKItem{}}(Var'Unds'Gen1:SortPrintables{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisPrintables{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isPrintables(inj{Printables,KItem}(Printables))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortPrintables{}, SortKItem{}}(VarPrintables:SortPrintables{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisPrintables{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isSet(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortSet{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortSet{}, SortKItem{}}(Var'Unds'Gen0:SortSet{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisSet{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isSet(inj{Set,KItem}(Set))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortSet{}, SortKItem{}}(VarSet:SortSet{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisSet{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isStmt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortStmt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortStmt{}, SortKItem{}}(Var'Unds'Gen0:SortStmt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisStmt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isStmt(inj{Stmt,KItem}(Stmt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStmt{}, SortKItem{}}(VarStmt:SortStmt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisStmt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isStmts(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortStmts{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortStmts{}, SortKItem{}}(Var'Unds'Gen1:SortStmts{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisStmts{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isStmts(inj{Stmts,KItem}(Stmts))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStmts{}, SortKItem{}}(VarStmts:SortStmts{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisStmts{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isStoreCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortStoreCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortStoreCell{}, SortKItem{}}(Var'Unds'Gen1:SortStoreCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisStoreCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isStoreCell(inj{StoreCell,KItem}(StoreCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStoreCell{}, SortKItem{}}(VarStoreCell:SortStoreCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisStoreCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isStoreCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortStoreCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortStoreCellOpt{}, SortKItem{}}(Var'Unds'Gen1:SortStoreCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisStoreCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isStoreCellOpt(inj{StoreCellOpt,KItem}(StoreCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStoreCellOpt{}, SortKItem{}}(VarStoreCellOpt:SortStoreCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisStoreCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isStream(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortStream{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortStream{}, SortKItem{}}(Var'Unds'Gen1:SortStream{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisStream{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isStream(inj{Stream,KItem}(Stream))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStream{}, SortKItem{}}(VarStream:SortStream{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisStream{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isString(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortString{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortString{}, SortKItem{}}(Var'Unds'Gen1:SortString{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisString{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isString(inj{String,KItem}(String))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortString{}, SortKItem{}}(VarString:SortString{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisString{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isTCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortTCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortTCell{}, SortKItem{}}(Var'Unds'Gen1:SortTCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisTCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isTCell(inj{TCell,KItem}(TCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortTCell{}, SortKItem{}}(VarTCell:SortTCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisTCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isTCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortTCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortTCellFragment{}, SortKItem{}}(Var'Unds'Gen1:SortTCellFragment{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisTCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isTCellFragment(inj{TCellFragment,KItem}(TCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortTCellFragment{}, SortKItem{}}(VarTCellFragment:SortTCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisTCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isTCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortTCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortTCellOpt{}, SortKItem{}}(Var'Unds'Gen1:SortTCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisTCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isTCellOpt(inj{TCellOpt,KItem}(TCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortTCellOpt{}, SortKItem{}}(VarTCellOpt:SortTCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisTCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isThreadCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortThreadCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortThreadCell{}, SortKItem{}}(Var'Unds'Gen1:SortThreadCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisThreadCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isThreadCell(inj{ThreadCell,KItem}(ThreadCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadCell{}, SortKItem{}}(VarThreadCell:SortThreadCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisThreadCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isThreadCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortThreadCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortThreadCellFragment{}, SortKItem{}}(Var'Unds'Gen1:SortThreadCellFragment{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisThreadCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isThreadCellFragment(inj{ThreadCellFragment,KItem}(ThreadCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadCellFragment{}, SortKItem{}}(VarThreadCellFragment:SortThreadCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisThreadCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isThreadCellMap(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortThreadCellMap{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortThreadCellMap{}, SortKItem{}}(Var'Unds'Gen1:SortThreadCellMap{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisThreadCellMap{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isThreadCellMap(inj{ThreadCellMap,KItem}(ThreadCellMap))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadCellMap{}, SortKItem{}}(VarThreadCellMap:SortThreadCellMap{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisThreadCellMap{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isThreadsCell(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortThreadsCell{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortThreadsCell{}, SortKItem{}}(Var'Unds'Gen0:SortThreadsCell{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisThreadsCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isThreadsCell(inj{ThreadsCell,KItem}(ThreadsCell))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadsCell{}, SortKItem{}}(VarThreadsCell:SortThreadsCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisThreadsCell{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isThreadsCellFragment(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen1:SortThreadsCellFragment{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortThreadsCellFragment{}, SortKItem{}}(Var'Unds'Gen1:SortThreadsCellFragment{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisThreadsCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isThreadsCellFragment(inj{ThreadsCellFragment,KItem}(ThreadsCellFragment))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadsCellFragment{}, SortKItem{}}(VarThreadsCellFragment:SortThreadsCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisThreadsCellFragment{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule isThreadsCellOpt(K)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [owise]
  axiom{R} \implies{R} (
    \and{R} (
      \not{R} (
        \or{R} (
          \exists{R} (Var'Unds'Gen0:SortThreadsCellOpt{},
            \and{R} (
              \top{R}(),
              \and{R} (
                \in{SortK{}, R} (
                  X0:SortK{},
                  kseq{}(inj{SortThreadsCellOpt{}, SortKItem{}}(Var'Unds'Gen0:SortThreadsCellOpt{}),dotk{}())
                ),
                \top{R} ()
              )
          )),
          \bottom{R}()
        )
      ),
      \and{R}(
        \top{R}(),
        \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )
    )),
    \equals{SortBool{},R} (
      LblisThreadsCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [owise{}()]

// rule isThreadsCellOpt(inj{ThreadsCellOpt,KItem}(ThreadsCellOpt))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadsCellOpt{}, SortKItem{}}(VarThreadsCellOpt:SortThreadsCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblisThreadsCellOpt{}(X0:SortK{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  []

// rule `minInt(_,_)_INT-COMMON_Int_Int_Int`(I1,I2)=>I1 requires `_<=Int_`(I1,I2) ensures #token("true","Bool") [UNIQUE_ID(fb09b6acc4366cb77203e07c4efe8a9cf304e1bac9fb0664deea05d3eb9a80c6), org.kframework.attributes.Location(Location(1247,8,1247,57)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'Unds-LT-Eqls'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{}),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortInt{}, R} (
            X0:SortInt{},
            VarI1:SortInt{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X1:SortInt{},
            VarI2:SortInt{}
          ),
          \top{R} ()
        ))),
    \equals{SortInt{},R} (
      LblminInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(X0:SortInt{},X1:SortInt{}),
     \and{SortInt{}} (
       VarI1:SortInt{},
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1247,8,1247,57)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("fb09b6acc4366cb77203e07c4efe8a9cf304e1bac9fb0664deea05d3eb9a80c6")]

// rule `minInt(_,_)_INT-COMMON_Int_Int_Int`(I1,I2)=>I2 requires `_>=Int_`(I1,I2) ensures #token("true","Bool") [UNIQUE_ID(e1effeabf96bb3a3beffd5b679ad5df95c4f8bbf42872b0793331e52a8470fb3), org.kframework.attributes.Location(Location(1248,8,1248,57)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'Unds-GT-Eqls'Int'Unds'{}(VarI1:SortInt{},VarI2:SortInt{}),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortInt{}, R} (
            X0:SortInt{},
            VarI1:SortInt{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X1:SortInt{},
            VarI2:SortInt{}
          ),
          \top{R} ()
        ))),
    \equals{SortInt{},R} (
      LblminInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(X0:SortInt{},X1:SortInt{}),
     \and{SortInt{}} (
       VarI2:SortInt{},
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1248,8,1248,57)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("e1effeabf96bb3a3beffd5b679ad5df95c4f8bbf42872b0793331e52a8470fb3")]

// rule `notBool_`(#token("false","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(17ebc68421572b8ebe609c068fb49cbb6cbbe3246e2142257ad8befdda38f415), org.kframework.attributes.Location(Location(929,8,929,29)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("false")
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblnotBool'Unds'{}(X0:SortBool{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("true"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(929,8,929,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("17ebc68421572b8ebe609c068fb49cbb6cbbe3246e2142257ad8befdda38f415")]

// rule `notBool_`(#token("true","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(53fc758ece1ff16581673016dfacc556cc30fcf6b3c35b586f001d76a1f9336c), org.kframework.attributes.Location(Location(928,8,928,29)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortBool{}, R} (
            X0:SortBool{},
            \dv{SortBool{}}("true")
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      LblnotBool'Unds'{}(X0:SortBool{}),
     \and{SortBool{}} (
       \dv{SortBool{}}("false"),
        \top{SortBool{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(928,8,928,29)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("53fc758ece1ff16581673016dfacc556cc30fcf6b3c35b586f001d76a1f9336c")]

// rule `project:#tempFile:fd`(#tempFile(K0,K1))=>K1 requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortIOFile{}, R} (
            X0:SortIOFile{},
            Lbl'Hash'tempFile{}(VarK0:SortString{},VarK1:SortInt{})
          ),
          \top{R} ()
        )),
    \equals{SortInt{},R} (
      Lblproject'ColnHash'tempFile'Coln'fd{}(X0:SortIOFile{}),
     \and{SortInt{}} (
       VarK1:SortInt{},
        \top{SortInt{}}())))
  []

// rule `project:#tempFile:path`(#tempFile(K0,K1))=>K0 requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortIOFile{}, R} (
            X0:SortIOFile{},
            Lbl'Hash'tempFile{}(VarK0:SortString{},VarK1:SortInt{})
          ),
          \top{R} ()
        )),
    \equals{SortString{},R} (
      Lblproject'ColnHash'tempFile'Coln'path{}(X0:SortIOFile{}),
     \and{SortString{}} (
       VarK0:SortString{},
        \top{SortString{}}())))
  []

// rule `project:#unknownIOError:errno`(#unknownIOError(K0))=>K0 requires #token("true","Bool") ensures #token("true","Bool") 
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortIOError{}, R} (
            X0:SortIOError{},
            Lbl'Hash'unknownIOError{}(VarK0:SortInt{})
          ),
          \top{R} ()
        )),
    \equals{SortInt{},R} (
      Lblproject'ColnHash'unknownIOError'Coln'errno{}(X0:SortIOError{}),
     \and{SortInt{}} (
       VarK0:SortInt{},
        \top{SortInt{}}())))
  []

// rule `project:AExp`(inj{AExp,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortAExp{}, SortKItem{}}(VarK:SortAExp{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortAExp{},R} (
      Lblproject'Coln'AExp{}(X0:SortK{}),
     \and{SortAExp{}} (
       VarK:SortAExp{},
        \top{SortAExp{}}())))
  [projection{}()]

// rule `project:AExps`(inj{AExps,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortAExps{}, SortKItem{}}(VarK:SortAExps{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortAExps{},R} (
      Lblproject'Coln'AExps{}(X0:SortK{}),
     \and{SortAExps{}} (
       VarK:SortAExps{},
        \top{SortAExps{}}())))
  [projection{}()]

// rule `project:BExp`(inj{BExp,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortBExp{}, SortKItem{}}(VarK:SortBExp{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBExp{},R} (
      Lblproject'Coln'BExp{}(X0:SortK{}),
     \and{SortBExp{}} (
       VarK:SortBExp{},
        \top{SortBExp{}}())))
  [projection{}()]

// rule `project:Block`(inj{Block,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortBlock{}, SortKItem{}}(VarK:SortBlock{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBlock{},R} (
      Lblproject'Coln'Block{}(X0:SortK{}),
     \and{SortBlock{}} (
       VarK:SortBlock{},
        \top{SortBlock{}}())))
  [projection{}()]

// rule `project:Bool`(inj{Bool,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortBool{}, SortKItem{}}(VarK:SortBool{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBool{},R} (
      Lblproject'Coln'Bool{}(X0:SortK{}),
     \and{SortBool{}} (
       VarK:SortBool{},
        \top{SortBool{}}())))
  [projection{}()]

// rule `project:Bottom`(inj{Bottom,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortBottom{}, SortKItem{}}(VarK:SortBottom{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBottom{},R} (
      Lblproject'Coln'Bottom{}(X0:SortK{}),
     \and{SortBottom{}} (
       VarK:SortBottom{},
        \top{SortBottom{}}())))
  [projection{}()]

// rule `project:Bottoms`(inj{Bottoms,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortBottoms{}, SortKItem{}}(VarK:SortBottoms{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortBottoms{},R} (
      Lblproject'Coln'Bottoms{}(X0:SortK{}),
     \and{SortBottoms{}} (
       VarK:SortBottoms{},
        \top{SortBottoms{}}())))
  [projection{}()]

// rule `project:EnvCell`(inj{EnvCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortEnvCell{}, SortKItem{}}(VarK:SortEnvCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortEnvCell{},R} (
      Lblproject'Coln'EnvCell{}(X0:SortK{}),
     \and{SortEnvCell{}} (
       VarK:SortEnvCell{},
        \top{SortEnvCell{}}())))
  [projection{}()]

// rule `project:EnvCellOpt`(inj{EnvCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortEnvCellOpt{}, SortKItem{}}(VarK:SortEnvCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortEnvCellOpt{},R} (
      Lblproject'Coln'EnvCellOpt{}(X0:SortK{}),
     \and{SortEnvCellOpt{}} (
       VarK:SortEnvCellOpt{},
        \top{SortEnvCellOpt{}}())))
  [projection{}()]

// rule `project:Float`(inj{Float,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortFloat{}, SortKItem{}}(VarK:SortFloat{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortFloat{},R} (
      Lblproject'Coln'Float{}(X0:SortK{}),
     \and{SortFloat{}} (
       VarK:SortFloat{},
        \top{SortFloat{}}())))
  [projection{}()]

// rule `project:GeneratedCounterCell`(inj{GeneratedCounterCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedCounterCell{}, SortKItem{}}(VarK:SortGeneratedCounterCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortGeneratedCounterCell{},R} (
      Lblproject'Coln'GeneratedCounterCell{}(X0:SortK{}),
     \and{SortGeneratedCounterCell{}} (
       VarK:SortGeneratedCounterCell{},
        \top{SortGeneratedCounterCell{}}())))
  [projection{}()]

// rule `project:GeneratedCounterCellOpt`(inj{GeneratedCounterCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedCounterCellOpt{}, SortKItem{}}(VarK:SortGeneratedCounterCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortGeneratedCounterCellOpt{},R} (
      Lblproject'Coln'GeneratedCounterCellOpt{}(X0:SortK{}),
     \and{SortGeneratedCounterCellOpt{}} (
       VarK:SortGeneratedCounterCellOpt{},
        \top{SortGeneratedCounterCellOpt{}}())))
  [projection{}()]

// rule `project:GeneratedTopCell`(inj{GeneratedTopCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedTopCell{}, SortKItem{}}(VarK:SortGeneratedTopCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortGeneratedTopCell{},R} (
      Lblproject'Coln'GeneratedTopCell{}(X0:SortK{}),
     \and{SortGeneratedTopCell{}} (
       VarK:SortGeneratedTopCell{},
        \top{SortGeneratedTopCell{}}())))
  [projection{}()]

// rule `project:GeneratedTopCellFragment`(inj{GeneratedTopCellFragment,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortGeneratedTopCellFragment{}, SortKItem{}}(VarK:SortGeneratedTopCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortGeneratedTopCellFragment{},R} (
      Lblproject'Coln'GeneratedTopCellFragment{}(X0:SortK{}),
     \and{SortGeneratedTopCellFragment{}} (
       VarK:SortGeneratedTopCellFragment{},
        \top{SortGeneratedTopCellFragment{}}())))
  [projection{}()]

// rule `project:IOError`(inj{IOError,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIOError{}, SortKItem{}}(VarK:SortIOError{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortIOError{},R} (
      Lblproject'Coln'IOError{}(X0:SortK{}),
     \and{SortIOError{}} (
       VarK:SortIOError{},
        \top{SortIOError{}}())))
  [projection{}()]

// rule `project:IOFile`(inj{IOFile,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIOFile{}, SortKItem{}}(VarK:SortIOFile{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortIOFile{},R} (
      Lblproject'Coln'IOFile{}(X0:SortK{}),
     \and{SortIOFile{}} (
       VarK:SortIOFile{},
        \top{SortIOFile{}}())))
  [projection{}()]

// rule `project:IOInt`(inj{IOInt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIOInt{}, SortKItem{}}(VarK:SortIOInt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortIOInt{},R} (
      Lblproject'Coln'IOInt{}(X0:SortK{}),
     \and{SortIOInt{}} (
       VarK:SortIOInt{},
        \top{SortIOInt{}}())))
  [projection{}()]

// rule `project:IOString`(inj{IOString,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIOString{}, SortKItem{}}(VarK:SortIOString{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortIOString{},R} (
      Lblproject'Coln'IOString{}(X0:SortK{}),
     \and{SortIOString{}} (
       VarK:SortIOString{},
        \top{SortIOString{}}())))
  [projection{}()]

// rule `project:Id`(inj{Id,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortId{}, SortKItem{}}(VarK:SortId{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortId{},R} (
      Lblproject'Coln'Id{}(X0:SortK{}),
     \and{SortId{}} (
       VarK:SortId{},
        \top{SortId{}}())))
  [projection{}()]

// rule `project:IdCell`(inj{IdCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIdCell{}, SortKItem{}}(VarK:SortIdCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortIdCell{},R} (
      Lblproject'Coln'IdCell{}(X0:SortK{}),
     \and{SortIdCell{}} (
       VarK:SortIdCell{},
        \top{SortIdCell{}}())))
  [projection{}()]

// rule `project:IdCellOpt`(inj{IdCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIdCellOpt{}, SortKItem{}}(VarK:SortIdCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortIdCellOpt{},R} (
      Lblproject'Coln'IdCellOpt{}(X0:SortK{}),
     \and{SortIdCellOpt{}} (
       VarK:SortIdCellOpt{},
        \top{SortIdCellOpt{}}())))
  [projection{}()]

// rule `project:Ids`(inj{Ids,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortIds{}, SortKItem{}}(VarK:SortIds{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortIds{},R} (
      Lblproject'Coln'Ids{}(X0:SortK{}),
     \and{SortIds{}} (
       VarK:SortIds{},
        \top{SortIds{}}())))
  [projection{}()]

// rule `project:InputCell`(inj{InputCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortInputCell{}, SortKItem{}}(VarK:SortInputCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortInputCell{},R} (
      Lblproject'Coln'InputCell{}(X0:SortK{}),
     \and{SortInputCell{}} (
       VarK:SortInputCell{},
        \top{SortInputCell{}}())))
  [projection{}()]

// rule `project:InputCellOpt`(inj{InputCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortInputCellOpt{}, SortKItem{}}(VarK:SortInputCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortInputCellOpt{},R} (
      Lblproject'Coln'InputCellOpt{}(X0:SortK{}),
     \and{SortInputCellOpt{}} (
       VarK:SortInputCellOpt{},
        \top{SortInputCellOpt{}}())))
  [projection{}()]

// rule `project:Int`(inj{Int,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortInt{}, SortKItem{}}(VarK:SortInt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortInt{},R} (
      Lblproject'Coln'Int{}(X0:SortK{}),
     \and{SortInt{}} (
       VarK:SortInt{},
        \top{SortInt{}}())))
  [projection{}()]

// rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            VarK:SortK{}
          ),
          \top{R} ()
        )),
    \equals{SortK{},R} (
      Lblproject'Coln'K{}(X0:SortK{}),
     \and{SortK{}} (
       VarK:SortK{},
        \top{SortK{}}())))
  [projection{}()]

// rule `project:KCell`(inj{KCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortKCell{}, SortKItem{}}(VarK:SortKCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortKCell{},R} (
      Lblproject'Coln'KCell{}(X0:SortK{}),
     \and{SortKCell{}} (
       VarK:SortKCell{},
        \top{SortKCell{}}())))
  [projection{}()]

// rule `project:KCellOpt`(inj{KCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortKCellOpt{}, SortKItem{}}(VarK:SortKCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortKCellOpt{},R} (
      Lblproject'Coln'KCellOpt{}(X0:SortK{}),
     \and{SortKCellOpt{}} (
       VarK:SortKCellOpt{},
        \top{SortKCellOpt{}}())))
  [projection{}()]

// rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(VarK:SortKItem{},dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortKItem{},R} (
      Lblproject'Coln'KItem{}(X0:SortK{}),
     \and{SortKItem{}} (
       VarK:SortKItem{},
        \top{SortKItem{}}())))
  [projection{}()]

// rule `project:KResult`(inj{KResult,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortKResult{}, SortKItem{}}(VarK:SortKResult{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortKResult{},R} (
      Lblproject'Coln'KResult{}(X0:SortK{}),
     \and{SortKResult{}} (
       VarK:SortKResult{},
        \top{SortKResult{}}())))
  [projection{}()]

// rule `project:List`(inj{List,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortList{}, SortKItem{}}(VarK:SortList{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortList{},R} (
      Lblproject'Coln'List{}(X0:SortK{}),
     \and{SortList{}} (
       VarK:SortList{},
        \top{SortList{}}())))
  [projection{}()]

// rule `project:Map`(inj{Map,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortMap{}, SortKItem{}}(VarK:SortMap{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortMap{},R} (
      Lblproject'Coln'Map{}(X0:SortK{}),
     \and{SortMap{}} (
       VarK:SortMap{},
        \top{SortMap{}}())))
  [projection{}()]

// rule `project:OutputCell`(inj{OutputCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortOutputCell{}, SortKItem{}}(VarK:SortOutputCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortOutputCell{},R} (
      Lblproject'Coln'OutputCell{}(X0:SortK{}),
     \and{SortOutputCell{}} (
       VarK:SortOutputCell{},
        \top{SortOutputCell{}}())))
  [projection{}()]

// rule `project:OutputCellOpt`(inj{OutputCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortOutputCellOpt{}, SortKItem{}}(VarK:SortOutputCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortOutputCellOpt{},R} (
      Lblproject'Coln'OutputCellOpt{}(X0:SortK{}),
     \and{SortOutputCellOpt{}} (
       VarK:SortOutputCellOpt{},
        \top{SortOutputCellOpt{}}())))
  [projection{}()]

// rule `project:Printable`(inj{Printable,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortPrintable{}, SortKItem{}}(VarK:SortPrintable{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortPrintable{},R} (
      Lblproject'Coln'Printable{}(X0:SortK{}),
     \and{SortPrintable{}} (
       VarK:SortPrintable{},
        \top{SortPrintable{}}())))
  [projection{}()]

// rule `project:Printables`(inj{Printables,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortPrintables{}, SortKItem{}}(VarK:SortPrintables{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortPrintables{},R} (
      Lblproject'Coln'Printables{}(X0:SortK{}),
     \and{SortPrintables{}} (
       VarK:SortPrintables{},
        \top{SortPrintables{}}())))
  [projection{}()]

// rule `project:Set`(inj{Set,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortSet{}, SortKItem{}}(VarK:SortSet{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortSet{},R} (
      Lblproject'Coln'Set{}(X0:SortK{}),
     \and{SortSet{}} (
       VarK:SortSet{},
        \top{SortSet{}}())))
  [projection{}()]

// rule `project:Stmt`(inj{Stmt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStmt{}, SortKItem{}}(VarK:SortStmt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortStmt{},R} (
      Lblproject'Coln'Stmt{}(X0:SortK{}),
     \and{SortStmt{}} (
       VarK:SortStmt{},
        \top{SortStmt{}}())))
  [projection{}()]

// rule `project:Stmts`(inj{Stmts,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStmts{}, SortKItem{}}(VarK:SortStmts{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortStmts{},R} (
      Lblproject'Coln'Stmts{}(X0:SortK{}),
     \and{SortStmts{}} (
       VarK:SortStmts{},
        \top{SortStmts{}}())))
  [projection{}()]

// rule `project:StoreCell`(inj{StoreCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStoreCell{}, SortKItem{}}(VarK:SortStoreCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortStoreCell{},R} (
      Lblproject'Coln'StoreCell{}(X0:SortK{}),
     \and{SortStoreCell{}} (
       VarK:SortStoreCell{},
        \top{SortStoreCell{}}())))
  [projection{}()]

// rule `project:StoreCellOpt`(inj{StoreCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStoreCellOpt{}, SortKItem{}}(VarK:SortStoreCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortStoreCellOpt{},R} (
      Lblproject'Coln'StoreCellOpt{}(X0:SortK{}),
     \and{SortStoreCellOpt{}} (
       VarK:SortStoreCellOpt{},
        \top{SortStoreCellOpt{}}())))
  [projection{}()]

// rule `project:Stream`(inj{Stream,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortStream{}, SortKItem{}}(VarK:SortStream{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortStream{},R} (
      Lblproject'Coln'Stream{}(X0:SortK{}),
     \and{SortStream{}} (
       VarK:SortStream{},
        \top{SortStream{}}())))
  [projection{}()]

// rule `project:String`(inj{String,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortString{}, SortKItem{}}(VarK:SortString{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortString{},R} (
      Lblproject'Coln'String{}(X0:SortK{}),
     \and{SortString{}} (
       VarK:SortString{},
        \top{SortString{}}())))
  [projection{}()]

// rule `project:TCell`(inj{TCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortTCell{}, SortKItem{}}(VarK:SortTCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortTCell{},R} (
      Lblproject'Coln'TCell{}(X0:SortK{}),
     \and{SortTCell{}} (
       VarK:SortTCell{},
        \top{SortTCell{}}())))
  [projection{}()]

// rule `project:TCellFragment`(inj{TCellFragment,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortTCellFragment{}, SortKItem{}}(VarK:SortTCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortTCellFragment{},R} (
      Lblproject'Coln'TCellFragment{}(X0:SortK{}),
     \and{SortTCellFragment{}} (
       VarK:SortTCellFragment{},
        \top{SortTCellFragment{}}())))
  [projection{}()]

// rule `project:TCellOpt`(inj{TCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortTCellOpt{}, SortKItem{}}(VarK:SortTCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortTCellOpt{},R} (
      Lblproject'Coln'TCellOpt{}(X0:SortK{}),
     \and{SortTCellOpt{}} (
       VarK:SortTCellOpt{},
        \top{SortTCellOpt{}}())))
  [projection{}()]

// rule `project:ThreadCell`(inj{ThreadCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadCell{}, SortKItem{}}(VarK:SortThreadCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortThreadCell{},R} (
      Lblproject'Coln'ThreadCell{}(X0:SortK{}),
     \and{SortThreadCell{}} (
       VarK:SortThreadCell{},
        \top{SortThreadCell{}}())))
  [projection{}()]

// rule `project:ThreadCellFragment`(inj{ThreadCellFragment,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadCellFragment{}, SortKItem{}}(VarK:SortThreadCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortThreadCellFragment{},R} (
      Lblproject'Coln'ThreadCellFragment{}(X0:SortK{}),
     \and{SortThreadCellFragment{}} (
       VarK:SortThreadCellFragment{},
        \top{SortThreadCellFragment{}}())))
  [projection{}()]

// rule `project:ThreadCellMap`(inj{ThreadCellMap,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadCellMap{}, SortKItem{}}(VarK:SortThreadCellMap{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortThreadCellMap{},R} (
      Lblproject'Coln'ThreadCellMap{}(X0:SortK{}),
     \and{SortThreadCellMap{}} (
       VarK:SortThreadCellMap{},
        \top{SortThreadCellMap{}}())))
  [projection{}()]

// rule `project:ThreadsCell`(inj{ThreadsCell,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadsCell{}, SortKItem{}}(VarK:SortThreadsCell{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortThreadsCell{},R} (
      Lblproject'Coln'ThreadsCell{}(X0:SortK{}),
     \and{SortThreadsCell{}} (
       VarK:SortThreadsCell{},
        \top{SortThreadsCell{}}())))
  [projection{}()]

// rule `project:ThreadsCellFragment`(inj{ThreadsCellFragment,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadsCellFragment{}, SortKItem{}}(VarK:SortThreadsCellFragment{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortThreadsCellFragment{},R} (
      Lblproject'Coln'ThreadsCellFragment{}(X0:SortK{}),
     \and{SortThreadsCellFragment{}} (
       VarK:SortThreadsCellFragment{},
        \top{SortThreadsCellFragment{}}())))
  [projection{}()]

// rule `project:ThreadsCellOpt`(inj{ThreadsCellOpt,KItem}(K))=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortK{}, R} (
            X0:SortK{},
            kseq{}(inj{SortThreadsCellOpt{}, SortKItem{}}(VarK:SortThreadsCellOpt{}),dotk{}())
          ),
          \top{R} ()
        )),
    \equals{SortThreadsCellOpt{},R} (
      Lblproject'Coln'ThreadsCellOpt{}(X0:SortK{}),
     \and{SortThreadsCellOpt{}} (
       VarK:SortThreadsCellOpt{},
        \top{SortThreadsCellOpt{}}())))
  [projection{}()]

// rule `replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(Source,ToReplace,Replacement,Count)=>`_+String__STRING-COMMON_String_String_String`(`_+String__STRING-COMMON_String_String_String`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,#token("0","Int"),`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int"))),Replacement),`replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,`_+Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),`lengthString(_)_STRING-COMMON_Int_String`(ToReplace)),`lengthString(_)_STRING-COMMON_Int_String`(Source)),ToReplace,Replacement,`_-Int_`(Count,#token("1","Int")))) requires `_>Int_`(Count,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(311b80d2cb12d368f230eba968464e1fc926bd57e304059b282b82af4d9626d9), org.kframework.attributes.Location(Location(1705,8,1708,30)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'Unds-GT-'Int'Unds'{}(VarCount:SortInt{},\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarSource:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarToReplace:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X2:SortString{},
            VarReplacement:SortString{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X3:SortInt{},
            VarCount:SortInt{}
          ),
          \top{R} ()
        ))))),
    \equals{SortString{},R} (
      Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String'Unds'Int{}(X0:SortString{},X1:SortString{},X2:SortString{},X3:SortInt{}),
     \and{SortString{}} (
       Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},\dv{SortInt{}}("0"),LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0"))),VarReplacement:SortString{}),Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String'Unds'Int{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},Lbl'UndsPlus'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarToReplace:SortString{})),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarSource:SortString{})),VarToReplace:SortString{},VarReplacement:SortString{},Lbl'Unds'-Int'Unds'{}(VarCount:SortInt{},\dv{SortInt{}}("1")))),
        \top{SortString{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1705,8,1708,30)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("311b80d2cb12d368f230eba968464e1fc926bd57e304059b282b82af4d9626d9")]

// rule `replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(Source,_Gen0,_Gen1,#token("0","Int"))=>Source requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4367434b0f61c404f7a2e926426bd23874dd547de689c5d15089967fbab2b3d5), org.kframework.attributes.Location(Location(1709,8,1709,49)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarSource:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            Var'Unds'Gen0:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X2:SortString{},
            Var'Unds'Gen1:SortString{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X3:SortInt{},
            \dv{SortInt{}}("0")
          ),
          \top{R} ()
        ))))),
    \equals{SortString{},R} (
      Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String'Unds'Int{}(X0:SortString{},X1:SortString{},X2:SortString{},X3:SortInt{}),
     \and{SortString{}} (
       VarSource:SortString{},
        \top{SortString{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1709,8,1709,49)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("4367434b0f61c404f7a2e926426bd23874dd547de689c5d15089967fbab2b3d5")]

// rule `replaceAll(_,_,_)_STRING-COMMON_String_String_String_String`(Source,ToReplace,Replacement)=>`replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(Source,ToReplace,Replacement,`countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(Source,ToReplace)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(262167183c3ec2e214d12bac6e639d7ac1a9f973582e16eca6c1af1da7ecc0a5), org.kframework.attributes.Location(Location(1710,8,1710,154)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarSource:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarToReplace:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X2:SortString{},
            VarReplacement:SortString{}
          ),
          \top{R} ()
        )))),
    \equals{SortString{},R} (
      LblreplaceAll'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String{}(X0:SortString{},X1:SortString{},X2:SortString{}),
     \and{SortString{}} (
       Lblreplace'LParUndsCommUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},VarReplacement:SortString{},LblcountAllOccurrences'LParUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String{}(VarSource:SortString{},VarToReplace:SortString{})),
        \top{SortString{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1710,8,1710,154)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("262167183c3ec2e214d12bac6e639d7ac1a9f973582e16eca6c1af1da7ecc0a5")]

// rule `replaceFirst(_,_,_)_STRING-COMMON_String_String_String_String`(Source,ToReplace,Replacement)=>`_+String__STRING-COMMON_String_String_String`(`_+String__STRING-COMMON_String_String_String`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,#token("0","Int"),`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int"))),Replacement),`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,`_+Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),`lengthString(_)_STRING-COMMON_Int_String`(ToReplace)),`lengthString(_)_STRING-COMMON_Int_String`(Source))) requires `_>=Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(e290042e5b5b2f620c0ca1871e708c3713c62b63b283e317bb7568e13968fe0c), org.kframework.attributes.Location(Location(1698,8,1700,66)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'Unds-GT-Eqls'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarSource:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarToReplace:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X2:SortString{},
            VarReplacement:SortString{}
          ),
          \top{R} ()
        )))),
    \equals{SortString{},R} (
      LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String{}(X0:SortString{},X1:SortString{},X2:SortString{}),
     \and{SortString{}} (
       Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(Lbl'UndsPlus'String'UndsUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String{}(LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},\dv{SortInt{}}("0"),LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0"))),VarReplacement:SortString{}),LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarSource:SortString{},Lbl'UndsPlus'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarToReplace:SortString{})),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarSource:SortString{}))),
        \top{SortString{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1698,8,1700,66)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("e290042e5b5b2f620c0ca1871e708c3713c62b63b283e317bb7568e13968fe0c")]

// rule `replaceFirst(_,_,_)_STRING-COMMON_String_String_String_String`(Source,ToReplace,_Gen0)=>Source requires `_<Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(8fbd1c8efb9988236eddc95fc2af4a3e74f6ec94d696ee47209543fd0826dd34), org.kframework.attributes.Location(Location(1701,8,1702,57)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'Unds-LT-'Int'Unds'{}(LblfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarSource:SortString{},VarToReplace:SortString{},\dv{SortInt{}}("0")),\dv{SortInt{}}("0")),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarSource:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarToReplace:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X2:SortString{},
            Var'Unds'Gen0:SortString{}
          ),
          \top{R} ()
        )))),
    \equals{SortString{},R} (
      LblreplaceFirst'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'String'Unds'String{}(X0:SortString{},X1:SortString{},X2:SortString{}),
     \and{SortString{}} (
       VarSource:SortString{},
        \top{SortString{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1701,8,1702,57)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("8fbd1c8efb9988236eddc95fc2af4a3e74f6ec94d696ee47209543fd0826dd34")]

// rule `rfindChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,S2,I)=>`maxInt(_,_)_INT-COMMON_Int_Int_Int`(`rfindString(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`rfindChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(S2)),I)) requires `_=/=String__STRING-COMMON_Bool_String_String`(S2,#token("\"\"","String")) ensures #token("true","Bool") [UNIQUE_ID(b7f740050d72a847424b022a9c8217325aba8a154a42831aa3c7a3b0727f3205), org.kframework.attributes.Location(Location(1690,8,1690,182)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \equals{SortBool{},R}(
        Lbl'UndsEqlsSlshEqls'String'UndsUnds'STRING-COMMON'Unds'Bool'Unds'String'Unds'String{}(VarS2:SortString{},\dv{SortString{}}("")),
        \dv{SortBool{}}("true")),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            VarS1:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            VarS2:SortString{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X2:SortInt{},
            VarI:SortInt{}
          ),
          \top{R} ()
        )))),
    \equals{SortInt{},R} (
      LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(X0:SortString{},X1:SortString{},X2:SortInt{}),
     \and{SortInt{}} (
       LblmaxInt'LParUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int{}(LblrfindString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("0"),\dv{SortInt{}}("1")),VarI:SortInt{}),LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(VarS1:SortString{},LblsubstrString'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'String'Unds'String'Unds'Int'Unds'Int{}(VarS2:SortString{},\dv{SortInt{}}("1"),LbllengthString'LParUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String{}(VarS2:SortString{})),VarI:SortInt{})),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1690,8,1690,182)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody \"requires\" Bool [klabel(#ruleRequires), symbol]"), UNIQUE'Unds'ID{}("b7f740050d72a847424b022a9c8217325aba8a154a42831aa3c7a3b0727f3205")]

// rule `rfindChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(_Gen0,#token("\"\"","String"),_Gen1)=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(23b9fa88124c547d94aed32124d1ccd1069732b059f4c8b430ab4617979690f6), org.kframework.attributes.Location(Location(1691,8,1691,33)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortString{}, R} (
            X0:SortString{},
            Var'Unds'Gen0:SortString{}
          ),\and{R} (
          \in{SortString{}, R} (
            X1:SortString{},
            \dv{SortString{}}("")
          ),\and{R} (
          \in{SortInt{}, R} (
            X2:SortInt{},
            Var'Unds'Gen1:SortInt{}
          ),
          \top{R} ()
        )))),
    \equals{SortInt{},R} (
      LblrfindChar'LParUndsCommUndsCommUndsRParUnds'STRING-COMMON'Unds'Int'Unds'String'Unds'String'Unds'Int{}(X0:SortString{},X1:SortString{},X2:SortInt{}),
     \and{SortInt{}} (
       \dv{SortInt{}}("-1"),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1691,8,1691,33)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("23b9fa88124c547d94aed32124d1ccd1069732b059f4c8b430ab4617979690f6")]

// rule `signExtendBitRangeInt(_,_,_)_INT-COMMON_Int_Int_Int_Int`(I,IDX,LEN)=>`_-Int_`(`_modInt_`(`_+Int_`(`bitRangeInt(_,_,_)_INT-COMMON_Int_Int_Int_Int`(I,IDX,LEN),`_<<Int_`(#token("1","Int"),`_-Int_`(LEN,#token("1","Int")))),`_<<Int_`(#token("1","Int"),LEN)),`_<<Int_`(#token("1","Int"),`_-Int_`(LEN,#token("1","Int")))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3b67f4bf2235fc46fc94b1d10e936100ea3fc4f2dbaa4e4a77593e8385f5004f), org.kframework.attributes.Location(Location(1237,8,1237,164)), org.kframework.attributes.Source(Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  axiom{R} \implies{R} (
    \and{R}(
      \top{R}(),
      \and{R} (
          \in{SortInt{}, R} (
            X0:SortInt{},
            VarI:SortInt{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X1:SortInt{},
            VarIDX:SortInt{}
          ),\and{R} (
          \in{SortInt{}, R} (
            X2:SortInt{},
            VarLEN:SortInt{}
          ),
          \top{R} ()
        )))),
    \equals{SortInt{},R} (
      LblsignExtendBitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(X0:SortInt{},X1:SortInt{},X2:SortInt{}),
     \and{SortInt{}} (
       Lbl'Unds'-Int'Unds'{}(Lbl'Unds'modInt'Unds'{}(Lbl'UndsPlus'Int'Unds'{}(LblbitRangeInt'LParUndsCommUndsCommUndsRParUnds'INT-COMMON'Unds'Int'Unds'Int'Unds'Int'Unds'Int{}(VarI:SortInt{},VarIDX:SortInt{},VarLEN:SortInt{}),Lbl'Unds-LT--LT-'Int'Unds'{}(\dv{SortInt{}}("1"),Lbl'Unds'-Int'Unds'{}(VarLEN:SortInt{},\dv{SortInt{}}("1")))),Lbl'Unds-LT--LT-'Int'Unds'{}(\dv{SortInt{}}("1"),VarLEN:SortInt{})),Lbl'Unds-LT--LT-'Int'Unds'{}(\dv{SortInt{}}("1"),Lbl'Unds'-Int'Unds'{}(VarLEN:SortInt{},\dv{SortInt{}}("1")))),
        \top{SortInt{}}())))
  [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(1237,8,1237,164)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-distribution/target/release/k/include/kframework/builtin/domains.md)"), org'Stop'kframework'Stop'definition'Stop'Production{}("syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]"), UNIQUE'Unds'ID{}("3b67f4bf2235fc46fc94b1d10e936100ea3fc4f2dbaa4e4a77593e8385f5004f")]


// priority groups
  alias priorityLE25{}() : SortGeneratedTopCell{}
  where priorityLE25{}() := \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarBuffer:SortString{},\exists{SortGeneratedTopCell{}}(VarF:SortFloat{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortKItem{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen5:SortInputCell{},rule12LHS{}(VarBuffer:SortString{},VarF:SortFloat{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortInt{},Var'Unds'Gen1:SortKItem{},Var'Unds'Gen2:SortList{},Var'Unds'Gen3:SortThreadsCell{},Var'Unds'Gen4:SortStoreCell{},Var'Unds'Gen5:SortInputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarBuffer:SortString{},\exists{SortGeneratedTopCell{}}(VarI:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortKItem{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen5:SortInputCell{},rule13LHS{}(VarBuffer:SortString{},VarI:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortInt{},Var'Unds'Gen1:SortKItem{},Var'Unds'Gen2:SortList{},Var'Unds'Gen3:SortThreadsCell{},Var'Unds'Gen4:SortStoreCell{},Var'Unds'Gen5:SortInputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarBuffer:SortString{},\exists{SortGeneratedTopCell{}}(VarS:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortKItem{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen5:SortInputCell{},rule14LHS{}(VarBuffer:SortString{},VarS:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortInt{},Var'Unds'Gen1:SortKItem{},Var'Unds'Gen2:SortList{},Var'Unds'Gen3:SortThreadsCell{},Var'Unds'Gen4:SortStoreCell{},Var'Unds'Gen5:SortInputCell{})))))))))), \bottom{SortGeneratedTopCell{}}()))) []

  alias priorityLE30{}() : SortGeneratedTopCell{}
  where priorityLE30{}() := \or{SortGeneratedTopCell{}}(
    priorityLE25{}(), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarN:SortInt{},\exists{SortGeneratedTopCell{}}(VarS:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},rule7LHS{}(VarN:SortInt{},VarS:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortList{},Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{})))))))), \bottom{SortGeneratedTopCell{}}())) []

  alias priorityLE50{}() : SortGeneratedTopCell{}
  where priorityLE50{}() := \or{SortGeneratedTopCell{}}(
    priorityLE30{}(), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar5:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen6:SortThreadsCell{},rule6LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortList{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar5:SortK{},Var'Unds'Gen0:SortString{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortOutputCell{},Var'Unds'Gen6:SortThreadsCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDelimiters:SortString{},\exists{SortGeneratedTopCell{}}(VarS:SortString{},\exists{SortGeneratedTopCell{}}(VarSort:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortOutputCell{},rule8LHS{}(VarDelimiters:SortString{},VarS:SortString{},VarSort:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortList{},Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortOutputCell{}))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDelimiters:SortString{},\exists{SortGeneratedTopCell{}}(VarS:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortOutputCell{},rule9LHS{}(VarDelimiters:SortString{},VarS:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortList{},Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortOutputCell{})))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarDelimiters:SortString{},\exists{SortGeneratedTopCell{}}(VarS:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortThreadsCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortOutputCell{},rule10LHS{}(VarDelimiters:SortString{},VarS:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'Gen0:SortList{},Var'Unds'Gen1:SortThreadsCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortOutputCell{})))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarRho:SortMap{},\exists{SortGeneratedTopCell{}}(VarSs:SortStmts{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortOutputCell{},rule15LHS{}(VarRho:SortMap{},VarSs:SortStmts{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar3:SortIdCell{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortStoreCell{},Var'Unds'Gen1:SortInputCell{},Var'Unds'Gen2:SortOutputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarRho:SortMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortOutputCell{},rule16LHS{}(VarRho:SortMap{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar3:SortIdCell{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortMap{},Var'Unds'Gen1:SortStoreCell{},Var'Unds'Gen2:SortInputCell{},Var'Unds'Gen3:SortOutputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarI:SortKItem{},\exists{SortGeneratedTopCell{}}(VarN:SortKItem{},\exists{SortGeneratedTopCell{}}(VarX:SortId{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar5:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar6:SortMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortOutputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen5:SortStoreCell{},rule17LHS{}(VarI:SortKItem{},VarN:SortKItem{},VarX:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortMap{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar4:SortIdCell{},Var'Unds'DotVar5:SortK{},Var'Unds'DotVar6:SortMap{},Var'Unds'Gen0:SortInputCell{},Var'Unds'Gen1:SortOutputCell{},Var'Unds'Gen5:SortStoreCell{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarI:SortInt{},\exists{SortGeneratedTopCell{}}(VarN:SortKItem{},\exists{SortGeneratedTopCell{}}(VarX:SortId{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar5:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar6:SortMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortOutputCell{},rule18LHS{}(VarI:SortInt{},VarN:SortKItem{},VarX:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortMap{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar4:SortIdCell{},Var'Unds'DotVar5:SortK{},Var'Unds'DotVar6:SortMap{},Var'Unds'Gen0:SortInputCell{},Var'Unds'Gen1:SortOutputCell{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarI:SortInt{},\exists{SortGeneratedTopCell{}}(VarN:SortKItem{},\exists{SortGeneratedTopCell{}}(VarX:SortId{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar5:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar6:SortMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortKItem{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortOutputCell{},rule19LHS{}(VarI:SortInt{},VarN:SortKItem{},VarX:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortMap{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar4:SortIdCell{},Var'Unds'DotVar5:SortK{},Var'Unds'DotVar6:SortMap{},Var'Unds'Gen0:SortKItem{},Var'Unds'Gen1:SortInputCell{},Var'Unds'Gen2:SortOutputCell{}))))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(Var'Hash'Fresh:SortInt{},\exists{SortGeneratedTopCell{}}(VarRho:SortMap{},\exists{SortGeneratedTopCell{}}(VarX:SortId{},\exists{SortGeneratedTopCell{}}(VarXs:SortIds{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar5:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortOutputCell{},rule20LHS{}(Var'Hash'Fresh:SortInt{},VarRho:SortMap{},VarX:SortId{},VarXs:SortIds{},Var'Unds'DotVar2:SortMap{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar4:SortIdCell{},Var'Unds'DotVar5:SortK{},Var'Unds'Gen0:SortInputCell{},Var'Unds'Gen1:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortBExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule21LHS{}(VarHOLE:SortBExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortBExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortBExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule22LHS{}(VarHOLE:SortBExp{},VarK1:SortBExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule23LHS{}(VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule24LHS{}(VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExps{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule25LHS{}(VarHOLE:SortAExp{},VarK1:SortAExps{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExps{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule26LHS{}(VarHOLE:SortAExps{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortId{},\exists{SortGeneratedTopCell{}}(VarK1:SortIds{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule27LHS{}(VarHOLE:SortId{},VarK1:SortIds{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortIds{},\exists{SortGeneratedTopCell{}}(VarK0:SortId{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule28LHS{}(VarHOLE:SortIds{},VarK0:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule29LHS{}(VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule30LHS{}(VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule31LHS{}(VarHOLE:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule32LHS{}(VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule33LHS{}(VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortId{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule34LHS{}(VarHOLE:SortAExp{},VarK0:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortBExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortBlock{},\exists{SortGeneratedTopCell{}}(VarK2:SortBlock{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule35LHS{}(VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortBlock{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule36LHS{}(VarHOLE:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExps{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule37LHS{}(VarHOLE:SortAExps{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortBExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule38LHS{}(VarHOLE:SortBExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarT:SortBool{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule39LHS{}(VarT:SortBool{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarI:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule40LHS{}(VarI:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule41LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortBExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortBExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule42LHS{}(VarHOLE:SortBExp{},VarK1:SortBExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarB:SortBExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule43LHS{}(VarB:SortBExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule44LHS{}(VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule45LHS{}(VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarI1:SortInt{},\exists{SortGeneratedTopCell{}}(VarI2:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule46LHS{}(VarI1:SortInt{},VarI2:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarStr1:SortString{},\exists{SortGeneratedTopCell{}}(VarStr2:SortString{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule47LHS{}(VarStr1:SortString{},VarStr2:SortString{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExps{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule48LHS{}(VarHOLE:SortAExp{},VarK1:SortAExps{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExps{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule49LHS{}(VarHOLE:SortAExps{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortId{},\exists{SortGeneratedTopCell{}}(VarK1:SortIds{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule50LHS{}(VarHOLE:SortId{},VarK1:SortIds{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortIds{},\exists{SortGeneratedTopCell{}}(VarK0:SortId{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule51LHS{}(VarHOLE:SortIds{},VarK0:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule52LHS{}(VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule53LHS{}(VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarI1:SortInt{},\exists{SortGeneratedTopCell{}}(VarI2:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule54LHS{}(VarI1:SortInt{},VarI2:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule55LHS{}(VarHOLE:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule56LHS{}(VarHOLE:SortAExp{},VarK1:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule57LHS{}(VarHOLE:SortAExp{},VarK0:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarI1:SortInt{},\exists{SortGeneratedTopCell{}}(VarI2:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule58LHS{}(VarI1:SortInt{},VarI2:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(VarK0:SortId{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule59LHS{}(VarHOLE:SortAExp{},VarK0:SortId{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarS:SortStmt{},\exists{SortGeneratedTopCell{}}(VarSs:SortStmts{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule60LHS{}(VarS:SortStmt{},VarSs:SortStmts{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortBExp{},\exists{SortGeneratedTopCell{}}(VarK1:SortBlock{},\exists{SortGeneratedTopCell{}}(VarK2:SortBlock{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule61LHS{}(VarHOLE:SortBExp{},VarK1:SortBlock{},VarK2:SortBlock{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule62LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule63LHS{}(VarHOLE:SortAExp{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarHOLE:SortAExps{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule64LHS{}(VarHOLE:SortAExps{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarAEs:SortAExps{},\exists{SortGeneratedTopCell{}}(VarP:SortPrintable{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar5:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},rule65LHS{}(VarAEs:SortAExps{},VarP:SortPrintable{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortList{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar5:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule66LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarI:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortList{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar5:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortOutputCell{},rule67LHS{}(VarI:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortList{},Var'Unds'DotVar3:SortThreadCellMap{},Var'Unds'DotVar5:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortOutputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarB:SortBExp{},\exists{SortGeneratedTopCell{}}(VarS:SortBlock{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule68LHS{}(VarB:SortBExp{},VarS:SortBlock{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortBExp{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen5:SortOutputCell{},rule69LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortBExp{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen5:SortOutputCell{},rule70LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortInt{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen5:SortOutputCell{},rule71LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar3:SortK{},Var'Unds'Gen0:SortThreadCellMap{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen5:SortOutputCell{},rule72LHS{}(Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'Gen0:SortK{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarS:SortBlock{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortBlock{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen5:SortOutputCell{},rule73LHS{}(VarS:SortBlock{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortBlock{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarS:SortBlock{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortBlock{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen5:SortOutputCell{},rule74LHS{}(VarS:SortBlock{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortBlock{},Var'Unds'Gen1:SortIdCell{},Var'Unds'Gen2:SortEnvCell{},Var'Unds'Gen3:SortStoreCell{},Var'Unds'Gen4:SortInputCell{},Var'Unds'Gen5:SortOutputCell{}))))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(Var'Hash'Fresh:SortInt{},\exists{SortGeneratedTopCell{}}(VarRho:SortMap{},\exists{SortGeneratedTopCell{}}(VarS:SortBlock{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar4:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortOutputCell{},rule75LHS{}(Var'Hash'Fresh:SortInt{},VarRho:SortMap{},VarS:SortBlock{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar3:SortIdCell{},Var'Unds'DotVar4:SortK{},Var'Unds'Gen0:SortStoreCell{},Var'Unds'Gen1:SortInputCell{},Var'Unds'Gen2:SortOutputCell{})))))))))), \or{SortGeneratedTopCell{}}(
    \exists{SortGeneratedTopCell{}}(VarT:SortInt{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar0:SortGeneratedCounterCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar2:SortThreadCellMap{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar3:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'DotVar5:SortK{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen0:SortIdCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen1:SortEnvCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen2:SortStoreCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen3:SortInputCell{},\exists{SortGeneratedTopCell{}}(Var'Unds'Gen4:SortOutputCell{},rule76LHS{}(VarT:SortInt{},Var'Unds'DotVar0:SortGeneratedCounterCell{},Var'Unds'DotVar2:SortThreadCellMap{},Var'Unds'DotVar3:SortEnvCell{},Var'Unds'DotVar5:SortK{},Var'Unds'Gen0:SortIdCell{},Var'Unds'Gen1:SortEnvCell{},Var'Unds'Gen2:SortStoreCell{},Var'Unds'Gen3:SortInputCell{},Var'Unds'Gen4:SortOutputCell{}))))))))))), \bottom{SortGeneratedTopCell{}}()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) []

endmodule [org'Stop'kframework'Stop'attributes'Stop'Location{}("Location(42,1,118,10)"), org'Stop'kframework'Stop'attributes'Stop'Source{}("Source(/home/dwightguth/kframework-5.0.0/k-exercises/tutorial/1_k/4_imp++/lesson_7/exercises/non-determinism/imp.k)")]
