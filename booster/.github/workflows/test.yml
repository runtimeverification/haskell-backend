name: "Build + Test"
on:
  pull_request:
  push:
    branches: ['main']

concurrency:
  # head_ref is defined for PRs only, so we use run_id (unique) for
  # the main branch to ensure all commits are built
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  ghc_version: "9.2.4"
  hlint_version: "3.4.1"
  fourmolu_version: "0.8.2.0"
  hpack_version: "0.34.2"

jobs:
  changes:
    runs-on: ubuntu-latest
    # Required permissions
    permissions:
      pull-requests: read
    # Set job outputs to values from filter step
    outputs:
      code: ${{ steps.filter.outputs.code }}
      stack: ${{ steps.filter.outputs.stack }}
      nix: ${{ steps.filter.outputs.nix }}
    steps:
    # For pull requests it's not necessary to checkout the code
    - name: Check out code
      uses: actions/checkout@v3
      if: ${{ github.event_name == 'push' }}
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        filters: |
          code:
            - 'library/**'
            - 'executable/**'
            - 'tools/**'
            - 'test/**'
            - 'test-suite/**'
            - 'package.yaml'
          stack:
            - 'stack.*'
          nix:
            - 'flake.*'

  stack:
    name: 'Stack / Unit Tests'
    needs: changes
    if: ${{ needs.changes.outputs.code == 'true' || needs.changes.outputs.stack == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Install prerequisites
        run: |
          sudo apt install --yes z3

      - uses: actions/checkout@v3
        with:
          # Check out pull request HEAD instead of merge commit.
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Cache Stack root
        uses: actions/cache@v2
        with:
          path: ~/.stack
          key: stack-1-${{ runner.os }}-${{ hashFiles('stack.yaml.lock') }}
          restore-keys: |
            stack-1-${{ runner.os }}-

      - uses: haskell/actions/setup@v2
        id: setup-haskell-stack
        with:
          ghc-version: ${{ env.ghc_version }}
          enable-stack: true

      - name: Build dependencies
        run: |
          stack build --test --only-dependencies
          if [ -n "$(git status --porcelain)" ]; then
            git diff
            exit 1
          fi

      - name: Run unit tests
        run: stack test --pedantic

  cabal:
    name: 'Cabal / Unit Tests'
    needs: changes
    if: ${{ needs.changes.outputs.code == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Check out pull request HEAD instead of merge commit.
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install prerequisites
        run: |
          sudo apt install --yes z3
          curl -sSL https://github.com/sol/hpack/releases/download/${{ env.hpack_version }}/hpack_linux.gz | gunzip -c > hpack && chmod +x hpack

      - name: Run Hpack
        run: ./hpack

      - name: Cache Cabal package database and store
        uses: actions/cache@v3
        with:
          path: |
            ~/.cabal/packages
            ~/.cabal/store
          key: cabal-1-${{ runner.os }}-ghc-${{ env.ghc_version }}-${{ hashFiles('hs-backend-booster.cabal') }}
          restore-keys: |
            cabal-1-${{ runner.os }}-ghc-${{ env.ghc_version }}-
            cabal-1-${{ runner.os }}-ghc-
            cabal-1-

      - uses: haskell/actions/setup@v2
        id: setup-haskell-cabal
        with:
          ghc-version: ${{ env.ghc_version }}
          cabal-version: "3.6"

      - name: Install tools
        run: |
          cabal install happy
          cabal install alex

      - name: Run unit tests
        run: cabal v2-test --enable-tests --test-show-details=direct

      - name: Configure with profiling
        run: cabal v2-configure --enable-profiling -f-threaded

  # nix-build:
  #   name: 'Nix / Unit Tests'
  #   needs: changes
  #   if: ${{ needs.changes.outputs.code == 'true' || needs.changes.outputs.nix == 'true' }}
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       include:
  #         - runner: ubuntu-latest
  #           os: ubuntu-latest
  #         - runner: macos-12
  #           os: macos-12
  #         - runner: MacM1
  #           os: self-macos-12
  #   runs-on: ${{ matrix.runner }}
  #   steps:
  #     - name: Check out code
  #       uses: actions/checkout@v2.3.4
  #       with:
  #         # Check out pull request HEAD instead of merge commit.
  #         ref: ${{ github.event.pull_request.head.sha }}
  #         submodules: recursive

  #     - name: 'Upgrade bash'
  #       if: ${{ contains(matrix.os, 'macos') }}
  #       run: brew install bash

  #     # Do the Following only on Public Runners; Mac Runner is pre-installed with build tools
  #     - name: 'Install Nix'
  #       if: ${{ !startsWith(matrix.os, 'self') }}
  #       uses: cachix/install-nix-action@v15
  #       with:
  #         # Keep nix at <=2.7 https://github.com/NixOS/nix/issues/6572
  #         install_url: https://releases.nixos.org/nix/nix-2.7.0/install
  #         extra_nix_config: |
  #           substituters = http://cache.nixos.org https://cache.iog.io
  #           trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=
  #     - name: 'Install Cachix'
  #       if: ${{ !startsWith(matrix.os, 'self') }}
  #       uses: cachix/cachix-action@v10
  #       with:
  #         name: k-framework
  #         authToken: '${{ secrets.CACHIX_PUBLIC_TOKEN }}'

  #     - name: Build executables
  #       run: |
  #         GC_DONT_GC=1 nix build .#hs-backend-booster:exe:hs-backend-booster
  #         GC_DONT_GC=1 nix build .#hs-backend-booster:exe:parsetest
  #         GC_DONT_GC=1 nix build .#hs-backend-booster:exe:rpc-client

  #     - name: Run unit tests
  #       run: GC_DONT_GC=1 nix build .#hs-backend-booster:test:test-suite

  style:
    name: 'Formatting and Style'
    needs: changes
    if: ${{ needs.changes.outputs.code == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          # Check out pull request HEAD instead of merge commit.
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Download prerequisites
        # this could be cached but is probably fast anyway
        run: |
          curl -sSL https://github.com/fourmolu/fourmolu/releases/download/v${{ env.fourmolu_version }}/fourmolu-${{ env.fourmolu_version }}-linux-x86_64 -o fourmolu && chmod +x fourmolu && ./fourmolu --version
          curl -sSL https://github.com/ndmitchell/hlint/releases/download/v${{ env.hlint_version }}/hlint-${{ env.hlint_version }}-x86_64-linux.tar.gz | tar xvz hlint-${{ env.hlint_version }}/hlint

      - name: Check formatting
        run: |
          PATH=$PWD:$PATH scripts/fourmolu.sh
          echo "Checking diff"
          git diff --exit-code

      - name: Run hlint
        run: hlint-${{ env.hlint_version }}/hlint -g -j
