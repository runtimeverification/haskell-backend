---
name: Performance Profiling
on:
  # Trigger when an Issue created, edited; Issue MUST already be labeled properly
  issue_comment:
    types: [created, edited]

jobs: 
  Prepare:
    if: |
      contains(github.event.issue.labels.*.name, 'performance') &&
      ( contains(github.event.comment.body, '.tar.gz') )
    runs-on: [Linux, flyweight]
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Check User Org Association
        run: |
          set -euo pipefail
          echo $(pwd)

          echo "Testing User Org Relationship: $GITHUB_ACTOR"
          gh auth status
          if ! gh api -H "Accept: application/vnd.github+json" /orgs/runtimeverification/members/$GITHUB_ACTOR; then
            exit 1
          fi
          echo "Context: "
          cat ${GITHUB_EVENT_PATH}

  Profiling:
    needs: Prepare
    runs-on: [Linux, performance]
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Clean _work Folder
        run: |
          echo "Cleaning Folder"
          rm -rf ./*
      - name: Run Tests
        run: |
          set -euo pipefail
          ISSUE_NUMBER=$(cat ${GITHUB_EVENT_PATH} | jq '.issue.number')
          gh issue comment ${ISSUE_NUMBER} --body "IN PROGRESS: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          DOWNLOAD_URL=$(cat ${GITHUB_EVENT_PATH} | jq '.comment.body' | grep -oP '(https:)(.*?)(?=\))' )
          FILE_NAME=$(basename ${DOWNLOAD_URL})
          echo "Download Test File"
          curl -LOsS ${DOWNLOAD_URL}

          . /home/github-runner/.nix-profile/etc/profile.d/nix.sh
          echo "Starting Test Execution"
          mkdir -p profile/tests/$(echo ${FILE_NAME} | cut -d '.' -f 1)
          echo "RUNNING PROFILE: ${FILE_NAME}"
          nix run github:runtimeverification/haskell-backend#profile ./${FILE_NAME}
   
      - name: Publish Profile Results
        uses: actions/upload-artifact@v3.1.0
        with:
          path: ./profile-*.tar.gz

  on-success:
    needs: Profiling
    runs-on: [Linux, flyweight]
    if: ${{ always() && contains(join(needs.*.result, ','), 'success') }}
    env:
      GH_TOKEN: ${{ secrets.ORG_PAT }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3.0.2
      - run: |
          ISSUE_NUMBER=$(cat ${GITHUB_EVENT_PATH} | jq '.issue.number')
          gh issue comment ${ISSUE_NUMBER} --body "PASSED: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
  on-failure:
    needs: Profiling
    runs-on: [Linux, flyweight]
    if: ${{ always() && contains(join(needs.*.result, ','), 'failure') }}
    env:
      GH_TOKEN: ${{ secrets.ORG_PAT }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3.0.2    
      - run: |
          ISSUE_NUMBER=$(cat ${GITHUB_EVENT_PATH} | jq '.issue.number')
          gh issue comment ${ISSUE_NUMBER} --body "FAILED: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
