---
name: Haskell Profiling
on:
  # Trigger on Issue created; Run against master branch
  issues:
    types: [opened, edited]
    branches: 
      - 'master'
  # Trigger when an Issue is created or modified; Run against master branch only
  issue_comment:
    types: [created, edited]
    label: ['performance']
    branches: 
      - 'master'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.actor }}
  cancel-in-progress: true

jobs: 
  Performance-Profiling:
    if: contains(github.event.issue.labels.*.name, 'performance')
    runs-on: [Linux, performance]
    env:
      GH_TOKEN: ${{ secrets.ORG_PAT }}
    steps:
      - name: Clean _work Folder
        run: |
          echo "Cleaning Folder"
          rm -rf ./*
      
      - name: Check Actors Org Association
        run: |
          set -euo pipefail
          echo $(pwd)

          echo "Testing User Org Relationship: $GITHUB_ACTOR"
          gh auth status
          if ! gh api -H "Accept: application/vnd.github+json" /orgs/runtimeverification/members/$GITHUB_ACTOR; then
            exit 1
          fi
          echo "Context: "
          cat ${GITHUB_EVENT_PATH}

          echo "Creating Download URL from ISSUE"
          echo "DOWNLOAD_URL=$(cat ${GITHUB_EVENT_PATH} | jq '.comment.body' | grep -oP '(https:)(.*?)(?=\))' )" >> ${GITHUB_ENV}
          echo "FILE_NAME=profiling-data.tar.gz" >> ${GITHUB_ENV}

      - name: Download Files & Test
        run: |
          set -euo pipefail
          echo "${DOWNLOAD_URL}"
          curl -LO ${DOWNLOAD_URL}
          echo "FILE_NAME=$(basename ${DOWNLOAD_URL})" >> ${GITHUB_ENV}
          file $(basename ${DOWNLOAD_URL})
          
      - name: Run Tests
        run: |
          set -euo pipefail

          . /home/github-runner/.nix-profile/etc/profile.d/nix.sh
          echo "Starting Test Execution"
          start=$(date)
          mkdir -p profile/tests/$(echo ${FILE_NAME} | cut -d '.' -f 1)
          echo "RUNNING PROFILE: ${FILE_NAME}"
          nix run github:runtimeverification/haskell-backend#profile ./${FILE_NAME}

          stop=$(date)
          RUNTIME=$(( stop-start ))
          echo ${RUNTIME}

      - name: Publish Profile Results
        uses: actions/upload-artifact@v3.1.0
        with:
          path: ./profile-*-${FILE_NAME}